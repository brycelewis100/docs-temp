openapi: 3.0.0
info:
    title: Deprecated Cycle Public API
    license:
        name: CC-BY-4.0
        url: https://creativecommons.org/licenses/by/4.0/
    description: |
        The Cycle API is a [REST-based](http://en.wikipedia.org/wiki/Representational_state_transfer), resource-oriented API
        designed to be easy to use and understand. Using this API, you are able to fully interact with the Cycle Platform. 

        All API responses return JSON, including errors. There is also support for cross-origin resource sharing, so this API can be used
        in a client-side web application as well.

        ## Auth Basics 
        Every API request much have an accompanying API key in the Authorization header. For more informaiton on generating an API key head over to the [Portal Docs](https://docs.cycle.io/reference/hubs/API-access/api-key-generate). 

        Your API key should never be made publicly available, published to a public repository, or used on a client side
        web app. If you would like to use the API from a web app, you should create a thin-client service that acts as a passthrough for
        your API requests.

        ## The Root Document
        Every response follows the same structure, known as the root document. The main data structure, known as a
        resource, is nested under a data field. If you request a collection of resources, the
        data field will be an array of those resources. If you request a single resource, the data field will be
        equal to that resource.

        If there is an error, the error field will be present, and the data field will be present and null.

        The root resource. If fetching a collection, this will be an array of resource objects.

        Includes fields - the key will be the name of the included item passed. All values of include fields
        will be a full resource structure. (i.e. including environments will embed full environment objects by ID)

        Meta Fields - the key will be equal to the name of the meta field provided. Values of meta
        fields will vary based on the resource. These values are injected into the data object(s).

        ## Scope
        In order to fetch resources that are part of a hub (containers, environments, etc.), you will need to pass an
        X-Hub-ID header. When fetching collections of resources, this will limit the response to contain only resources from
        the specified hub. Most requests require this header.

        ## Queries
        When trying to gather more complete or specific data you can use query parameters to supplement the normal return (metas,
        includes) and you can also add specificity to the format and the order (sort, filter). It's worth understanding that
        sort & filter should only be used on collections.

        **Sort** - An array of sort values. To sort descending, put a `-`n front of the value, i.e. `-id`.

        **Include** - An array of include values. Included resources will show up under the root document's `include` field, with the key being the id
        of the included resource. In the case of applying an include to a collection of resources, if two resources share the same
        include, it will only appear once in the return.

        **Meta** - An array of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a
        collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to
        individual resources, and may appear in the root document. These will be clearly labeled.

        **Filter** - The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
    version: 1.0.0
    contact:
        email: support@cycle.io
servers:
    - description: Deprecated Cycle Public API
      url: https://api.cycle.io
security:
    - bearerAuth: []
      hubAuth: []
tags:
    - name: Environments
      description: Environments are logical groupings of containers. All containers deployed inside an environment automatically have a private network built between them, enabling seamless communication.
    - name: Containers
      description: Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
    - name: Images
      description: "Container images are atomic copies of a filesystem that are built from a file (ex: Dockerfile)."
    - name: Stacks
      description: Stacks offer a powerful way to declarative manage multiple containers, and their deployments to the Cycle platform. Using stacks, you are able to configure every aspect of your applications ahead of time, save it to your version controlled repo, and have Cycle automate the deployment any time you make a push.
    - name: Pipelines
      description: From simple tasks like importing an image, to complex sequences that affect entire clusters, Deployment Pipelines make it easy to automate nearly any task within Cycle.
    - name: DNS
      description: Cycle provides a full suite of DNS tooling.  Set up everything from a DNS Zone, record, certificate, and more.
    - name: Infrastructure
      description: Cycle creates a paradigm shift when it comes to dealing with your infrastructure. The primary focus when using the platform is your containers, while the servers underneath appear as a giant pool of distributed resources.
    - name: Providers
      description: "A subgroup of infrastructure, provider calls deal specifically with infrastructure providers used through the Cycle platform. "
    - name: Servers
      description: A subgroup of infrastructure, servers call deal specificially with server resources.
    - name: SDN
      description: Software defined networking. Includes networks that can be created when a user needs to create a new private network spanning multiple environments, and global load balancers for balancing traffic across multiple environments.
    - name: WebsocketAuth
      description: "A collection of calls used to create resources necessary to connect to a websocket based resource. "
    - name: Backups
      description: A subgroup of containers, backups refers to calls that have to do with automated backups managed through a Cycle integration.
    - name: Instances
      description: "A subgroup of containers, instances refers to calls that work with container instance resources. "
    - name: ApiKeys
      description: A subgroup of Hubs, ApiKeys refers to calls that have to do with creating and managing API key resources.
    - name: ImageSources
      description: "A subgroup of images, ImageSources refers to calls that have to do with creating and managing image source resources. "
    - name: InfrastructureIPs
      description: A subgroup of infrastructure which refers to calls that have to do with managing IPs for infrastructure providers.
    - name: Jobs
      description: "Jobs are calls which refer to managing job resources. "
paths:
    /v1/account:
        get:
            operationId: getAccount
            summary: Get Account
            description: Gets the Account associated with the authenticated bearer token.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            responses:
                "200":
                    description: Returns the Account.
                    content:
                        application/json:
                            schema:
                                title: AccountResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAccount
            tags:
                - Accounts
            summary: Update Account
            description: Updates the Account.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: object
                                    description: The new name on the Account.
                                    properties:
                                        first:
                                            type: string
                                        last:
                                            type: string
                                allow_support_login:
                                    type: boolean
                                    description: If true, Cycle employees will have the ability, upon consent, to access the account for support purposes. This access will be logged.
            responses:
                "200":
                    description: Returns the updated Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAccount
            tags:
                - Accounts
            summary: Delete Account
            description: Puts the Account into a `deleted` state. This will fail if the Account is the current `OWNER` of an active Hub.
            responses:
                "202":
                    description: Returns a job descriptor with information about the status of the Account deletion.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/invites:
        get:
            operationId: getAccountInvites
            summary: List Account Invites
            description: Lists the pending Hub Memberships (also known as Invites) associated with the Account.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - $ref: "#/components/parameters/MembershipIncludeParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of pending Hub Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/invites/{inviteId}:
        patch:
            operationId: updateAccountInvite
            summary: Accept or reject an Invite to join a Hub
            description: Accept/reject a pending Invite to join a Hub.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - name: inviteId
                  description: The ID of the given Invite.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/MembershipIncludeParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                accept:
                                    type: boolean
                                    description: If true, the Invite will be accepted and the associated Account will join the Hub.
                                decline:
                                    type: boolean
                                    description: If true, the Invite will be declined and the associated Account will NOT join the Hub.
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/memberships:
        get:
            operationId: getAccountMemberships
            summary: Get Account Memberships
            description: Lists the Hub Memberships for a given account.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - $ref: "#/components/parameters/MembershipIncludeParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Memberships associated with the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/logins:
        get:
            operationId: getAccountLogins
            summary: Get Account Logins
            description: Lists logins associated with a given account.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of login records associated with this Account.
                    content:
                        application/json:
                            schema:
                                title: AccountLoginsResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            oneOf:
                                                - $ref: "#/components/schemas/AccountEmployeeLogin"
                                                - $ref: "#/components/schemas/AccountPasswordLogin"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/password:
        patch:
            operationId: changePassword
            summary: Change Password
            description: Change the password on the Account. Requires the current password of the Account to be submitted.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - current
                                - new
                            properties:
                                current:
                                    type: string
                                    description: Current Password
                                new:
                                    type: string
                                    description: New Password
                                    minLength: 8
            responses:
                "200":
                    description: Returns an Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/reset-password:
        post:
            operationId: resetPassword
            summary: Reset Password
            description: Initiate a password reset for the Account. A confirmation email will be sent to the email associated with the Account, and the token in the email must be passed in a second call to this endpoint.
            tags:
                - Accounts
            requestBody:
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: object
                                  required:
                                      - email
                                  properties:
                                      email:
                                          type: object
                                          required:
                                              - address
                                          properties:
                                              address:
                                                  type: string
                                - type: object
                                  required:
                                      - token
                                      - password
                                  properties:
                                      token:
                                          type: string
                                      password:
                                          type: string
            responses:
                "200":
                    description: Returns a simple object containing a success boolean.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - success
                                        properties:
                                            success:
                                                type: boolean
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/setup:
        get:
            operationId: getTwoFactorAuthSetup
            summary: Get Two-Factor Auth Setup
            description: Gets the barcode and secret required for setting up two-factor authentication for the Account.
            tags:
                - Accounts
            parameters: []
            responses:
                "200":
                    description: Returns necessary information for configuring two-factor auth for the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthSetup"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: enableTwoFactorAuth
            summary: Enable Two-Factor Auth
            description: Enables two-factor auth for the Account. Retrieve the token from an authenticator app using the secret from `getTwoFactorAuthSetup`.
            tags:
                - Accounts
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - token
                            properties:
                                token:
                                    type: string
                                    description: The token used to authenticate the two-factor setup.
            responses:
                "200":
                    description: Returns the recovery codes needed in case two-factor auth is no longer possible.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthRecovery"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/disable:
        post:
            operationId: disableTwoFactorAuth
            summary: Disable Two-Factor Auth
            description: Disables two-factor auth for the account.
            tags:
                - Accounts
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - token
                            properties:
                                token:
                                    type: string
                                    description: A valid existing two-factor auth token, for verification.
            responses:
                "200":
                    description: Returns the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/recover:
        post:
            operationId: recoverTwoFactorAuth
            summary: Recover Two-Factor Auth
            description: Returns a new two-factor auth setup to reset the Account's two-factor auth.
            tags:
                - Accounts
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                                - recovery_codes
                            properties:
                                email:
                                    type: string
                                    description: The user's email
                                password:
                                    type: string
                                recovery_codes:
                                    type: array
                                    items:
                                        type: string
                                token:
                                    type: string
            responses:
                "200":
                    description: Returns details for setting up two-factor auth.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthSetup"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements:
        get:
            operationId: getAnnouncements
            summary: Get Announcements
            description: Lists any important updates posted by the Cycle team.
            security:
                - bearerAuth: []
            tags:
                - Announcements
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          resolved:
                              description: Get only Announcements that have been resolved, or only those that have not.
                              type: string
                              enum:
                                  - "true"
                                  - "false"
                          range:
                              description: The start date from when to fetch the Announcements
                              type: string
                              enum:
                                  - hour
                                  - day
                                  - week
                                  - month
                                  - year
            responses:
                "200":
                    description: List of announcements.
                    content:
                        application/json:
                            schema:
                                title: AnnouncementsListResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders:
        get:
            operationId: getOrders
            summary: List Billing Orders
            description: Requires the `billing-services-manage` capability.
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            responses:
                "200":
                    description: Returns a list of Billing Orders.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createOrder
            summary: Create Billing Order
            description: Requires the `billing-orders-manage` capability.
            tags:
                - Billing
            parameters:
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            requestBody:
                description: Parameters for creating a new order
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                tier_plan_id:
                                    type: string
                                    description: ID associated with the tier plan
                                support_plan_id:
                                    type: string
                                    description: ID associated with the support plan
                                term_length:
                                    type: string
                                    description: String that defines term length
                                    enum:
                                        - once
                                        - monthly
                                        - yearly
                                promo_code:
                                    type: string
                                    description: String that defines a promo code
            responses:
                "201":
                    description: Returns a Billing Order.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/BillingOrder"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders/{orderId}:
        get:
            operationId: getBillingOrder
            summary: Get Billing Order
            description: Requires the `billing-services-manage` capability.
            tags:
                - Billing
            parameters:
                - name: orderId
                  description: The ID of the billing order.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            responses:
                "200":
                    description: Returns a Billing Order
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateBillingOrder
            summary: Update Billing Order
            description: Requires the `billing-services-manage` capability.
            tags:
                - Billing
            parameters:
                - name: orderId
                  description: The ID of the billing order.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                tier_plan_id:
                                    type: string
                                    description: ID associated with the tier plan
                                support_plan_id:
                                    type: string
                                    description: ID associated with the support plan
                                term_length:
                                    type: string
                                    description: String that defines term length
                                    enum:
                                        - once
                                        - monthly
                                        - yearly
                                promo_code:
                                    type: string
                                    description: String that defines a promo code
            responses:
                "200":
                    description: Returns a Billing Order.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders/{orderId}/tasks:
        post:
            operationId: createOrderJob
            summary: Create Billing Order Job
            description: |
                Used to confirm a Billing Order.

                Requires the `billing-services-manage` capability.
            tags:
                - Billing
            parameters:
                - name: orderId
                  description: The ID of the requested Order
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - confirm
                                    description: The name of the action to perform
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/support:
        get:
            operationId: getBillingSupportPlans
            summary: List Support Plans
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            deprecated: true
            responses:
                "200":
                    description: Returns available support plans.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/SupportPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/tiers:
        get:
            operationId: getBillingTiers
            summary: List Billing Tiers
            description: Returns list of availiable Billing Tiers.
            tags:
                - Billing
            parameters: []
            responses:
                "200":
                    description: Returns a list of available Billing Tiers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TierPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods:
        get:
            operationId: getBillingMethods
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Billing Methods
            description: |
                Lists the Billing Methods associated with the Hub defined in X-Hub-ID.

                Requires the `billing-methods-manage` capability.
            responses:
                "200":
                    description: returns a collection of billing methods.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createBillingMethod
            tags:
                - Billing
            parameters: []
            summary: Create Billing Method
            description: Requires the `billing-methods-manage` capability.
            requestBody:
                description: Parameters for creating a new billing method.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - primary
                                - address
                                - credit_card
                            properties:
                                name:
                                    type: string
                                    description: A name for the billing method.
                                primary:
                                    type: boolean
                                    description: A boolean where true represents a billing method being primary.
                                address:
                                    $ref: "#/components/schemas/Address"
                                credit_card:
                                    type: object
                                    required:
                                        - name
                                        - number
                                        - cvv
                                        - expiration
                                    properties:
                                        name:
                                            type: string
                                        number:
                                            type: string
                                        cvv:
                                            type: string
                                        expiration:
                                            type: object
                                            required:
                                                - month
                                                - year
                                            properties:
                                                month:
                                                    type: number
                                                year:
                                                    type: number
            responses:
                "201":
                    description: Returns a Billing Method resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods/{methodId}:
        get:
            operationId: getBillingMethod
            summary: Get Billing Method
            description: Requires the `billing-methods-manage` capability.
            tags:
                - Billing
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateBillingMethod
            summary: Update Billing Invoice
            description: Requires the `billing-methods-manage` capability.
            tags:
                - Billing
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the billing method.
                                primary:
                                    type: boolean
                                    description: A boolean where true represents a billing method being primary.
                                address:
                                    $ref: "#/components/schemas/Address"
                                credit_card:
                                    $ref: "#/components/schemas/CreditCard"
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteBillingMethod
            summary: Delete Biilling Method
            description: |
                Deletes the Billing Method. However, the primary payment method may not be deleted.
                Requires the `billing-methods-manage` capability.
            tags:
                - Billing
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices:
        get:
            operationId: getInvoices
            summary: List Billing Invoices
            description: |
                List the Invoices assoicated with the Hub.  

                Requires the `billing-invoices-view` capability.
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for the specified text on supported fields.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the invoice's current state.
                          range-start:
                              description: The start date from when to pull the invoices
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the invoices
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns a list of Invoices.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Invoice"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}:
        get:
            operationId: getInvoice
            summary: Get Billing Invoice
            description: Requires the `billing-invoices-view` capability.
            tags:
                - Billing
            parameters:
                - name: invoiceId
                  description: The ID of the invoice.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
            responses:
                "200":
                    description: Returns an invoice resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Invoice"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}/tasks:
        post:
            operationId: createInvoiceJob
            summary: Create Invoice Job
            description: |
                Creates a new Job on an Invoice. Generally used to make a payment on an Invoice.

                Requires the `billing-invoices-pay` capability.
            tags:
                - Billing
            parameters:
                - name: invoiceId
                  description: The ID of the invoice.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - pay
                                    description: The name of the action to perform.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services:
        get:
            operationId: getBillingServices
            summary: List Billing Services
            description: Requries the `billing-services-view` capability.
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Billing Services.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Service"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services/{servicesId}:
        get:
            operationId: getBillingService
            summary: Get Billing Service
            description: Requries the `billing-services-view` capability.
            tags:
                - Billing
            parameters:
                - name: servicesId
                  description: The ID of the Billing Service.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns the Hub's specified Billing Service.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Service"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services/overages:
        get:
            operationId: getBillingOverages
            summary: List Billing Overages
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns Billing Overages.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Overage"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits:
        get:
            operationId: getCredits
            summary: List Billing Credits
            description: |
                Lists the Billing Credits associated with the current Hub.

                Requires the `billing-credits-view` capability.
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the credit's current state.
                          search:
                              type: string
                              description: Use a text-based search to filter the credits.
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of credit resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits/{creditsId}:
        get:
            operationId: getCredit
            summary: Get Billing Credit
            description: Requires the `billing-credits-view` capability.
            tags:
                - Billing
            parameters:
                - name: creditsId
                  description: The ID for a given credit.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a credit resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments:
        get:
            operationId: getEnvironments
            summary: List Environments
            description: Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers
                              - containers_count
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stacks
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` filter for environments matching a particular creator, such as `account-ID`.
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given environment(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the environment's current state.
                          stack_build:
                              type: string
                              description: |
                                  `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish to filter for and the return sill be any environments that have the stack build deployed to them.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Environments.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Environment"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createEnvironment
            summary: Create Environment
            description: Requires the `environments-create` capability.
            tags:
                - Environments
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - cluster
                                - about
                                - features
                                - stack
                            properties:
                                name:
                                    type: string
                                    description: A user defined name for the Environment.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                cluster:
                                    type: string
                                    description: The cluster this Environment is associated with.
                                about:
                                    type: object
                                    description: Contains details regarding the Environment.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type: string
                                            description: A custom description for this Environment.
                                features:
                                    $ref: "#/components/schemas/Features"
            responses:
                "201":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}:
        get:
            operationId: getEnvironment
            summary: Get Environment
            description: Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers
                              - containers_count
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stacks
            responses:
                "200":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateEnvironment
            summary: Update Environment
            description: |
                Updates the specificed Environment.

                Requires the `environments-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an Environment.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    nullable: true
                                    type: string
                                identifier:
                                    nullable: true
                                    type: string
                                version:
                                    nullable: true
                                    type: string
                                about:
                                    nullable: true
                                    $ref: "#/components/schemas/EnvironmentAbout"
            responses:
                "200":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteEnvironment
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Delete Environment
            description: Requires the `environments-manage` capability.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/tasks:
        post:
            operationId: createEnvironmentJob
            summary: Create Environment Job
            description: |
                Create a job for an Environment, such as 'start' or 'stop'. 

                Requires the `environments-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Environment job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    start: "#/components/schemas/EnvironmentStartAction"
                                    stop: "#/components/schemas/EnvironmentStopAction"
                                    initialize: "#/components/schemas/EnvironmentInitializeAction"
                                    deployments.reconfigure: "#/components/schemas/EnvironmentReconfigureDeploymentsAction"
                            oneOf:
                                - $ref: "#/components/schemas/EnvironmentStartAction"
                                - $ref: "#/components/schemas/EnvironmentStopAction"
                                - $ref: "#/components/schemas/EnvironmentInitializeAction"
                                - $ref: "#/components/schemas/EnvironmentReconfigureDeploymentsAction"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/summary:
        get:
            operationId: getEnvironmentSummary
            summary: Get Environment Summary
            description: |
                Gets the summary of an Environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  

                Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested environment.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an environment summary object.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/EnvironmentSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/deployments:
        get:
            operationId: getEnvironmentDeployments
            summary: List Environment Deployments
            description: |
                Gets a list of all deployments in the specified Environment.

                Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the Environment to get the list of deployments for.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A list of deployments.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - versions
                                        properties:
                                            versions:
                                                type: object
                                                description: A map where the key is the version property of a deployment.
                                                additionalProperties:
                                                    type: object
                                                    required:
                                                        - containers
                                                        - tags
                                                    properties:
                                                        tags:
                                                            type: array
                                                            description: An array of all tags on this environment that point to this version.
                                                            items:
                                                                $ref: "#/components/schemas/Identifier"
                                                        containers:
                                                            type: integer
                                                            description: The number of containers utilizing this version of this deployment.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb:
        get:
            operationId: getLoadBalancerService
            summary: Get Load Balancer Service
            description: Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a load balancer info resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: Information about an environments load balancer configuration, state, and availability settings.
                                        required:
                                            - default_config
                                            - service
                                            - default_type
                                        properties:
                                            default_config:
                                                $ref: "#/components/schemas/LoadBalancerConfig"
                                            default_type:
                                                type: string
                                                enum:
                                                    - haproxy
                                                    - v1
                                            base_configs:
                                                type: object
                                                required:
                                                    - haproxy
                                                    - v1
                                                properties:
                                                    haproxy:
                                                        $ref: "#/components/schemas/HaProxyConfig"
                                                    v1:
                                                        $ref: "#/components/schemas/V1LbConfig"
                                            service:
                                                $ref: "#/components/schemas/LoadBalancerEnvironmentService"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/tasks:
        post:
            operationId: createLoadBalancerServiceJob
            summary: Create Load Balancer Service Job
            description: Creates a task that will update the load balancer's configuration.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the environment where this load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a load balancer.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        high_availability:
                                            nullable: true
                                            type: boolean
                                            description: A boolean where `true` represents the desire to run the environment load balancer service in high availability mode.
                                        auto_update:
                                            nullable: true
                                            type: boolean
                                            description: A boolean representing if this service container is set to autoupdate or not
                                        config:
                                            $ref: "#/components/schemas/LoadBalancerConfig"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/report:
        get:
            operationId: getLoadBalancerTelemetryReport
            summary: Get load balancer v1 telemetry report
            description: |
                Fetches a telemetry report for Cycle's native load balancer for the specified range.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull load balancer telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull load balancer telemetry data
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns the load balancer telemetry report
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerTelemetryReport"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/latest:
        get:
            operationId: getLoadBalancerLatestTelemetryReport
            summary: Get the latest load balancer v1 telemetry.
            description: |
                Fetches the latest telemetry report for Cycle's native load balancer. Provides detailed information on a per-instance basis.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: true
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                      ### Required Filter
                      On this endpoint, you MUST pass filter[controller].
                  schema:
                      type: object
                      properties:
                          controller:
                              type: string
                              description: |
                                  `filter[controller]=port-123` filter for a specific controller to load telemetry for. THIS FILTER IS REQUIRED.
            responses:
                "200":
                    description: Returns the latest load balancer telemetry
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerLatestTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/latest-controllers:
        get:
            operationId: getLoadBalancerTelemetryLatestControllers
            summary: Get Latest Load Balancer Controller Telemetry
            description: |
                Gets the controller information for the specified load balancer. Returns a similar struct to the 'latest' load balancer telemetry call, but does NOT return snapshots, just the controller information.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the environment of the desired load balancer.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances
                              - servers
                              - containers
            responses:
                "200":
                    description: Returns information about the latest controllers that produced telemetry.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerLatestControllers"
                                    includes:
                                        $ref: "#/components/schemas/controllers"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/discovery/tasks:
        post:
            operationId: createDiscoveryServiceJob
            summary: Create Discovery Service Job
            description: Creates a task that will update the discovery service's configuration.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the environment where this discovery service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a discovery service.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        config:
                                            $ref: "#/components/schemas/DiscoveryConfig"
                                        high_availability:
                                            type: boolean
                                            nullable: true
                                            description: A boolean where `true` represents the desire to run the environment discovery service in high availability mode.
                                        auto_update:
                                            type: boolean
                                            nullable: true
                                            description: A boolean where `true` represents the desire to automatically update the environment discovery service.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/scheduler/tasks:
        post:
            operationId: createSchedulerServiceJob
            summary: Create Scheduler Service Job
            description: Creates a task that will update the scheduler service's configuration.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the environment where this scheduler service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a scheduler service.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        config:
                                            nullable: true
                                            type: object
                                            allOf:
                                                - $ref: "#/components/schemas/SchedulerConfig"
                                        auto_update:
                                            type: boolean
                                            nullable: true
                                            description: A boolean where `true` represents the desire to automatically update the environment scheduler service.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn:
        get:
            operationId: getVPNService
            summary: Get VPN Service
            description: Requires the `environments-vpn` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns the VPN service.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VPNInfoReturn"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/logins:
        get:
            operationId: getVPNLogins
            summary: Get VPN Logins
            description: Requires the `environments-vpn` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a VPNInfo resource.
                    content:
                        application/json:
                            schema:
                                title: VPNInfoEnvironmentService
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VPNLogin"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/users:
        get:
            operationId: getVPNUsers
            summary: List VPN Users
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a list of VPN users for the given VPN.
                    content:
                        application/json:
                            schema:
                                title: getVPNUsersReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VPNUsers"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createVPNUser
            summary: Create VPN User
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new VPN user.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - username
                                - password
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string
            responses:
                "201":
                    description: Returns a VPN User.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VPNUsers"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/users/{userId}:
        delete:
            operationId: deleteVPNUser
            summary: Delete VPN User
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service the given user belongs to resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: userId
                  description: The userId of the user to be deleted.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns no data.
                    content:
                        application/json:
                            schema:
                                title: VPNUserDeleteReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/tasks:
        post:
            operationId: createVPNServiceJob
            summary: Create VPN Service Job
            description: Used to reconfigure or reset the Environment VPN. Requires the `environments-vpn-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the Environment the VPN service resides in.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: The task contents used to build the Environment VPN Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    reset: "#/components/schemas/VpnResetTask"
                                    reconfigure: "#/components/schemas/VpnReconfigureTask"
                            oneOf:
                                - $ref: "#/components/schemas/VpnResetTask"
                                - $ref: "#/components/schemas/VpnReconfigureTask"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/telemetry/instances:
        get:
            operationId: getEnvironmentInstancesTelemetry
            summary: Get Environment Instances Telemetry
            description: |
                Get telemetry points on the number of instances and their states over a range of time.

                Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the desired Environment
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns a list of telemetry data points.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/InstanceTelemetryPoint"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/scoped-variables:
        get:
            operationId: getScopedVariables
            summary: List Scoped Variables
            description: Requires the `scoped-variables-view` capability.
            tags:
                - Environments
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Scoped Variable(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Scoped Variable's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Scoped Variables.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createScopedVariable
            summary: Create Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Environments
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a Scoped Variable.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - scope
                                - source
                            properties:
                                identifier:
                                    type: string
                                    description: An identifier for this Scoped Variable.
                                scope:
                                    $ref: "#/components/schemas/ScopedVariableScope"
                                access:
                                    $ref: "#/components/schemas/ScopedVariableAccess"
                                source:
                                    type: object
                                    description: The source or value of the Scoped Variable.
                                    discriminator:
                                        propertyName: type
                                        mapping:
                                            raw: "#/components/schemas/RawSource"
                                            url: "#/components/schemas/URLSource"
                                    oneOf:
                                        - $ref: "#/components/schemas/RawSource"
                                        - $ref: "#/components/schemas/URLSource"
            responses:
                "201":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/scoped-variables/{scopedVariableId}:
        get:
            operationId: getScopedVariable
            summary: Get Scoped Variable
            description: Requires the `scoped-variables-view` capability.
            tags:
                - Environments
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateScopedVariable
            summary: Update Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Environments
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested endpointnvironment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Scoped Variable.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                identifier:
                                    type: string
                                    description: An identifier, similar to a key in an Environment variable.  Its used when envoking the Scoped Variable.
                                scope:
                                    $ref: "#/components/schemas/ScopedVariableScope"
                                access:
                                    $ref: "#/components/schemas/ScopedVariableAccess"
                                source:
                                    type: object
                                    description: The source or value of the Scoped Variable.
                                    discriminator:
                                        propertyName: type
                                        mapping:
                                            raw: "#/components/schemas/RawSource"
                                            url: "#/components/schemas/URLSource"
                                    oneOf:
                                        - $ref: "#/components/schemas/RawSource"
                                        - $ref: "#/components/schemas/URLSource"
            responses:
                "200":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteScopedVariable
            summary: Delete Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Environments
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers:
        get:
            operationId: getContainers
            summary: List Containers
            description: Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domains
                              - ips
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` filter for containers matching a particular creator, such as `account-ID` or `environment-ID`
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those containers matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search containers for a value associated with a field on the given container(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state.
                          service:
                              type: string
                              description: |
                                  `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`.
                          public_network:
                              type: string
                              description: |
                                  `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`.
                          image:
                              type: string
                              description: |
                                  `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment.
                          tags:
                              type: string
                              description: |
                                  `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return.
                          stack:
                              type: string
                              description: |
                                  `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack.
                          deployment:
                              type: string
                              description: |
                                  `filter[deployment]=v1,v2` filter containers by deployment(s).
                          range-start:
                              description: The start date from when to pull the containers
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the containers
                              $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Containers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Container"
                                    includes:
                                        $ref: "#/components/schemas/ContainerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createContainer
            summary: Create Container
            description: Requires the `containers-deploy` capability.
            tags:
                - Containers
            parameters: []
            requestBody:
                description: Parameters for creating a new Container.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - environment_id
                                - image_id
                                - stateful
                                - config
                            properties:
                                name:
                                    type: string
                                    description: A user defined name for the Container.
                                identifier:
                                    type: string
                                    nullable: true
                                    allOf:
                                        - $ref: "#/components/schemas/Identifier"
                                environment_id:
                                    type: string
                                    description: An identifier for the Environment this Container will be deployed to.
                                image_id:
                                    type: string
                                    description: An identifier for the Image used to create this Container.
                                stateful:
                                    type: boolean
                                    description: A boolean where true represents this Container is stateful.
                                config:
                                    $ref: "#/components/schemas/Config"
                                lock:
                                    type: boolean
                                    description: When set to true, prevents this Container from being deleted.
                                deployment:
                                    type: object
                                    nullable: true
                                    allOf:
                                        - $ref: "#/components/schemas/Deployment"
                                volumes:
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/ContainerVolume"
                                annotations:
                                    type: object
                                    nullable: true
                                    description: Custom meta data. Not utilized by Cycle.
                                    additionalProperties: {}
            responses:
                "201":
                    description: Returns a Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}:
        get:
            operationId: getContainer
            summary: Get Container
            description: |
                Gets a Container.

                Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domains
                              - ips
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
            responses:
                "200":
                    description: Returns a Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                                    includes:
                                        $ref: "#/components/schemas/ContainerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateContainer
            summary: Update Container
            description: |
                Updates the specified Container.

                Requires the `containers-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the Container.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Container.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name for the Container.
                                identifier:
                                    type: string
                                    description: The name for the identifier.
                                deprecate:
                                    type: boolean
                                    description: Sets whether Container should be deprecated.
                                lock:
                                    type: boolean
                                    description: When set to true, prevents this Container from being deleted.
                                annotation:
                                    type: object
                                    description: User meta data for the Container.
                                    additionalProperties:
                                        type: string
            responses:
                "200":
                    description: Returns the updated Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainer
            summary: Delete Container
            description: Requires the `containers-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/summary:
        get:
            operationId: getContainerSummary
            summary: Get Container Summary
            description: Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an Container summary resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ContainerSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/tasks:
        post:
            operationId: createContainerJob
            summary: Create Container Job
            description: |
                Used to perform different actions on a given Container. 

                Requires the following capabilities based on the task: 
                `start`: `containers-manage`
                `stop`: `containers-manage`
                `reconfigure`: `containers-manage`
                `volumes.reconfigure`: `containers-volumes-manage`
                `reimage`: `containers-manage`
                `scale`: `containers-manage`
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new container job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    start: "#/components/schemas/ContainerStartAction"
                                    stop: "#/components/schemas/ContainerStopAction"
                                    reconfigure: "#/components/schemas/ReconfigureContainer"
                                    volumes.reconfigure: "#/components/schemas/ReconfigureVolumes"
                                    reimage: "#/components/schemas/Reimage"
                                    scale: "#/components/schemas/Scale"
                            oneOf:
                                - $ref: "#/components/schemas/ContainerStartAction"
                                - $ref: "#/components/schemas/ContainerStopAction"
                                - $ref: "#/components/schemas/ReconfigureContainer"
                                - $ref: "#/components/schemas/ReconfigureVolumes"
                                - $ref: "#/components/schemas/Reimage"
                                - $ref: "#/components/schemas/Scale"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances:
        get:
            operationId: getInstances
            summary: List Instances
            description: Requires the `containers-view` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the container this instance is created from.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  explode: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search instances for a value associated with a field on the given instance(s).
                          server:
                              type: string
                              description: |
                                  `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server.
                          range-start:
                              description: The start date from when to pull the instances
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the instances
                              $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Container Instances.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createInstances
            summary: Create Instances
            description: |
                Manually create Instances of a Container.

                Requires the `containers-update` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the Container this Instance is created from.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: object
                                required:
                                    - server_id
                                    - new_instances
                                properties:
                                    server_id:
                                        type: string
                                        description: The ID of the Server the new Instance(s) should be deployed to.
                                    new_instances:
                                        type: integer
                                        description: The number of new Instances to be created on the given Server.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainerInstances
            summary: Delete Container Instance(s)
            description: |
                Manually delete Instances of a Container.

                Requires the `containers-update` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the container the instance(s) were created from.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}:
        get:
            operationId: getInstance
            summary: Get Instance
            description: Requires the `containers-view` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
            responses:
                "200":
                    description: Returns a Container Instance.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteInstance
            summary: Delete Container Instance
            description: Requires the `containers-update` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/ssh:
        get:
            operationId: generateInstanceSSHCredentials
            summary: Generate Instance SSH Credentials
            description: |
                Generates credentials for connecting to an Instance via SSH. The generated endpoint/secret can be used to log in via SSH
                into the Instance without exposing ports on the container or host.

                Requires the `containers-ssh` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an SSH connection response.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/SSHResponse"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: expireInstanceSSHCredentials
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Expire SSH Credentials
            description: |
                Instantly expires any SSH credentials generated for this Instance.

                Requires the `containers-ssh` capability.
            responses:
                "200":
                    description: Returns the number of tokens removed.
                    content:
                        application/json:
                            schema:
                                title: ExpireSSHTokenResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: The number of tokens expired.
                                        required:
                                            - tokens
                                        properties:
                                            tokens:
                                                type: integer
                                                description: The number of tokens expired.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/tasks:
        post:
            operationId: createInstanceJob
            summary: Create Instance Job
            description: |
                Used to perform different actions on a given Container Instance. Can be used to migrate or undo a migration of a Container Instance.

                Requires the `containers-instance-migrate` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new container instance job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    migrate: "#/components/schemas/Migrate"
                                    migrate_revert: "#/components/schemas/RevertMigration"
                            oneOf:
                                - $ref: "#/components/schemas/RevertMigration"
                                - $ref: "#/components/schemas/Migrate"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/volumes:
        get:
            operationId: getInstanceVolumes
            summary: List Instance Volumes
            description: Requires the `containers-view` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the Container Instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Container Instance Volumes.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/InstanceVolume"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/report:
        get:
            operationId: getInstanceTelemetryReport
            summary: Get Instance Telemetry Report
            description: |
                Retrieves a point-in-time report of an Instance's resource usage (CPU, RAM, Network, Storage, etc).

                Requires the `containers-view` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns an Instance telemetry report.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/InstanceTelemetryReport"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream:
        get:
            operationId: getInstanceTelemetryStreamAuth
            summary: Instance Telemetry Stream Authorization
            description: |
                Retrieves an access token and URL to open a websocket to for streaming instance telemetry live.
                This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.

                Requires the `containers-view` capability.
            tags:
                - Containers
                - Instances
                - Stream
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the Container Instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns credentials for connecting to an instance telemetry stream.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: Credentials for connecting to the instance telemetry stream on compute.
                                        required:
                                            - token
                                            - address
                                        properties:
                                            token:
                                                type: string
                                                description: The authentication token passed into the address as a URL parameter (?token).
                                            address:
                                                description: The URL address to open a websocket to for streaming instance telemetry data.
                                                type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/servers:
        get:
            operationId: getContainerServers
            summary: List Container Servers
            description: |
                Lists all Servers that currently have an Instance of this Container deployed to them.

                Requires the `containers-view` capability.
            tags:
                - Containers
                - Infrastructure
                - Servers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - primary_ip
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns an array of Server IDs / number of Instances of this Container deployed to them.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ServerInstancesSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/servers/usable:
        get:
            operationId: getCompatibleServers
            tags:
                - Containers
                - Infrastructure
                - Servers
            summary: List Compatible Servers
            description: |
                Gets a list of servers that are compatible with the specified Container and its restrictions (tags, etc).

                Requires the `containers-view` capability.
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - location
                              - models
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Servers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/compatible-images:
        get:
            operationId: getCompatibleImages
            summary: Get Compatible Images
            description: |
                Returns a list of Images that are compatible with the specified Container.
                Used to quickly find Images that can be used for reimaging the Container.

                Requires the `containers-view` capability.
            tags:
                - Containers
                - Images
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of compatible Images.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups:
        get:
            operationId: getContainerBackups
            summary: List Container Backups
            description: Requires the `containers-backups-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of container backup resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ContainerBackup"
                                    includes:
                                        $ref: "#/components/schemas/ContainerBackupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}:
        get:
            operationId: getContainerBackup
            summary: Get a specific Container Backup
            description: |
                Gets the specified Container Backup.

                Requires the `containers-backups-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID for the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
            responses:
                "200":
                    description: Returns a Container Backup.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ContainerBackup"
                                    includes:
                                        $ref: "#/components/schemas/ContainerBackupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainerBackup
            summary: Delete Container Backup
            description: Requires the `containers-backups-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID of the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}/tasks:
        post:
            tags:
                - Containers
            operationId: createContainerBackupJob
            summary: Create Container Backup Job
            description: |
                Creates a Container Backup Job.
                Can be used to restore a Container Backup for a given Container Instance. 

                Requires the `containers-backups-manage` capability.
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID of the backup.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - restore
                                    description: The action to take.
                                contents:
                                    type: object
                                    description: Additional information the platform needs to create this Job.
                                    required:
                                        - instance_id
                                    properties:
                                        instance_id:
                                            type: string
                                            description: The ID of the instance this Container Backup is being restored to.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}/logs:
        get:
            operationId: getContainerBackupLogs
            summary: List Container Backup Logs
            description: Requires the `containers-backups-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID for the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a collection of Container Backup Logs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ContainerBackupLogs"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/telemetry/instances:
        get:
            operationId: getContainerInstancesTelemetry
            summary: List Telemetry Data
            description: |
                Gets a list of telemetry points describing the number and state of all Instances of this Container at a point in time.

                Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the desired Container
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns a list of telemetry data points.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/InstanceTelemetryPoint"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones:
        get:
            operationId: getDNSZones
            summary: List DNS Zones
            description: Requires the `dns-view` capability.
            tags:
                - DNS
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the DNS Zone's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of DNS Zones.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Zone"
                                    includes:
                                        $ref: "#/components/schemas/ZoneIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createDNSZone
            tags:
                - DNS
            parameters: []
            summary: Create DNS Zone
            description: Requires the `dns-manage` capability.
            requestBody:
                description: Parameters for creating a new DNS Zone.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - hosted
                                - origin
                            properties:
                                hosted:
                                    type: boolean
                                    description: A boolean where true represents the desire for the origin to be of the type `hosted`.
                                origin:
                                    type: string
                                    description: The origin that will be created.
            responses:
                "201":
                    description: Returns the DNS Zone resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}:
        get:
            operationId: getDNSZone
            summary: Get DNS Zone
            description: Requires the `dns-view` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a DNS zone resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateDNSZone
            summary: Update DNS Zone
            description: Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            requestBody:
                description: Parameters for updating a DNS Zone.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - hosted
                            properties:
                                hosted:
                                    type: boolean
                                    description: A boolean where true represents the desire for the origin to be of the type `hosted`.
            responses:
                "200":
                    description: Returns a DNS zone resource.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneUpdateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                                    includes:
                                        $ref: "#/components/schemas/ZoneIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteDNSZone
            summary: Delete DNS Zone
            description: Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/tasks:
        post:
            operationId: createDNSZoneJob
            summary: Create DNS Zone Job
            description: |
                Used to perform different actions on a given DNS zone. 

                Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS zone job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The action that the job will take.
                                    enum:
                                        - verify
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records:
        get:
            operationId: getDNSZoneRecords
            summary: List DNS Zone Records
            description: Requires the `dns-view` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - containers
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the DNS record's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of DNS Zone Records.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneRecordListReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Record"
                                    includes:
                                        $ref: "#/components/schemas/RecordIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createDNSZoneRecord
            summary: Create DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS Zone Record.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                                - name
                            properties:
                                type:
                                    $ref: "#/components/schemas/RecordTypes"
                                name:
                                    type: string
                                    description: A name for the given record where `@` represents the desire to use the root of the origin.
            responses:
                "201":
                    description: Returns the DNS zone resource.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneCreateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Record"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records/{recordId}:
        patch:
            operationId: updateDNSZoneRecord
            summary: Update DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the record.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a DNS Zone Record. The name value cannot be updated and is omitted from the properties.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                            properties:
                                type:
                                    $ref: "#/components/schemas/RecordTypes"
            responses:
                "200":
                    description: Returns a DNS Zone Record.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Record"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteDNSZoneRecord
            summary: Delete DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the DNS Zone Record.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records/{recordId}/tasks:
        post:
            operationId: createDNSZoneRecordJob
            summary: Create a DNS Zone Record Job
            description: |
                Used to perform different actions on a given DNS Zone record. 

                Requires the `dns-manage` capability.
            tags:
                - DNS
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the record.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS Zone Record Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The action that the job will take.
                                    enum:
                                        - generateCert
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/attempts:
        get:
            operationId: getTLSGenerationAttempts
            summary: List TLS Generation Attempts
            description: Requires the `dns-view` capability.
            tags:
                - DNS
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          domain:
                              type: string
                              description: |
                                  `filter[domain]=value` filter the return for TLS attempts by domain.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of TLS certificate generation attempts.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Attempt"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/certificates/lookup:
        get:
            operationId: lookupTLSCertificate
            summary: Lookup TLS Certificate
            description: |
                Lookup and retrieve a TLS certificate bundle for a specified domain.

                Requires the `dns-view` capability.
            tags:
                - DNS
            parameters:
                - name: domain
                  in: query
                  style: form
                  required: true
                  description: The domain to lookup.
                  schema:
                      type: string
                - name: wildcard
                  in: query
                  style: form
                  required: false
                  description: Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For example, if you are looking for a certificate for x.test.com, setting this to true will identify a *.test.com certificate that would also be applicable.
                  schema:
                      type: boolean
            responses:
                "200":
                    description: Returns a TLS certificate bundle.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/DnsTlsCertificate"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs:
        get:
            operationId: getHubs
            summary: List Hubs
            description: Lists all associated Hubs.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search hubs for a value associated with a field on the given Hub(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Hub's current state.
            responses:
                "200":
                    description: Returns a list of Hubs.
                    content:
                        application/json:
                            schema:
                                title: ListHubsResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createHub
            summary: Create Hub
            description: Create a Hub.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters: []
            requestBody:
                description: Parameters for creating a Hub.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Hub.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                webhooks:
                                    $ref: "#/components/schemas/HubWebhooks"
            responses:
                "200":
                    description: Returns a Hub resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current:
        get:
            operationId: getHub
            summary: Get Hub
            description: Requires the `hubs-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - memberships
            responses:
                "200":
                    description: Returns an hub resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateHub
            summary: Update Hub
            description: Updates the specified hub, setting the values of the parameters passed.
            tags:
                - Hubs
            parameters: []
            requestBody:
                description: Parameters for updating a hub.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the hub.
                                webhooks:
                                    $ref: "#/components/schemas/HubWebhooks"
            responses:
                "200":
                    description: Returns the updated Hub resource.
                    content:
                        application/json:
                            schema:
                                title: HubUpdateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteHub
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters: []
            summary: Delete Hub
            description: Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
            responses:
                "202":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/capabilities:
        get:
            operationId: getHubCapabilities
            summary: List Hub Capabilities
            tags:
                - Hubs
            parameters: []
            security: []
            responses:
                "200":
                    description: Returns a list of capabilities.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                    - meta
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Capability"
                                    meta:
                                        type: object
                                        required:
                                            - captions
                                        properties:
                                            captions:
                                                type: object
                                                description: Human-readable captions keyed by the platform level capability it describes.
                                                additionalProperties:
                                                    type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/usage:
        get:
            operationId: getHubUsage
            summary: Get Hub Usage
            description: Requires the `hubs-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/FilterParam"
            responses:
                "200":
                    description: Returns usage detail points of the Hub over a range of time.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubUsageDatum"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/activity:
        get:
            operationId: getHubActivity
            summary: List Hub Activity
            tags:
                - Hubs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - users
                              - components
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search activities for a value associated with a field on the given activity(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the activity's current state.
                          user:
                              type: string
                              description: |
                                  `filter[user]=ID` user filtering by ID. Submit the ID of the user you wish to filter for and the return will be any activity from that user.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` environment filtering by ID. Submit the ID of the environment you wish to filter for and the return will be any activity from that environment.
                          container:
                              type: string
                              description: |
                                  `filter[container]=ID` container filtering by ID. Submit the ID of the container you wish to filter for and the return will be any activity from that container.
                          instance:
                              type: string
                              description: |
                                  `filter[instance]=ID` instance filtering by ID. Submit the ID of the instance you wish to filter for and the return will be any activity from that instance.
                          server:
                              type: string
                              description: |
                                  `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any activity from that server.
                          events:
                              type: string
                              description: |
                                  `filter[events]=value` filter by event names. Example: `filter[events]=environment.services.vpn.login`
                          verbosity:
                              type: integer
                              description: |
                                  `filter[verbosity]=integer` filter the activity return by verbosity. The verbosity can be:
                                    `0` - Activity that users would find useful.
                                    `1` - Activity that can be useful when tracking down how something happened. 
                                    `2` - Full activity, can be useful in debugging problems.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Activity entries.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Activity"
                                    includes:
                                        $ref: "#/components/schemas/ActivityIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/invites/{inviteId}:
        delete:
            operationId: deleteHubInvite
            summary: Delete Hub Invite
            description: Requires the `hub-invites-manage` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: inviteId
                  description: The ID of the Hub Invite.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/invites:
        get:
            operationId: getHubInvites
            summary: List Hub Invites
            description: Requires the `hubs-invites-manage` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
                              - accounts
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createHubInvite
            summary: Create Hub Invite
            description: Requires the `hubs-invites-send` capability.
            tags:
                - Hubs
            parameters: []
            requestBody:
                description: Parameters for creating a Hub invite.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                recipient:
                                    type: string
                                    description: The email address of the invitee.
                                role_id:
                                    description: The account role.
                                    $ref: "#/components/schemas/ID"
                                permissions:
                                    type: object
                                    description: The Environment permissions the invitee will have
                                    required:
                                        - all_environments
                                        - environments
                                    properties:
                                        all_environments:
                                            type: boolean
                                            description: Boolean value that indicates the user has access to all Environments
                                        environments:
                                            type: array
                                            description: A list of objects that describe the specific environments the invitee will have access to
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - manage
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The ID of the Environment
                                                    manage:
                                                        type: boolean
                                                        description: Boolean indicating the invitee has manage rights to Environment
            responses:
                "201":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members:
        get:
            operationId: getHubMembers
            summary: List Hub Members
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
                              - accounts
                              - roles
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/membership:
        get:
            operationId: getHubMembership
            summary: Get Hub Membership
            description: Gets the Hub Membership for the requesting Account.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
                              - accounts
                              - roles
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members/{memberId}:
        get:
            operationId: getHubMember
            summary: Get Hub Member
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID for the given Hub member.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
                              - accounts
                              - roles
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateHubMember
            summary: Update Hub Member
            description: Requires the `hubs-members-manage` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID for the given member.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Hub membership.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                role_id:
                                    description: The account role.
                                    $ref: "#/components/schemas/ID"
                                permissions:
                                    $ref: "#/components/schemas/Permissions"
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteHubMember
            summary: Delete Hub Member
            description: Requires the `hubs-members-manage` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID of the given Hub Member.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members/account/{accountId}:
        get:
            operationId: getHubMemberAccount
            summary: Get Hub Member Account
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hubs
            parameters:
                - name: accountId
                  description: The ID of the member's Account.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
                              - accounts
                              - roles
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/api-keys:
        get:
            operationId: getApiKeys
            summary: List API Keys
            description: Requires the `api-keys-manage` capability.
            tags:
                - Hubs
                - API Keys
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of API Key resources.
                    content:
                        application/json:
                            schema:
                                title: ListApiKeysResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createApiKey
            summary: Create API Key
            description: Requires the `api-keys-manage` capability.
            tags:
                - Hubs
                - API Keys
            parameters: []
            requestBody:
                description: Parameters for creating an API Key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name given to the API Key.
                                permissions:
                                    $ref: "#/components/schemas/Permissions"
                                capabilities:
                                    type: object
                                    description: An object defining the capabilities of the given API key.
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                            description: A boolean where true is giving the key all grantable capabilities.
                                        specific:
                                            type: array
                                            description: An array of capabilites.
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                ips:
                                    type: array
                                    nullable: true
                                    description: An array of approved IPs from which this API Key can be used.
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/api-keys/{apikeyId}:
        get:
            operationId: getAPIKey
            summary: Get API Key
            description: Requries the `api-keys-manage` capability.
            tags:
                - Hubs
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an API Key resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAPIKey
            summary: Update API Key
            description: Requires the `api-keys-manage` capability.
            tags:
                - Hubs
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an API Key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name given to the API Key.
                                permissions:
                                    $ref: "#/components/schemas/Permissions"
                                capabilities:
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                        specific:
                                            type: array
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                ips:
                                    type: array
                                    nullable: true
                                    description: An array of approved IPs from which this API Key can be used.
                                    items:
                                        type: string
            responses:
                "200":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAPIKey
            summary: Delete API Key
            description: Requires the 'api-keys-manage' capability.
            tags:
                - Hubs
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/roles:
        get:
            operationId: getRoles
            summary: List Hub Roles
            description: |
                Lists the Roles that have been created for this Hub.

                Requires the `hubs-roles-manage` capability.
            tags:
                - Hubs
                - ACLs
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Roles.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createRole
            tags:
                - Hubs
                - ACLs
            parameters: []
            summary: Create Hub Role
            description: |
                Creates a custom Role for a Hub.

                Requires the `hubs-roles-manage` capability.
            requestBody:
                description: Parameters for creating a new Hub Role.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - rank
                            properties:
                                name:
                                    nullable: true
                                    type: string
                                    description: A name given to the Role.
                                identifier:
                                    type: string
                                capabilities:
                                    nullable: true
                                    description: The list of platform level capabilities assigned to this Role.
                                    type: object
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                        specific:
                                            type: array
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                rank:
                                    type: integer
                                    description: An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10.
                                extra:
                                    nullable: true
                                    type: object
                                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                                    additionalProperties:
                                        type: string
            responses:
                "201":
                    description: Returns a Hub Role.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/roles/{roleId}:
        get:
            operationId: getRole
            summary: Get Hub Role
            description: |
                Retrieves the specified Role.

                Requries the `hubs-roles-manage` capability.
            tags:
                - Hubs
                - ACLs
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Role.
                    content:
                        application/json:
                            schema:
                                title: GetRoleResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateRole
            summary: Update Hub Role
            description: |
                Updates various properties of a specific Role.

                Requires the `hubs-roles-manage` capability.
            tags:
                - Hubs
                - ACLs
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - rank
                            properties:
                                name:
                                    nullable: true
                                    type: string
                                    description: A name given to the Role.
                                identifier:
                                    type: string
                                capabilities:
                                    nullable: true
                                    description: The list of platform level capabilities assigned to this Role.
                                    type: object
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                            description: If true, the Role has all capabilities.
                                        specific:
                                            type: array
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                rank:
                                    type: integer
                                extra:
                                    nullable: true
                                    type: object
                                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                                    additionalProperties:
                                        type: string
            responses:
                "200":
                    description: Returns the updated Hub Role.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteRole
            summary: Delete Hub Role
            description: |
                Marks a Role as 'deleted'. 

                Requires the 'hubs-roles-manage' capability.
            tags:
                - Hubs
                - ACLs
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/{integrationId}:
        get:
            operationId: getIntegration
            summary: Get Integration
            description: |
                Retrieves details of a single Integration associated with the current hub.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Hubs
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the Integration to retrieve.
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            responses:
                "200":
                    description: Details of the specified Integration
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateIntegration
            tags:
                - Hubs
                - Integrations
            security:
                - bearerAuth: []
            summary: Update Integration
            description: Updates the specified Integration within the current hub. If the Integration definition specifies that it requires verification, then you must submit a verify task to enable it.
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the Integration to update.
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    nullable: true
                                    description: A new name for the Integration.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                auth:
                                    type: object
                                    nullable: true
                                    allOf:
                                        - $ref: "#/components/schemas/IntegrationAuth"
                                extra:
                                    type: object
                                    additionalProperties:
                                        type: string
                                    nullable: true
                                    description: Updated key-value pairs associated with the Integration.
            responses:
                "200":
                    description: Returns the updated Integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteIntegration
            tags:
                - Hubs
                - Integrations
            security:
                - bearerAuth: []
            summary: Delete an Integration
            description: Deletes the specified Integration from the current hub, marking it as deleted and returning the updated Integration.
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the Integration to delete.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations:
        get:
            operationId: getIntegrations
            summary: List Integrations
            description: |
                Lists all integrations associated with the current Hub, with optional filtering.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Hubs
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for. Supports filtering by state and a text search.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value` Filters integrations by their current state. For example, `filter[state]=active` would return only integrations in an active state.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` Performs a text search across relevant fields of the integrations. For example, `filter[search]=example` would return integrations that have "example" in any of the searchable fields
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` Filters integrations by their identifier. For example, `filter[identifier]=abstraction` would return only integrations with the abstraction identifier.
                          category:
                              type: string
                              description: |
                                  `filter[category]=value` Filters integrations by their category. For example, `filter[category]=infrastructure-provider` would return only integrations that are capable of provisioning infrastructure.
            responses:
                "200":
                    description: A list of integrations
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createIntegration
            summary: Create Integration
            description: Create an Integration resource within a hub. If the Integration definition specifies that it requires verification, then you must submit a verify task to enable it.
            tags:
                - Hubs
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            requestBody:
                description: Parameters for creating an Integration.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - vendor
                            properties:
                                name:
                                    type: string
                                    nullable: true
                                    description: A name for the Integration.
                                vendor:
                                    type: string
                                    description: Unique vendor for the Integration, subject to validation.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                auth:
                                    type: object
                                    properties:
                                        region:
                                            type: string
                                            nullable: true
                                            description: The region associated with the Integration.
                                        namespace:
                                            type: string
                                            nullable: true
                                            description: The namespace associated with the Integration.
                                        api_key:
                                            type: string
                                            nullable: true
                                            description: API key for accessing the Integration.
                                        key_id:
                                            type: string
                                            nullable: true
                                            description: Key ID for accessing the Integration.
                                        secret:
                                            type: string
                                            nullable: true
                                            description: Secret for accessing the Integration.
                                        subscription_id:
                                            type: string
                                            nullable: true
                                            description: Subscription ID for the Integration.
                                        client_id:
                                            type: string
                                            nullable: true
                                            description: Client ID for the Integration.
                                        base64_config:
                                            type: string
                                            nullable: true
                                            description: Base64 encoded configuration for the Integration.
                                    description: Authentication information for the Integration.
                                extra:
                                    type: object
                                    additionalProperties:
                                        type: string
                                    description: Additional key-value pairs associated with the Integration.
            responses:
                "201":
                    description: Returns the new Integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/available:
        get:
            operationId: getAvailableIntegrations
            summary: Get Available Integrations
            description: Returns a map of available integrations categorized by their type.
            tags:
                - Hubs
                - Integrations
            responses:
                "200":
                    description: A map of categories to lists of integration definitions.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            image-builders:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                                nullable: true
                                            object-storage:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                                nullable: true
                                            tls-certificate-generation:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                                nullable: true
                                            infrastructure-provider:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                                nullable: true
                                            billing:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                                nullable: true
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/{integrationId}/tasks:
        post:
            operationId: createIntegrationJob
            description: |
                Creates a new Job targeted at the provided Hub Integration. 

                ## Required Permissions
                  - Requires a valid hub membership to the target hub.
                  - Requires the `hubs-integrations-manage` capability.
            tags:
                - Hubs
                - Integrations
            parameters:
                - name: integrationId
                  description: The ID of the Hub Integration.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Create a new Hub Integration Job.
            requestBody:
                description: Parameters for creating a new Hub Integration Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The type of Job/selected Job action to create.
                                    enum:
                                        - verify
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/search/index:
        get:
            operationId: getSearchIndex
            summary: Get Search Index
            description: |
                Gets a pre-built search index, containing IDs and basic information for many commonly used resources on the Hub.
                Can be used to build a 'quick search' functionality for referencing the most frequently used resources.

                Requires the `view` capability for each returned segment, i.e. to retrieve Containers, you must have `containers-view`.
            tags:
                - Search
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Returns an indexed search matrix.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Index"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images:
        get:
            operationId: getImages
            summary: List Images
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stack_builds
                              - stacks
                              - sources
                              - integrations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those images matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Image(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Image's current state.
                          source_type:
                              type: string
                              description: |
                                  `filter[source_type]=value` filter images by the Image source's type.  Can be: `direct` or `stack_build`
                          source_id:
                              type: string
                              description: |
                                  `filter[source_id]=ID` Image filtering by source ID.  Submit the ID of the Image source you wish to filter for and the return will be any Images created from that source.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Images.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Image"
                                    includes:
                                        $ref: "#/components/schemas/ImageIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createImage
            summary: Create Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters: []
            requestBody:
                description: Parameters for creating a new Image.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - source_id
                            properties:
                                name:
                                    type: string
                                    description: A name for the Image.
                                source_id:
                                    type: string
                                    description: The ID for the Image source to be used.
                                build:
                                    type: object
                                    description: A build object, holding information important to the Image build.
                                    properties:
                                        args:
                                            type: object
                                            description: An object holding key value build time arguments needed for the Image during build time.
                                            additionalProperties:
                                                type: string
                                override:
                                    type: object
                                    description: An override object to be used for a single Image create request.
                                    properties:
                                        target:
                                            type: string
                                            description: For Image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an Image and a tag.
                                        targz_url:
                                            type: string
                                            description: For Image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
            responses:
                "201":
                    description: Returns an Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}:
        get:
            operationId: getImage
            summary: Get Image
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stack_builds
                              - stacks
                              - sources
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                                    includes:
                                        $ref: "#/components/schemas/ImageIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateImage
            summary: Update Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new image.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the image.
            responses:
                "200":
                    description: Returns an Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteImage
            summary: Delete Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}/build-log:
        get:
            operationId: getImageBuildLog
            summary: Get Image Build Log
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the Image.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an Image's build log.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/BuildLog"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/tasks:
        post:
            operationId: createImagesJob
            summary: Images Prune
            description: |
                Used to perform different actions on a given image. 

                Requires the `images-manage` capability.
            tags:
                - Images
            parameters: []
            requestBody:
                description: Parameters for creating a new Images Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    description: The action is the Job type to create.
                                    enum:
                                        - prune
                                contents:
                                    type: object
                                    description: Additional contents needed by the platform to create the Job.
                                    required:
                                        - source_ids
                                    properties:
                                        source_ids:
                                            description: A list of IDs to be pruned.
                                            type: array
                                            items:
                                                type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}/tasks:
        post:
            operationId: createImageJob
            summary: Image Jobs
            description: |
                Used to perform different actions on a given Image. 

                Requires the `images-import` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  description: The ID of the requested Image.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Image job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - import
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/sources:
        get:
            operationId: getImageSources
            summary: List Image Sources
            description: Requires the `images-sources-view` capability.
            tags:
                - Image Sources
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - images_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - integrations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those image sources matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Image Source(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Image Source's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Image Sources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ImageSource"
                                    includes:
                                        $ref: "#/components/schemas/SourceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createImageSource
            summary: Create Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters: []
            requestBody:
                description: Parameters for creating an Image Source.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                                - origin
                            properties:
                                name:
                                    type: string
                                    description: A name for the Image Source.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                builder:
                                    type: object
                                    nullable: true
                                    required:
                                        - integration_id
                                    properties:
                                        integration_id:
                                            $ref: "#/components/schemas/HybridIdentifier"
                                type:
                                    $ref: "#/components/schemas/ImageSourceType"
                                origin:
                                    $ref: "#/components/schemas/ImageOrigin"
                                about:
                                    type: object
                                    description: User defined information about the Image Source.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type: string
                                            nullable: true
                                            description: A description of the Image Source.
            responses:
                "201":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/sources/{sourceId}:
        get:
            operationId: getImageSource
            summary: Get Image Source
            description: Requires the `images-sources-view` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - images_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - integrations
            responses:
                "200":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                                    includes:
                                        $ref: "#/components/schemas/SourceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateImageSource
            summary: Update Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an image source.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the image source.
                                origin:
                                    $ref: "#/components/schemas/ImageOrigin"
                                builder:
                                    type: object
                                    nullable: true
                                    properties:
                                        integration_id:
                                            nullable: true
                                            $ref: "#/components/schemas/HybridIdentifier"
                                about:
                                    type: object
                                    description: User defined information about the image source.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type: string
                                            nullable: true
                                            description: A description of the image source.
            responses:
                "200":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteImageSource
            summary: Delete Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/summary:
        get:
            operationId: getInfrastructureSummary
            summary: Get Infrastructure Summary
            description: Requires the `infrastructure-servers-view` capability.
            tags:
                - Infrastructure
            parameters:
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=value` return an infrastructure summary only for the specified cluster.
            responses:
                "200":
                    description: Returns an infrastructure summary.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/InfrastructureSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/providers/{providerVendor}/servers:
        get:
            operationId: getProviderServers
            summary: List Provider Servers
            tags:
                - Infrastructure
            parameters:
                - name: providerVendor
                  description: The vendor for the given provider. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use a Provider Integration ID.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          location_ids:
                              type: string
                              description: |
                                  `filter[location_ids]=value` List only those provider servers matching this location. May return multiple results.
            responses:
                "200":
                    description: A list of currently provisioned servers associated with a Provider Integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ProviderServerModel"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/providers/{providerVendor}/locations:
        get:
            operationId: getProviderLocations
            summary: List Provider Locations
            tags:
                - Infrastructure
            parameters:
                - name: providerVendor
                  description: The vendor for the given Provider Integration. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use the Integration ID.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: A list of locations this Provider Integration supports.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ProviderLocation"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/auto-scale/groups:
        get:
            operationId: getAutoScaleGroups
            summary: List Auto-Scale Groups
            description: Requires the `autoscale-groups-manage` capability.
            tags:
                - Infrastructure
                - Auto-Scale
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                              - models
                              - locations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given auto-scale group(s).
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=value` return a list of auto-scale groups that are associated with the specified cluster.
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` list only those auto-scale groups matching this identifier. May return multiple results.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
            responses:
                "200":
                    description: Returns a list of Auto-Scale Groups.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/AutoScaleGroup"
                                    includes:
                                        $ref: "#/components/schemas/AutoScaleGroupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createAutoScaleGroup
            summary: Create Auto-Scale Group
            description: Requires the 'autoscale-groups-manage'
            tags:
                - Infrastructure
                - Auto-Scale
            parameters: []
            requestBody:
                description: Parameters for creating an Auto-Scale Group
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - cluster
                                - scale
                                - infrastructure
                            properties:
                                name:
                                    type: string
                                identifier:
                                    type: string
                                cluster:
                                    type: string
                                scale:
                                    $ref: "#/components/schemas/AutoScaleGroupScale"
                                infrastructure:
                                    $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
            responses:
                "201":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                title: CreateAutoScaleGroupResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/auto-scale/groups/{groupId}:
        get:
            operationId: getAutoScaleGroup
            summary: Get Auto-Scale Group
            description: Requires the `autoscale-groups-view` capability.
            tags:
                - Infrastructure
                - Auto-Scale
            parameters:
                - name: groupId
                  description: The ID for the given Auto-Scale Group.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                              - models
                              - locations
            responses:
                "200":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                                    includes:
                                        $ref: "#/components/schemas/AutoScaleGroupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAutoScaleGroup
            summary: Update Auto-Scale Group
            description: Requires the `autoscale-groups-manage` capability.
            tags:
                - Infrastructure
                - Auto-Scale
            parameters:
                - name: groupId
                  description: The ID for the given Auto-Scale Group.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating an Auto-Scale Group
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - cluster
                                - scale
                                - infrastructure
                            properties:
                                name:
                                    type: string
                                identifier:
                                    type: string
                                cluster:
                                    type: string
                                scale:
                                    $ref: "#/components/schemas/AutoScaleGroupScale"
                                infrastructure:
                                    $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
            responses:
                "200":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAutoScaleGroup
            summary: Delete Auto-Scale Group
            description: Requires the `autoscale-group-manage` capability.
            tags:
                - Infrastructure
                - Auto-Scale
            parameters:
                - name: groupId
                  description: The ID for the given autoscale group.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers:
        get:
            operationId: getServers
            summary: List Servers
            description: Requires the `servers-view` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - locations
                              - models
                              - integrations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
                          tags:
                              type: string
                              description: |
                                  `filter[tags]=tagone,tagtwo,tagthree` filtering by Server tag.  Enter one or more tags (comma separated) and the return will include servers that match any tags in the list.
                          clusters:
                              type: string
                              description: |
                                  `filter[clusters]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include servers that match any clusters in the list.
                          providers:
                              type: string
                              description: |
                                  `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers (commas separated) and the return will include servers that match any providers in the list.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Servers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createServer
            summary: Create Server
            description: Requires the `servers-provision` capability.
            tags:
                - Infrastructure
                - Servers
            parameters: []
            requestBody:
                description: Parameters for creating a Server.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - servers
                                - cluster
                            properties:
                                cluster:
                                    type: string
                                    description: The existing or new cluster this infrastructure should be provisioned in.
                                servers:
                                    description: An array of servers to provision.
                                    type: array
                                    items:
                                        type: object
                                        required:
                                            - integration_id
                                            - model_id
                                            - location_id
                                            - quantity
                                        properties:
                                            integration_id:
                                                $ref: "#/components/schemas/ID"
                                                description: The ID of the provider integration to use for this Server.
                                            model_id:
                                                type: string
                                                description: The model ID of the Server.
                                            location_id:
                                                type: string
                                                description: The location ID of the Server.
                                            quantity:
                                                type: integer
                                                description: The number of this Server at this location to deploy.
                                            hostnames:
                                                description: An array of hostnames for the given servers.
                                                type: array
                                                items:
                                                    type: string
                                            advanced:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        provision_options:
                                                            type: object
                                                            properties:
                                                                attached_storage_size:
                                                                    type: number
                                                                reservation_id:
                                                                    type: string
                                                        zone:
                                                            type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}:
        get:
            operationId: getServer
            summary: Get Server
            description: Requires the `servers-view` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - locations
                              - models
                              - integrations
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
            responses:
                "200":
                    description: Returns a Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateServer
            summary: Update Server
            description: Requires the `servers-manage` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Server.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - constraints
                            properties:
                                constraints:
                                    type: object
                                    description: Server constriants.
                                    properties:
                                        tags:
                                            description: A list of Server tags.
                                            type: array
                                            items:
                                                type: string
                                        allow:
                                            type: object
                                            description: Server constraints for the given Server.
                                            required:
                                                - pool
                                                - services
                                                - overcommit
                                            properties:
                                                pool:
                                                    type: boolean
                                                    description: A boolean where true represents the Server can accept containers with no tags set.
                                                services:
                                                    type: boolean
                                                    description: A boolean where true represents the Server being a target for service containers.
                                                overcommit:
                                                    type: boolean
                                                    description: A boolean where true represents the desire for the Server to allow the overcommitting of shares.
            responses:
                "200":
                    description: Returns a Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteServer
            summary: Delete Server
            description: Requires the `servers-manage` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID of the Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/OptionParam"
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/telemetry:
        get:
            operationId: getServerTelemetry
            summary: Get Server Telemetry
            description: |
                This call requires the filter query parameter to be used.

                Requires the `servers-view` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull Server telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull Server telemetry data
                              $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of telemetry points.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ServerStatsTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/instances:
        get:
            operationId: getServerInstances
            summary: List Server Instances
            description: Requires the `containers-view` capability.
            tags:
                - Infrastructure
                - Instances
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given server.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creator
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
            responses:
                "200":
                    description: Returns a list of Instances present on this Server.
                    content:
                        application/json:
                            schema:
                                title: GetServerInstancesReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/tasks:
        post:
            operationId: createServerJob
            summary: Create Server Job
            description: Used to perform different actions on a given Server. Requires the `servers-manage` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating the new Server Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    sharedfs.reconfigure: "#/components/schemas/ReconfigureSharedFs"
                                    features.reconfigure: "#/components/schemas/ReconfigureServer"
                                    restart: "#/components/schemas/RestartServer"
                                    compute.restart: "#/components/schemas/RestartCompute"
                                    compute.spawner.restart: "#/components/schemas/RestartComputeSpawner"
                            oneOf:
                                - $ref: "#/components/schemas/ReconfigureSharedFs"
                                - $ref: "#/components/schemas/ReconfigureServer"
                                - $ref: "#/components/schemas/RestartServer"
                                - $ref: "#/components/schemas/RestartCompute"
                                - $ref: "#/components/schemas/RestartComputeSpawner"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/tags:
        get:
            operationId: getServerTags
            summary: List Server Tags
            description: Requires the `servers-view` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include tags from servers that match any cluster(s) in the list.
            responses:
                "200":
                    description: Returns a list of Server Tags.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServerTags"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/clusters:
        get:
            operationId: GetClusters
            summary: List Clusters
            description: Requires the `servers-view` capability.
            tags:
                - Infrastructure
            responses:
                "200":
                    description: Returns a list of Clusters on this Hub.
                    content:
                        application/json:
                            schema:
                                title: ServerClustersReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/usage:
        get:
            operationId: GetServerUsage
            summary: Get Server Usage
            description: Requires the `servers-view` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given server.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns usage data for the Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/UsageDatum"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/console:
        get:
            operationId: GetServerConsole
            summary: Get Server Console
            description: |
                Gets the authorization information required to connect to a Server console websocket.

                Requires the `servers-console` capability.
            tags:
                - Infrastructure
                - Servers
            parameters:
                - name: serverId
                  description: The ID of the server to connect to.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns console credentials for the Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - address
                                            - token
                                        properties:
                                            address:
                                                type: string
                                                description: The websocket target URL.
                                            token:
                                                type: string
                                                description: The authentication token for the console socket. It should be appended as the URL parameter "token" to the address.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools:
        get:
            operationId: getInfrastructureIPPools
            summary: List IP Pools
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - Infrastructure
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - servers
                              - integrations
                              - locations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          available:
                              type: string
                              description: |
                                  `filter[available]=true` filter for IPs that are available for use.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the IP's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: A list of IP Pools.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Pool"
                                    includes:
                                        $ref: "#/components/schemas/PoolIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools/{poolId}:
        get:
            operationId: getIPPool
            summary: Get IP Pool
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - Infrastructure
            parameters:
                - name: poolId
                  description: The ID for the given pool.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - servers
                              - integrations
                              - locations
            responses:
                "200":
                    description: An IP Pool.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pool"
                                    includes:
                                        $ref: "#/components/schemas/PoolIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteIPPool
            summary: Delete IP Pool
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - Infrastructure
            parameters:
                - name: poolId
                  description: The ID for the given IP Pool.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools/{poolId}/ips:
        get:
            operationId: getPoolIPs
            summary: List Pool IPs
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - Infrastructure
            parameters:
                - name: poolId
                  description: The ID of the IP Pool to fetch the IPs of.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A list of IPs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Ip"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/deployment-strategies:
        get:
            operationId: getDeploymentStrategies
            summary: Get Deployment Strategies
            description: Gets the available deployment strategies that can be used to orchestrate containers.
            tags:
                - Infrastructure
            parameters: []
            responses:
                "200":
                    description: Returns available deployment strategies.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            resource-density:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            high-availability:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            first-available:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            node:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            edge:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            manual:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            function:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs:
        get:
            operationId: getJobs
            summary: List Jobs
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search jobs for a value associated with a field on the given job(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                                    includes:
                                        $ref: "#/components/schemas/JobIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/{jobId}:
        get:
            operationId: getJob
            summary: Get Job
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: jobId
                  description: The ID for the given Job.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A Job resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/latest:
        get:
            operationId: getLatestJobs
            tags:
                - Jobs
            parameters: []
            summary: List Latest Jobs
            description: Requires the `apionly-jobs-view` permission.
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks:
        get:
            operationId: getStacks
            summary: List Stacks
            description: Requires the `stacks-view` permission.
            tags:
                - Stacks
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                              - builds_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those stacks matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Stack(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Stack's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Stacks.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Stack"
                                    includes:
                                        $ref: "#/components/schemas/StackInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createStack
            tags:
                - Stacks
            parameters: []
            summary: Create Stack
            description: Requires the `stacks-manage` capability.
            requestBody:
                description: Parameters for creating a new Stack.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - source
                            properties:
                                name:
                                    type: string
                                    description: A name for the Stack.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                variables:
                                    type: object
                                    description: A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map.
                                    additionalProperties:
                                        type: string
                                source:
                                    $ref: "#/components/schemas/StackSource"
            responses:
                "201":
                    description: Returns a Stack.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}:
        get:
            operationId: getStack
            summary: Get Stack
            description: Requires the `stacks-view` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateStack
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            summary: Update Stack
            description: Requires the `stacks-manage` capability.
            requestBody:
                description: Parameters for updating a Stack.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Stack.
                                variables:
                                    type: object
                                    description: A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map.
                                    additionalProperties:
                                        type: string
                                source:
                                    $ref: "#/components/schemas/StackSource"
            responses:
                "200":
                    description: Returns the updated Stack.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteStack
            summary: Delete Stack
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/tasks:
        post:
            operationId: createStackJob
            summary: Create Stack Job
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Job.
                content:
                    application/json:
                        schema:
                            title: PruneStackBuilds
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The Job to do.
                                    enum:
                                        - prune
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/builds/{buildId}:
        get:
            operationId: lookupStackBuild
            summary: Look Up Stack Build
            description: |
                Look up a Stack Build using only the Build ID, instead of requiring a Stack ID as well.

                Requires the `stacks-view` capability.
            tags:
                - Stacks
            parameters:
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds:
        get:
            operationId: getStackBuilds
            summary: List Builds
            description: Requires the `stacks-view` capability.
            tags:
                - Stacks
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Stack Build(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Stack Build's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Stack Builds.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createStackBuild
            summary: Create Build
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Build.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                about:
                                    $ref: "#/components/schemas/StackBuildAbout"
                                instructions:
                                    $ref: "#/components/schemas/StackBuildInstructions"
            responses:
                "201":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds/{buildId}:
        get:
            operationId: getStackBuild
            summary: Get Stack Build
            description: Requires the `stacks-view` capability.
            tags:
                - Stacks
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteStackBuild
            summary: Delete Stack Build
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds/{buildId}/tasks:
        post:
            operationId: createStackBuildJob
            summary: Create Stack Build Job
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Build Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    generate: "#/components/schemas/GenerateStackBuildAction"
                                    deploy: "#/components/schemas/DeployStackBuildAction"
                            oneOf:
                                - $ref: "#/components/schemas/GenerateStackBuildAction"
                                - $ref: "#/components/schemas/DeployStackBuildAction"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks:
        get:
            operationId: getNetworks
            summary: List Networks
            description: Requires the `sdn-networks-view` capability.
            tags:
                - SDN
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Network(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Network's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Networks.
                    content:
                        application/json:
                            schema:
                                title: ListNetworksResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createNetwork
            summary: Create Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - SDN
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for creating a new Network.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - cluster
                                - environments
                            properties:
                                name:
                                    type: string
                                    description: The name of the Network.
                                identifier:
                                    type: string
                                    description: A Network identifier used to construct http calls that specifically use this Network over another.
                                cluster:
                                    type: string
                                    description: The infrastructure Cluster the Environments belonging to this Network belong to.
                                environments:
                                    description: An array of Environment Ids
                                    type: array
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns a Network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks/{networkId}:
        get:
            operationId: getNetwork
            summary: Get Network
            description: Requires the `sdn-networks-view` capability.
            tags:
                - SDN
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            responses:
                "200":
                    description: Returns a Network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateNetwork
            summary: Update Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - SDN
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for updating a Network.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name of the Network.
            responses:
                "200":
                    description: Returns a Network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteNetwork
            summary: Delete Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - SDN
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks/{networkId}/tasks:
        post:
            operationId: createNetworkJob
            summary: Create Network Job
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - SDN
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Network Job.
                content:
                    application/json:
                        schema:
                            title: ReconfigureSDNNetwork
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    description: The Job to do.
                                    enum:
                                        - reconfigure
                                contents:
                                    type: object
                                    description: Additional information needed for the Job.
                                    required:
                                        - environment_ids
                                    properties:
                                        environment_ids:
                                            description: An array of environment identifiers for the Network.
                                            type: array
                                            items:
                                                type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines:
        get:
            operationId: getPipelines
            summary: List Pipelines
            description: Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - name
                              - components
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those pipelines matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given pipelines(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Pipeline's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Pipelines.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Pipeline"
                                    includes:
                                        $ref: "#/components/schemas/PipelineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createPipeline
            summary: Create Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters: []
            requestBody:
                description: Parameters for creating a new Pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                            properties:
                                name:
                                    type: string
                                    description: A name for the Pipeline.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                dynamic:
                                    type: boolean
                                    description: Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                                stages:
                                    description: An array of stages.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/PipelineStage"
                                disable:
                                    type: boolean
                                    description: A boolean where true signifies the Pipeline is disabled.
            responses:
                "201":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}:
        get:
            operationId: getPipeline
            summary: Get Pipeline
            description: Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - name
                              - components
            responses:
                "200":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                                    includes:
                                        $ref: "#/components/schemas/PipelineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updatePipeline
            summary: Update Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Pipeline.
                                dynamic:
                                    type: boolean
                                    description: Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                                stages:
                                    description: An array of stages.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/PipelineStage"
                                disable:
                                    type: boolean
                                    description: A boolean where true signifies the Pipeline is disabled.
            responses:
                "200":
                    description: Returns a Pipeline resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deletePipeline
            summary: Delete Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/runs:
        get:
            operationId: getPipelineRuns
            summary: List Pipeline Runs
            description: |
                List information about times this Pipeline has run.

                Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the pipeline.
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            responses:
                "200":
                    description: Returns a list of Pipeline runs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/PipelineRun"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/tasks:
        post:
            operationId: createPipelineJob
            summary: Create Pipeline Job
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Pipeline job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The requested action to perform.
                                    enum:
                                        - trigger
                                contents:
                                    type: object
                                    properties:
                                        variables:
                                            type: object
                                            description: A map of variables to pass into the Pipeline when it runs.
                                            additionalProperties:
                                                type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/keys:
        get:
            operationId: getPipelineTriggerKeys
            summary: List Trigger Keys
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Trigger Key(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Trigger Key's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Trigger Keys.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createPipelineTriggerKey
            summary: Create Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Pipeline Trigger Key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Trigger Key.
                                ips:
                                    description: An array of ips this Trigger Key is usable from.
                                    type: array
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns a Trigger Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/keys/{triggerKeyId}:
        get:
            operationId: getPipelineTriggerKey
            summary: Get Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Trigger Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updatePipelineTriggerKey
            summary: Update Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: Set name of Trigger Key
                                ips:
                                    description: List of IP Restrictions
                                    type: array
                                    items:
                                        type: string
                                        description: Restricted IP String
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deletePipelineTriggerKey
            summary: Delete Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/notifications:
        get:
            operationId: getHubNotificationSocketAuth
            summary: Hub Notification Pipeline Auth
            description: |
                Initializes authorization for the Hub notification pipeline. The Hub notification pipeline is a one-way streaming websocket that
                sends real-time 'notifications' as things are happening on the Hub. These notifications tell some basic information about an event,
                and it is up to the user to fetch additional details, if deemed necessary.

                Requesting this endpoint without a `?token=<token>` URL parameter will result in receiving a short lived token in the response body. That 
                token can then be applied to the URL parameter to the same endpoint to upgrade the connection to a WebSocket.

                Requires the `apionly-notifications-listen` capability.
            tags:
                - Hubs
                - Notifications
            parameters: []
            responses:
                "101":
                    description: WebSocket protocol upgrade response, connection is upgraded to WebSocket.
                    headers:
                        Connection:
                            description: Should be 'upgrade'.
                            schema:
                                type: string
                        Upgrade:
                            description: Specifies the protocol to which the connection is upgraded.
                            schema:
                                type: string
                                enum:
                                    - websocket
                        Sec-WebSocket-Accept:
                            description: Accept key for the WebSocket protocol handshake.
                            schema:
                                type: string
                    x-websocket:
                        description: Indicates that this operation is expected to initiate a WebSocket connection.
                        url: ws://example.com/ws
                "200":
                    description: Returns the credentials necessary for upgrading this connection into a web socket.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        title: HubNotificationPipelineAuthResponse
                                        type: object
                                        required:
                                            - token
                                        properties:
                                            token:
                                                type: string
                                                description: A token used for connecting to the Hub notification pipeline websocket API.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/console:
        get:
            operationId: getInstanceConsoleStreamAuth
            summary: Instance Console Stream Authorization
            description: |
                Returns the authorization information necessary to connect to a Container Instance's console.
                To connect via WebSocket, use the returned address, and append the returned token as a URL parameter: `<address>?token=<token>`.

                Requires the `containers-console` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  in: path
                  required: true
                  description: The ID for the Container
                  schema:
                      type: string
                - name: instanceId
                  in: path
                  required: true
                  description: The ID of the Instance.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns authorization information necessary for accessing a Container Instance's console.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        title: InstanceConsoleAuth
                                        type: object
                                        required:
                                            - token
                                            - address
                                        properties:
                                            token:
                                                type: string
                                                description: A token used for connecting to the Instance console.
                                            address:
                                                type: string
                                                description: The protocol and url for connecting to the Instance console.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/security/report:
        get:
            operationId: getSecurityReport
            summary: Get Security Report
            description: Returns a report detailing incidents logged by the platform around security related events.
            tags:
                - Security
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull the security report
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the security report
                              $ref: "#/components/schemas/DateTime"
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=<Environment ID>` fetch the security report for the specified environment
                          event:
                              type: string
                              description: |
                                  `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.login`
            responses:
                "200":
                    description: Returns the security report.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/SecurityReport"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/utils/resource/lookup:
        get:
            operationId: lookupIdentifier
            summary: Look up a resource identifier.
            description: |
                Given a (base64'd) resource identifier string (i.e. `cluster:production/env:abc`), returns the ID of the matching resource.
                If more than one resource matches the identifier, or no resource matches the identifier, this endpoint will return an error. 
                Given identifiers are NOT unique, you may need to be more specific to target the exact identifier.
            tags:
                - Utility
            parameters:
                - name: identifier
                  in: query
                  required: true
                  example: cltr:production/environment:654d4e848924c1c445c3635a/container:api
                  description: A base64 encoded resource identifier string.
                  schema:
                      type: string
                - name: desired-component
                  in: query
                  required: true
                  description: The type of resource to lookup from the identifier string.
                  schema:
                      type: string
                      enum:
                          - cluster
                          - environment
                          - image-source
                          - stack
                          - server
                          - container
            responses:
                "200":
                    description: Returns the ID of the requested resource from the identifier string.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - id
                                        properties:
                                            id:
                                                type: string
                default:
                    $ref: "#/components/responses/DefaultError"
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
        hubAuth:
            name: X-Hub-Id
            in: header
            type: apiKey
            description: Defines the scope of the request to a specific Hub.
    schemas:
        Capability:
            type: string
            description: A capability that a user or API key that represents what an API key or a user can do.
            enum:
                - api-keys-manage
                - apionly-jobs-view
                - apionly-notifications-listen
                - autoscale-groups-manage
                - autoscale-groups-view
                - billing-credits-view
                - billing-invoices-pay
                - billing-invoices-view
                - billing-methods-manage
                - billing-services-manage
                - billing-services-view
                - containers-backups-manage
                - containers-backups-view
                - containers-console
                - containers-deploy
                - containers-instances-migrate
                - containers-lock
                - containers-ssh
                - containers-manage
                - containers-view
                - containers-volumes-manage
                - containers-volumes-view
                - dns-certs-view
                - dns-manage
                - dns-view
                - environments-deployments-manage
                - environments-manage
                - environments-scopedvariables-manage
                - environments-scopedvariables-view
                - environments-services-manage
                - environments-view
                - environments-vpn
                - environments-vpn-manage
                - hubs-delete
                - hubs-integrations-manage
                - hubs-integrations-view
                - hubs-invites-manage
                - hubs-invites-send
                - hubs-members-manage
                - hubs-members-view
                - hubs-roles-manage
                - hubs-roles-view
                - hubs-usage-view
                - hubs-update
                - hubs-auditlog-view
                - images-manage
                - images-sources-manage
                - images-sources-view
                - images-view
                - ips-manage
                - servers-console
                - servers-decommission
                - servers-login
                - servers-provision
                - servers-manage
                - servers-view
                - monitor-manage
                - monitor-view
                - pipelines-manage
                - pipelines-trigger
                - pipelines-view
                - sdn-networks-manage
                - sdn-networks-view
                - security-manage
                - security-view
                - stacks-builds-deploy
                - stacks-builds-manage
                - stacks-manage
                - stacks-view
        Error:
            title: Error
            description: |-
                The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
                There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
            type: object
            required:
                - status, code, title
            properties:
                status:
                    type: integer
                    description: The HTTP response code.
                    enum:
                        - 400
                        - 401
                        - 403
                        - 404
                        - 409
                        - 415
                        - 422
                        - 500
                code:
                    type: string
                    description: A Cycle standard error code.
                    enum:
                        - 400.invalid_syntax
                        - 401.auth_invalid
                        - 401.auth_expired
                        - 401.no_cookie
                        - 401.unauthorized_application
                        - 403.mismatch
                        - 403.wrong_hub
                        - 403.not_ready
                        - 403.expired
                        - 403.restricted_portal
                        - 403.permissions
                        - 403.wrong_scope
                        - 403.invalid_ip
                        - 403.invalid_state
                        - 403.not_approved
                        - 403.not_allowed
                        - 403.platform_disabled
                        - 403.2fa_required
                        - 403.2fa_failed
                        - 403.new_application_capabilities
                        - 403.tier_restricted
                        - 404.hub
                        - 404.hub.invitation
                        - 404.sdn_network
                        - 404.environment
                        - 404.environment.scoped-variable
                        - 404.hub.api_key
                        - 404.hub.provider
                        - 404.hub.integration
                        - 404.uri
                        - 404.provider
                        - 404.stack
                        - 404.survey
                        - 404.survey_response
                        - 404.notification
                        - 404.stack_build
                        - 404.image
                        - 404.image.source
                        - 404.image.build_log
                        - 404.job
                        - 404.billing.order
                        - 404.billing.service
                        - 404.billing.credit
                        - 404.billing.invoice
                        - 404.billing.tier
                        - 404.billing.support
                        - 404.billing.payment_method
                        - 404.billing.promo_code
                        - 404.node
                        - 404.infrastructure.location
                        - 404.infrastructure.ips.pool
                        - 404.infrastructure.provider
                        - 404.infrastructure.server
                        - 404.infrastructure.model
                        - 404.account
                        - 404.container
                        - 404.container.backup
                        - 404.vpn_account
                        - 404.instance
                        - 404.pipeline
                        - 404.pipeline.run
                        - 404.pipeline.key
                        - 404.dns.zone
                        - 404.dns.record
                        - 404.cluster
                        - 404.platform_build
                        - 404.cycleos_build
                        - 404.email_verification
                        - 404.hub.membership
                        - 404.announcement
                        - 404.ha_service_session
                        - 404.sales_lead
                        - 409.duplicate_found
                        - 415.invalid_content_type
                        - 422.missing_argument
                        - 422.invalid_argument
                        - 422.invalid_input
                        - 422.max_exceeded
                        - 422.not_compatible
                        - 422.already_exists
                        - 429.rate_limiting
                        - 500.database
                        - 500.database_insert
                        - 500.database_update
                        - 500.database_remove
                        - 500.jobd
                        - 500.unknown
                        - 500.dev
                        - 500.email
                        - 500.payment_gateway
                        - 503.not_ready
                        - 503.not_enabled
                        - 503.dependency_not_enabled
                title:
                    type: string
                    description: The main text describing the error.
                detail:
                    type: string
                    description: A more detailed description of the error.
                source:
                    type: string
                    description: A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
                extra:
                    type: object
                    description: Additional entries on the error object to provide extra details.
                    properties:
                        capability:
                            description: If the error occured because of a lack of permission (403), this will list the specific capability that the Role/API Key is missing.
                            $ref: "#/components/schemas/Capability"
        ErrorEnvelope:
            title: ErrorEnvelope
            type: object
            description: An error response.
            required:
                - error
                - data
            properties:
                error:
                    $ref: "#/components/schemas/Error"
        ID:
            title: ID
            type: string
            format: objectid
            description: A 24 character hex string used to identify a unique resource.
            example: 651586fca6078e98982dbd90
        DateTime:
            title: DateTime
            type: string
            format: date-time
            example: "2021-01-30T08:30:00Z"
        State:
            title: State
            description: Information regarding the current state of the resource.
            type: object
            required:
                - changed
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type: object
                    description: An error, if any, that has occurred for this resource.
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
                        time:
                            description: The timestamp of when the error was encountered.
                            $ref: "#/components/schemas/DateTime"
        AccountState:
            title: AccountState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the account.
                          type: string
                          enum:
                              - new
                              - live
                              - suspending
                              - purging
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Account:
            title: Account
            type: object
            description: An object representing information about the currently logged-in user.
            required:
                - id
                - name
                - email
                - allow_support_logins
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: object
                    description: The first and last name associated with the Account.
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the Account owner.
                        last:
                            type: string
                            description: The last name of the Account owner.
                email:
                    type: object
                    description: Information about the email address associated with the Account.
                    required:
                        - address
                        - verified
                        - added
                    properties:
                        address:
                            type: string
                            description: The email address.
                        verified:
                            type: boolean
                            description: If true, the email has been verified and the Account is active.
                        added:
                            description: The date the email was added to the Account
                            $ref: "#/components/schemas/DateTime"
                two_factor_auth:
                    type: object
                    nullable: true
                    description: Two factor auth verification information.
                    required:
                        - verified
                    properties:
                        verified:
                            type: boolean
                            description: A boolean representing if the Account has verified with two-factor authentication.
                allow_support_login:
                    description: Indicates whether or not Cycle employees have authorization to log in to this Account in a support capacity.
                    type: boolean
                state:
                    $ref: "#/components/schemas/AccountState"
                events:
                    title: AccountEvents
                    type: object
                    description: A collection of timestamps for each event in the Account's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the Account was last accessed.
                            $ref: "#/components/schemas/DateTime"
        TaskStep:
            title: TaskStep
            type: object
            description: A step for a given job task.
            required:
                - caption
                - description
                - started
                - completed
            properties:
                caption:
                    type: string
                    description: A short description of the step.
                description:
                    type: string
                    description: A more verbose description.
                started:
                    description: A timestamp for when the step started.
                    $ref: "#/components/schemas/DateTime"
                completed:
                    description: A timestamp for when the step completed.
                    $ref: "#/components/schemas/DateTime"
        JobDescriptor:
            title: JobDescriptor
            description: A Job Descriptor is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action that was taken.
                job:
                    type: object
                    description: Contains some basic information about the job associated with this task.
                    required:
                        - id
                        - accepted
                        - queue
                        - schedule
                        - parallel
                        - tasks
                    properties:
                        id:
                            description: The ID of the job
                            type: string
                        accepted:
                            description: Describes if the job has been accepted
                            type: boolean
                        queue:
                            description: Describes the queue this job is a part of.
                            type: string
                        schedule:
                            $ref: "#/components/schemas/DateTime"
                        parallel:
                            type: object
                            required:
                                - tasks
                            properties:
                                sub_queue:
                                    nullable: true
                                    type: string
                                tasks:
                                    type: boolean
                        tasks:
                            type: array
                            nullable: true
                            items:
                                title: NewTask
                                type: object
                                required:
                                    - caption
                                    - header
                                    - input
                                    - steps
                                properties:
                                    caption:
                                        type: string
                                        description: A short description of the task.
                                    header:
                                        type: string
                                        description: The API function called.
                                    steps:
                                        description: An array of job task steps.
                                        nullable: true
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TaskStep"
                                    input:
                                        type: object
                                        description: Input information used for the job tasks.
                                        additionalProperties: {}
        HubID:
            title: HubID
            type: string
            description: The unique ID of the Hub this resource was created in.
        MembershipState:
            title: MembershipState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the membership.
                          type: string
                          enum:
                              - pending
                              - accepted
                              - declined
                              - revoked
                              - deleted
                - $ref: "#/components/schemas/State"
        Invitation:
            title: HubMembershipInvitation
            type: object
            description: Information about a hub membership invitation.
            required:
                - sender
                - recipient
                - events
            properties:
                sender:
                    type: object
                    description: Information about the origin account of the invitation.
                    required:
                        - id
                        - type
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        type:
                            type: string
                            description: The account type.
                recipient:
                    type: string
                    description: The email address for the invitations recipient.
                events:
                    title: InvitationEvents
                    type: object
                    description: A collection of timestamps for each event in the invitation's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - accepted
                        - declined
                        - revoked
                    properties:
                        created:
                            description: The timestamp of when the invitation was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the invitation was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the invitation was deleted.
                            $ref: "#/components/schemas/DateTime"
                        accepted:
                            description: The timestamp of when the invitation was accepted.
                            $ref: "#/components/schemas/DateTime"
                        declined:
                            description: The timestamp of when the invitation was declined.
                            $ref: "#/components/schemas/DateTime"
                        revoked:
                            description: The timestamp of when the invitation was revoked.
                            $ref: "#/components/schemas/DateTime"
        HubMembershipMeta:
            title: HubMembershipMeta
            type: object
            description: A list of meta fields that can be applied to a membership.
            properties:
                capabilities:
                    type: object
                    required:
                        - all
                    properties:
                        all:
                            type: boolean
                        specific:
                            nullable: true
                            type: array
                            items:
                                $ref: "#/components/schemas/Capability"
        HubMembership:
            title: HubMembership
            type: object
            description: A membership resource that is scoped to an individual hub.
            required:
                - id
                - hub_id
                - role
                - events
                - state
                - invitation
                - permissions
                - prefereneces
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                account_id:
                    type: string
                    description: An ID for the account associated with the given membership.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                events:
                    title: MembershipEvents
                    type: object
                    description: A collection of timestamps for each event in the membership's lifetime.
                    required:
                        - joined
                    properties:
                        created:
                            description: The timestamp of when the membership was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the membership was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the membership was deleted.
                            $ref: "#/components/schemas/DateTime"
                        joined:
                            description: The timestamp of when the membership was accepted.
                            $ref: "#/components/schemas/DateTime"
                role_id:
                    definition: The ID of the Role assigned to this Hub Membership.
                    $ref: "#/components/schemas/ID"
                permissions:
                    type: object
                    title: HubMembershipPermissions
                    description: Information about this member's permissions for a given hub.
                    required:
                        - all_environments
                        - environments
                    properties:
                        all_environments:
                            type: boolean
                            description: A boolean where true represents the member has access to view and manage all environments for the hub.
                        environments:
                            description: An array of environments this membership has access to.
                            type: array
                            items:
                                type: object
                                description: Environment membership resources.
                                required:
                                    - id
                                    - manage
                                properties:
                                    id:
                                        $ref: "#/components/schemas/ID"
                                    manage:
                                        type: boolean
                                        description: A boolean where true represents this environment can be managed by the membership (i.e. its not just read-only).
                preferences:
                    type: object
                    title: HubMembershipPreferences
                    description: Preference information set by the user for the membership.
                    required:
                        - portal
                        - email
                    properties:
                        portal:
                            type: object
                            required:
                                - notifications
                            properties:
                                notifications:
                                    type: object
                                    required:
                                        - jobs
                                    properties:
                                        jobs:
                                            type: object
                                            required:
                                                - apikey_alerts
                                            properties:
                                                apikey_alerts:
                                                    type: boolean
                        email:
                            type: object
                            required:
                                - notifications
                            properties:
                                notificaitons:
                                    type: object
                                    required:
                                        - server
                                    properties:
                                        server:
                                            type: object
                                            required:
                                                - new
                                                - offline
                                            properties:
                                                new:
                                                    nullable: true
                                                    type: boolean
                                                offline:
                                                    nullable: true
                                                    type: boolean
                state:
                    $ref: "#/components/schemas/MembershipState"
                invitation:
                    $ref: "#/components/schemas/Invitation"
                cycle:
                    type: object
                    description: If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts do not consume a "membership" for a given hub.
                    required:
                        - employee_id
                    properties:
                        employee_id:
                            type: string
                            description: The ID of the employee this membership is associated with.
                meta:
                    $ref: "#/components/schemas/HubMembershipMeta"
        Events:
            title: Events
            description: Describes the date and time at which certain events occurred in the lifetime of this resource.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/DateTime"
        PublicAccount:
            title: PublicAccount
            description: Publicly available information about an account
            type: object
            required:
                - name
                - email
                - id
            properties:
                name:
                    title: AccountName
                    description: The first and last name of an account owner
                    type: object
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the account owner
                        last:
                            type: string
                            description: The last name of the account owner
                email:
                    title: AccountEmail
                    description: Email information for an account
                    type: object
                    required:
                        - address
                        - verified
                        - added
                    properties:
                        address:
                            type: string
                            description: The email address
                        verified:
                            type: boolean
                            description: A boolean representing if the email has been verified
                        added:
                            $ref: "#/components/schemas/DateTime"
                id:
                    title: AccountId
                    description: Id information for an account
                    type: string
                events:
                    allOf:
                        - $ref: "#/components/schemas/Events"
                        - properties:
                              last_login:
                                  $ref: "#/components/schemas/DateTime"
        Identifier:
            title: Identifier
            type: string
            description: |
                A human-readable identifier used to refer to a resource, where using the official ID may be inconvenient.
                The identifier is automatically tokenized from the name/relevant field of the resource if one is not provided. For example, a container named "My Container" will
                have the identifier of `my-container` and is automatically created by the platform.

                The identifier does not have to be unique.
        CreatorScope:
            title: CreatorScope
            description: The creator scope is embedded in resource objects to describe who created them
            type: object
            required:
                - id
                - type
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                type:
                    type: string
                    enum:
                        - account
                        - environment
                        - platform
                        - platform-pipeline
                        - employee
                        - api-key
                        - visitor
        HubState:
            title: HubState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the hub.
                          type: string
                          enum:
                              - new
                              - configuring
                              - live
                              - inactive
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        HubWebhooks:
            title: HubWebhooks
            type: object
            description: Hub related webhooks. When supplied, the given webhook will be called with a payload any time one of these events occurs.
            required:
                - server_deployed
                - server_deleted
            properties:
                server_deployed:
                    nullable: true
                    type: string
                    description: A webhook that is called any time a server is deployed to this hub. The payload will be a `Server` object.
                server_deleted:
                    nullable: true
                    type: string
                    description: A webhook that is called any time a server in this hub is deleted. The payload will be a `Server` object.
        Term:
            title: BillingTerm
            type: object
            description: Information about a billing term.
            required:
                - start
                - end
                - renew
            properties:
                start:
                    description: A timestamp describing the start of a billing term.
                    $ref: "#/components/schemas/DateTime"
                end:
                    description: A timestamp describing the end of a billing term.
                    $ref: "#/components/schemas/DateTime"
                renew:
                    type: string
                    description: The term renewal period.
                    enum:
                        - once
                        - monthly
                        - yearly
                    nullable: true
        HubBillingProfile:
            title: HubBillingProfile
            type: object
            description: A billing profile for a given hub.
            required:
                - term
                - plans
                - pause_invoices
                - emails
            properties:
                term:
                    $ref: "#/components/schemas/Term"
                allow_prepaid:
                    type: boolean
                    description: A boolean where true represents this account being approved to use a prepaid card for billing transactions.
                pause_invoices:
                    type: boolean
                    description: A boolean where true represents invoices have been paused on this hub for one reason or another.
                disable:
                    type: boolean
                    description: A boolean where true means this billing is disabled on this hub.
                plans:
                    type: object
                    description: Information about the plan associated with this hub.
                    required:
                        - tier_id
                        - support_id
                    properties:
                        tier_id:
                            type: string
                            nullable: true
                            description: An ID referencing the pricing tier applied to this hub.
                        support_id:
                            type: string
                            nullable: true
                            description: An ID referencing the support plan applied to this hub.
                emails:
                    type: array
                    nullable: true
                    items:
                        type: string
                    description: An array of email addresses to whom the billing invoices will be sent to. If left empty, they will be sent to the owner of this hub.
        HubMeta:
            title: HubsMeta
            type: object
            description: A list of meta fields that can be applied to a hub.
            properties:
                membership:
                    $ref: "#/components/schemas/HubMembership"
        Hub:
            title: Hub
            description: A hub resource.
            type: object
            required:
                - id
                - identifier
                - name
                - creator
                - events
                - state
                - integrations
                - webhooks
                - billing
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this hub.
                name:
                    type: string
                    description: A name for the hub.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    title: HubEvents
                    type: object
                    description: A collection of timestamps for each event in the hub's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the hub was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the hub was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the hub was deleted.
                            $ref: "#/components/schemas/DateTime"
                        converted:
                            description: The timestamp of when the hub had the first converted
                            $ref: "#/components/schemas/DateTime"
                        first_provider:
                            description: The timestamp of when the hub had the first provider added.
                            $ref: "#/components/schemas/DateTime"
                        first_server:
                            description: The timestamp of when the hub had the first_server deployed.
                            $ref: "#/components/schemas/DateTime"
                        first_environment:
                            description: The timestamp of when the hub had the first environment deployed.
                            $ref: "#/components/schemas/DateTime"
                        first_image:
                            description: The timestamp of when the hub had the first image deployed.
                            $ref: "#/components/schemas/DateTime"
                        first_container:
                            description: The timestamp of when the hub had the first container deployed.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/HubState"
                webhooks:
                    $ref: "#/components/schemas/HubWebhooks"
                billing:
                    allOf:
                        - type: object
                          nullable: true
                        - $ref: "#/components/schemas/HubBillingProfile"
                meta:
                    $ref: "#/components/schemas/HubMeta"
        Role:
            title: Role
            type: object
            description: A Role is a custom combination of platform-level capabilities, allowing for fully customizable role-based access controls across the platform.
            required:
                - id
                - root
                - rank
                - identifier
                - creator
                - capabilities
                - hub_id
                - state
                - events
            properties:
                id:
                    type: string
                name:
                    nullable: true
                    type: string
                root:
                    description: The Role marked as root has full moderation control over all Roles.
                    type: boolean
                default:
                    description: A reference to the original identifier of the default Role this Role was built from.  A value of null means it is a fully custom Role.
                    type: string
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/Identifier"
                rank:
                    description: An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10.
                    type: integer
                identifier:
                    $ref: "#/components/schemas/Identifier"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                capabilities:
                    type: object
                    description: The list of platform level capabilities assigned to this Role.
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                            description: If true, the Role has all capabilities.
                        specific:
                            type: array
                            items:
                                $ref: "#/components/schemas/Capability"
                extra:
                    type: object
                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                    additionalProperties:
                        type: string
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the Role.
                                  type: string
                                  enum:
                                      - live
                        - $ref: "#/components/schemas/State"
                events:
                    title: RoleEvents
                    type: object
                    description: Timestamps for each event in the Role's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the Role source was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the Role source was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the Role source was deleted.
                            $ref: "#/components/schemas/DateTime"
        HubMembershipIncludes:
            title: HubMembershipsIncludes
            type: object
            description: A resource thats associated with a hub membershp.
            properties:
                senders:
                    type: object
                    description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
                    properties:
                        accounts:
                            type: object
                            description: A record with an ID mapped to a public account.
                            additionalProperties:
                                $ref: "#/components/schemas/PublicAccount"
                accounts:
                    type: object
                    description: A record with an ID mapped to a public account.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                hubs:
                    type: object
                    description: A record with an ID mapped to a hub resource.
                    additionalProperties:
                        $ref: "#/components/schemas/Hub"
                roles:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        AccountInfo:
            title: AccountLoginInfo
            type: object
            description: Details of an Account login.
            required:
                - id
                - ip
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                ip:
                    type: string
                    description: The IP of the request used during login.
        AccountLogin:
            title: AccountLogin
            type: object
            description: A record of an Account login.
            required:
                - id
                - account
                - time
                - type
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                account:
                    $ref: "#/components/schemas/AccountInfo"
                time:
                    description: A timestamp of the time the login occurred.
                    $ref: "#/components/schemas/DateTime"
                type:
                    type: string
                    description: The type of login mechanism used.
                    enum:
                        - password
                        - employee
                success:
                    type: boolean
                    description: A boolean where true reflects that the login was successful.
        AccountEmployeeLogin:
            title: AccountEmployeeLogin
            type: object
            description: A login event where the authentication mechanism was an employee login.
            allOf:
                - $ref: "#/components/schemas/AccountLogin"
                - type: object
                  properties:
                      type:
                          type: string
                          enum:
                              - employee
                      employee:
                          type: object
                          description: If this was an employee login, contains information about who accessed the Account.
                          required:
                              - id
                              - ip
                          properties:
                              id:
                                  $ref: "#/components/schemas/ID"
                              ip:
                                  type: string
        AccountPasswordLogin:
            title: AccountPasswordLogin
            description: A login event where password was the authentication type.
            allOf:
                - $ref: "#/components/schemas/AccountLogin"
                - type: object
                  properties:
                      type:
                          type: string
                          enum:
                              - password
        TwoFactorAuthSetup:
            title: TwoFactorAuthSetup
            type: object
            required:
                - qr
                - secret
            properties:
                qr:
                    type: string
                secret:
                    type: string
        TwoFactorAuthRecovery:
            title: TwoFactorAuthRecovery
            type: object
            required:
                - recovery_codes
                - totp_passcode
            properties:
                recovery_codes:
                    type: array
                    items:
                        type: string
                totp_passcode:
                    type: string
        AnnouncementUpdate:
            title: AnnoucementUpdate
            type: object
            description: An update to an Announcement.
            required:
                - id
                - message
                - creator
                - time
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                message:
                    type: string
                    description: The text describing the update to the announcement.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                time:
                    $ref: "#/components/schemas/DateTime"
                    description: A timestamp of when the update took place.
        Announcement:
            title: Announcement
            type: object
            description: An announcement from the Cycle team.
            required:
                - id
                - title
                - description
                - updates
                - priority
                - events
                - creator
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                title:
                    type: string
                    description: A description of the event being announced.
                description:
                    type: string
                    description: A description of the announcement
                updates:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnnouncementUpdate"
                affected_integrations:
                    type: array
                    items:
                        type: string
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                priority:
                    type: string
                    description: The priority or severity of the announcement.
                    enum:
                        - notice
                        - low
                        - medium
                        - high
                        - severe
                events:
                    title: AnnouncementEvents
                    type: object
                    description: A collection of timestamps for each event in the announcement's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - resolved
                    properties:
                        created:
                            description: The timestamp of when the announcement was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the announcement was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the announcement was deleted.
                            $ref: "#/components/schemas/DateTime"
                        resolved:
                            description: The timestamp of when the announcement was resolved.
                            $ref: "#/components/schemas/DateTime"
        UserScope:
            title: UserScope
            description: A type of creator and a matching identifier.
            type: object
            required:
                - type
                - id
            properties:
                type:
                    type: string
                    description: The type of user that created the resource.
                    enum:
                        - account
                        - environment
                        - platform
                        - platform-pipeline
                        - employee
                        - api-key
                        - visitor
                id:
                    $ref: "#/components/schemas/ID"
        BillingAmount:
            title: BillingAmount
            type: object
            description: An object holding information about term and amount that relates to a specific billing component.
            required:
                - mills
                - term
            properties:
                mills:
                    type: integer
                    description: 1/10th of a cent.
                term:
                    type: string
                    description: The length of the term.
                    enum:
                        - once
                        - monthly
                        - yearly
        ServiceItem:
            title: ItemPlan
            type: object
            description: Information for an item's plan.
            properties:
                support:
                    type: object
                    description: Information about the support component of the billing item.
                    required:
                        - id
                        - name
                        - price
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        name:
                            type: string
                            description: The support contract name.
                        price:
                            type: integer
                            description: The price of the support contract (monthly).
                tier:
                    type: object
                    description: Information about the tier component of the billing item.
                    required:
                        - id
                        - name
                        - price
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        name:
                            type: string
                            description: The support contract name.
                        price:
                            $ref: "#/components/schemas/BillingAmount"
        OrderItem:
            title: OrderItem
            type: object
            description: Describes a billing item
            required:
                - id
                - service
                - description
                - price
                - net_price
            properties:
                id:
                    type: string
                service:
                    $ref: "#/components/schemas/ServiceItem"
                description:
                    type: string
                price:
                    $ref: "#/components/schemas/BillingAmount"
                discount:
                    type: object
                    required:
                        - id
                        - amount
                        - expires
                    properties:
                        id:
                            type: string
                        amount:
                            $ref: "#/components/schemas/BillingAmount"
                        expires:
                            $ref: "#/components/schemas/DateTime"
                net_price:
                    type: number
        OrderState:
            title: OrderState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the zone.
                          type: string
                          enum:
                              - new
                              - processed
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Order:
            title: Order
            type: object
            description: An order is a resource that describes a billing order
            required:
                - hub_id
                - creator
                - promo_code_id
                - term
                - approved
                - items
                - total_price
                - events
                - state
            properties:
                hub_id:
                    type: string
                creator:
                    $ref: "#/components/schemas/UserScope"
                promo_code_id:
                    type: string
                    nullable: true
                term:
                    $ref: "#/components/schemas/Term"
                approved:
                    type: boolean
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/OrderItem"
                total_price:
                    type: number
                events:
                    title: OrderEvents
                    type: object
                    description: A collection of timestamps for each event in the orders lifetime.
                    required:
                        - expires
                    properties:
                        expires:
                            description: The timestamp of when the order expires.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/OrderState"
        PromoCode:
            title: PromoCode
            type: object
            description: A billing promo code.
            required:
                - code
                - credit
                - expires
                - state
            properties:
                code:
                    type: string
                    description: The promo "code".
                credit:
                    type: object
                    nullable: true
                    description: The amount of credit the promo code offers.
                    additionalProperties:
                        type: object
                        properties:
                            amount:
                                $ref: "#/components/schemas/BillingAmount"
                            expires:
                                $ref: "#/components/schemas/DateTime"
                state:
                    title: PromoCodeState
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the promo code.
                                  type: string
                                  enum:
                                      - live
                                      - deleted
                        - $ref: "#/components/schemas/State"
        PromoCodeInclude:
            title: PromoCodeIncludes
            type: object
            description: A resource thats associated with a promo code.
            additionalProperties:
                $ref: "#/components/schemas/PromoCode"
        BillingOrderIncludes:
            title: BillingOrderIncludes
            type: object
            properties:
                promo_codes:
                    $ref: "#/components/schemas/PromoCodeInclude"
        BillingOrder:
            title: BillingOrder
            type: object
            description: Information about an order.
            required:
                - id
                - hub_id
                - creator
                - promo_code_id
                - term
                - approved
                - items
                - total_price
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                promo_code_id:
                    type: string
                    nullable: true
                    description: An ID associated with a promo code used with the order.
                term:
                    $ref: "#/components/schemas/Term"
                approved:
                    type: boolean
                    description: A boolean where true represents the order is approved to be paid by the user.
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/ServiceItem"
                total_price:
                    type: integer
                    description: 1/10th of a cent.
                events:
                    title: BillingOrderEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - expires
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                        expires:
                            description: The timestamp of when the billing order expires.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the order.
                                  type: string
                                  enum:
                                      - new
                                      - processed
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
        SupportPlanFeatures:
            title: SupportPlanFeatures
            type: object
            description: Information about billing support plan features.
            required:
                - engineering_support
                - uptime_sla
                - guaranteed_response_time
            properties:
                engineering_support:
                    type: boolean
                    description: A boolean where true indicates the contract includes support for engineering.
                uptime_sla:
                    type: boolean
                    description: A boolean where true represents the contract has an uptime SLA agreement.
                guaranteed_response_time:
                    nullable: true
                    type: string
                    description: The time in which this support contract guarantees response time.
        SupportPlan:
            title: SupportPlan
            type: object
            description: Information about a billing support plan.
            required:
                - name
                - price
                - description
                - features
                - contract
                - default
            properties:
                name:
                    type: string
                    description: The name of the support plan.
                price:
                    $ref: "#/components/schemas/BillingAmount"
                description:
                    type: string
                    description: Information about the billing support plan that describes the plan.
                features:
                    $ref: "#/components/schemas/SupportPlanFeatures"
                contract:
                    type: boolean
                    description: A boolean where true represents the plan is a long term contract, not just month to month.
                default:
                    type: boolean
                    description: This returns true if it shows up.
        BillingServers:
            title: BillingServers
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of servers included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard server limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of servers exceeding the included server count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingMembers:
            title: BillingMembers
            type: object
            description: An object holding information about members included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of members included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard member limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of members exceeding the included member count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingRam:
            title: BillingRam
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingImageStorage:
            title: BillingImageStorage
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingBuilds:
            title: BillingBuilds
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - parallel
                - cpu_cores
                - ram_gb
                - max_daily_builds
            properties:
                parallel:
                    type: number
                cpu_cores:
                    type: number
                    description: The number of CPU Cores availiable for builds
                ram_gb:
                    type: number
                    description: The amount of RAM availiable for builds
                max_daily_builds:
                    type: number
                    nullable: true
                    description: The maximum number of builds processed per day
        TierPlan:
            title: TierPlan
            type: object
            description: A TierPlan object describes the attributes of a subscription tier
            required:
                - id
                - name
                - code
                - generation
                - usable
                - price
                - servers
                - members
                - max_nodes
                - max_members
                - advanced_features
                - max_daily_api_requests
                - ram
                - image_storage
                - builds
                - hidden
                - description
            properties:
                id:
                    type: string
                name:
                    type: string
                code:
                    type: string
                generation:
                    type: number
                usable:
                    type: boolean
                price:
                    $ref: "#/components/schemas/BillingAmount"
                servers:
                    $ref: "#/components/schemas/BillingServers"
                members:
                    $ref: "#/components/schemas/BillingMembers"
                max_nodes:
                    type: number
                    nullable: true
                max_members:
                    type: number
                    nullable: true
                advanced_features:
                    type: object
                    required:
                        - gpu
                        - ial
                        - autoscale
                        - deployments
                    properties:
                        gpu:
                            type: boolean
                        ial:
                            type: boolean
                        deployments:
                            type: boolean
                        autoscale:
                            type: boolean
                max_daily_api_requests:
                    type: number
                    nullable: true
                ram:
                    $ref: "#/components/schemas/BillingRam"
                image_storage:
                    $ref: "#/components/schemas/BillingImageStorage"
                builds:
                    $ref: "#/components/schemas/BillingBuilds"
                hidden:
                    type: boolean
                description:
                    type: string
        Address:
            title: BillingMethodAddress
            description: Address information for a given billing method.
            type: object
            required:
                - country
                - zip
            properties:
                country:
                    type: string
                    description: The country this billing method is associated with.
                zip:
                    type: string
                    description: The zip code this billing method is associated with.
        BillingMethodExpiration:
            title: BillingMethodExpiration
            description: Expiration information for a billing method
            type: object
            required:
                - month
                - year
            properties:
                month:
                    type: integer
                    description: The month the billing method expires.
                year:
                    type: integer
                    description: The year the billing method expires.
        CreditCard:
            title: CreditCard
            type: object
            description: Information about a credit card.
            required:
                - name
                - brand
                - expiration
                - last_4
            properties:
                name:
                    type: string
                    description: A name associated with the credit cards usage.
                brand:
                    type: string
                    description: The brand of card - ex VISA.
                expiration:
                    $ref: "#/components/schemas/BillingMethodExpiration"
                last_4:
                    type: string
                    description: The last 4 digits of the card.
        Method:
            title: BillingMethod
            type: object
            description: Information about a billing method, usable to pay invoices.
            required:
                - id
                - name
                - primary
                - address
                - creator
                - credit_card
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the billing method.
                primary:
                    type: boolean
                    description: A boolean where true represents this billing method is set to primary for a given hub.
                address:
                    $ref: "#/components/schemas/Address"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                credit_card:
                    $ref: "#/components/schemas/CreditCard"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    title: CreditCardEvents
                    type: object
                    description: A collection of timestamps for each event in the credit card's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the credit card was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the credit card was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the credit card was deleted.
                            $ref: "#/components/schemas/DateTime"
        BillingSummary:
            title: BillingSummary
            type: object
            description: A billing summary.
            required:
                - service_id
                - title
                - type
                - term
                - price
                - discount
            properties:
                service_id:
                    type: string
                    description: The ID of the billing service, the summary pertains to.
                title:
                    type: string
                    description: The billing summary title.
                type:
                    type: string
                    description: The plan type.
                    enum:
                        - tier
                        - support
                term:
                    $ref: "#/components/schemas/Term"
                price:
                    type: string
                    description: 1/10th of a cent.
                discount:
                    type: string
        PaymentGateway:
            title: PaymentGateway
            type: string
            description: The type of payment gateway used.
            enum:
                - stripe
        Refund:
            title: BillingRefund
            type: object
            description: A billing refund.
            required:
                - id
                - time
                - description
                - amount
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment refund.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        PaymentResult:
            title: PaymentResult
            type: object
            description: A billing payment result.
            required:
                - success
                - error
            properties:
                success:
                    type: boolean
                    description: A boolean where true represents the success of the payment.
                error:
                    type: string
                    description: A description of the error that took place.
        Payment:
            title: BillingPayment
            type: object
            description: A billing payment.
            required:
                - id
                - time
                - description
                - amount
                - amount_refunded
                - refunds
                - method_id
                - result
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                amount_refunded:
                    type: integer
                    description: 1/10th of a cent.
                refunds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Refund"
                method_id:
                    type: string
                    description: The ID associated with the billing method used.
                result:
                    $ref: "#/components/schemas/PaymentResult"
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        InvoiceCredit:
            title: BillingInvoiceCredit
            type: object
            description: A billing credit for a specific invoice.
            required:
                - id
                - associated_credit
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                associated_credit:
                    type: object
                    description: Credit associated with an invoice.
                    required:
                        - id
                        - amount
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        amount:
                            type: integer
                            description: The amount of the credit.
                time:
                    description: A timestamp for when the invoice credit was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the invoice credit.
                amount:
                    type: integer
                    description: The amount of credit for the invoice.
        LateFee:
            title: LateFee
            type: object
            description: A late fee, applied to an invoice.
            required:
                - id
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp of when the late fee was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the late fee.
                amount:
                    type: integer
                    description: 1/10th of a cent.
        InvoiceState:
            title: InvoiceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the container.
                          type: string
                          enum:
                              - new
                              - billing
                              - billed
                              - processing
                              - partially-paid
                              - paid
                              - refunding
                              - refunded
                              - crediting
                              - credited
                              - voiding
                              - voided
                              - uncollectible
                - $ref: "#/components/schemas/State"
        InvoiceMeta:
            title: InvoiceMeta
            type: object
            description: A list of meta fields that can be applied to a invoice.
            properties:
                due:
                    type: integer
                    description: The amount due for a given invoice.
        Invoice:
            title: BillingInvoice
            type: object
            description: Information about a billing invoice.
            required:
                - id
                - hub_id
                - approved
                - charges
                - events
                - failed_payment_attempts
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                approved:
                    type: boolean
                    description: A boolean where true represents the invoice is approved for collection.
                services:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/BillingSummary"
                payments:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/Payment"
                credits:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/InvoiceCredit"
                late_fees:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/LateFee"
                charges:
                    type: integer
                    description: The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice.
                due:
                    description: A timestamp of when the invoice is due to be paid.
                    $ref: "#/components/schemas/DateTime"
                overdue:
                    description: A timestamp of when the invoice is overdue.
                    $ref: "#/components/schemas/DateTime"
                failed_payment_attempts:
                    type: integer
                    description: The number of failed payment attempts for the invoice.
                events:
                    title: BillingOrderEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - billed
                        - paid
                        - credited
                        - voided
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                        billed:
                            description: The timestamp of when the billing order billed.
                            $ref: "#/components/schemas/DateTime"
                        paid:
                            description: The timestamp of when the billing order paid.
                            $ref: "#/components/schemas/DateTime"
                        payment_attempt:
                            description: The timestamp of when the billing order payment was attempted.
                            $ref: "#/components/schemas/DateTime"
                        credited:
                            description: The timestamp of when the billing order credited.
                            $ref: "#/components/schemas/DateTime"
                        voided:
                            description: The timestamp of when the billing order voided.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/InvoiceState"
                meta:
                    $ref: "#/components/schemas/InvoiceMeta"
        AssociatedDiscount:
            title: AssociatedDiscount
            type: object
            description: Information about a billing discount.
            required:
                - id
                - amount
                - expires
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                amount:
                    $ref: "#/components/schemas/BillingAmount"
                expires:
                    description: A timestamp of when the discount expires.
                    $ref: "#/components/schemas/DateTime"
        BillingServiceState:
            title: BillingServiceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the billing service.
                          type: string
                          enum:
                              - active
                - $ref: "#/components/schemas/State"
        Service:
            title: BillingService
            type: object
            description: Information about billing service.
            required:
                - id
                - creator
                - hub_id
                - title
                - order
                - item
                - events
                - discount
                - price
                - term
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                title:
                    type: string
                    description: Billing service title.
                order:
                    $ref: "#/components/schemas/Order"
                item:
                    $ref: "#/components/schemas/ServiceItem"
                discount:
                    $ref: "#/components/schemas/AssociatedDiscount"
                price:
                    $ref: "#/components/schemas/BillingAmount"
                term:
                    $ref: "#/components/schemas/Term"
                events:
                    title: BillingServiceEvents
                    type: object
                    description: A collection of timestamps for each event in the billing service's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_billed
                    properties:
                        created:
                            description: The timestamp of when the billing service was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing service was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing service was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_billed:
                            description: The timestamp of when the billing service was last billed.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/BillingServiceState"
        Overage:
            title: BillingOverage
            type: object
            description: Information about billing overage.
            required:
                - term
                - ram
            properties:
                term:
                    $ref: "#/components/schemas/Term"
                ram:
                    type: object
                    description: Used for gen 1 pricing.
                    required:
                        - gb_hours
                        - cost
                    properties:
                        gb_hours:
                            type: integer
                            description: The number of hours of overage.
                        cost:
                            type: integer
                            description: The cost of the overage.
        Credit:
            title: BillingCredit.yml
            type: object
            description: Information about a billing credit.
            required:
                - id
                - hub_id
                - description
                - creator
                - account_id
                - amount
                - amount_remaining
                - expires
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                description:
                    type: string
                    description: Some extra information about the billing credit.
                account_id:
                    type: string
                    description: The account the credit was issued to.
                amount:
                    type: integer
                    description: The amount of credit.
                amount_remaining:
                    type: integer
                    description: The amount of the credit that remains after being applied to invoices.
                expires:
                    nullable: true
                    type: object
                    description: Information on when the billing credit expires.
                    properties:
                        date:
                            description: A timestamp of when the billing credit expires.
                            $ref: "#/components/schemas/DateTime"
                events:
                    title: BillingCreditEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the credit.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - expired
                        - $ref: "#/components/schemas/State"
        EnvironmentAbout:
            title: EnvironmentAbout
            type: object
            description: Contains details regarding the environment.
            required:
                - description
                - favorite
            properties:
                description:
                    type: string
                    description: A custom description for this environment.
                favorite:
                    type: boolean
                    description: If true, this environment has been marked as a favorite.
        EnvironmentState:
            title: EnvironmentState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the environment.
                          type: string
                          enum:
                              - new
                              - live
                              - cloning
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Features:
            title: Features
            type: object
            description: An object representing specialized features configured for this environment.
            required:
                - legacy_networking
            properties:
                legacy_networking:
                    description: Whether or not legacy networking mode is enabled on this environment.
                    type: boolean
        HaProxyConfigSet:
            title: HAProxyConfig
            type: object
            required:
                - frontend
                - backend
            properties:
                frontend:
                    type: object
                    description: Settings that describe how incoming traffic to the load balancer is handled.
                    required:
                        - mode
                        - max_connections
                        - timeouts
                    properties:
                        mode:
                            type: string
                            description: |-
                                The type of traffic expected by the load balancer for this port. Can be either: 
                                 - tcp: Traffic is forwarded without any parsing or additional manipulation. 
                                 - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
                            enum:
                                - tcp
                                - http
                        max_connections:
                            type: integer
                            nullable: true
                            description: The number of simultaneous connections that can be processed at a time.
                        timeouts:
                            type: object
                            nullable: true
                            description: Various options for handling timeouts when communicating with the client.
                            required:
                                - client_secs
                                - client_fin_ms
                                - http_keep_alive_ms
                                - http_request_ms
                            properties:
                                client_secs:
                                    type: integer
                                    nullable: true
                                    description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                                client_fin_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                                http_keep_alive_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                                http_request_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                backend:
                    type: object
                    description: Settings related to how the load balancer routes connections to container instances.
                    required:
                        - balance
                        - timeouts
                    properties:
                        balance:
                            type: string
                            description: |-
                                How connections are balanced across your container instances. Can be one of the following: 
                                 - `roundrobin`: Each container instance is used in turns. 
                                 - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
                                 - `leastconn`: Routes traffic to the instance with the least number of active connections. 
                                 - `first`: Routes traffic to the first available instance. 
                                 - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
                            enum:
                                - roundrobin
                                - static-rr
                                - leastconn
                                - first
                                - source
                        timeouts:
                            type: object
                            nullable: true
                            description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
                            required:
                                - server_secs
                                - server_fin_ms
                                - connect_ms
                                - queue_ms
                                - tunnel_secs
                            properties:
                                server_secs:
                                    type: integer
                                    nullable: true
                                    description: The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.
                                server_fin_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.
                                connect_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.
                                queue_ms:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
                                tunnel_secs:
                                    type: integer
                                    nullable: true
                                    description: The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.
        HaProxyConfig:
            type: object
            description: Describes settings that are passed to HAProxy within the load balancer.
            required:
                - default
                - ports
            properties:
                default:
                    description: Settings that are applied to any port that is not overridden in the following ports section.
                    $ref: "#/components/schemas/HaProxyConfigSet"
                ports:
                    description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/HaProxyConfigSet"
        HaProxyLbType:
            title: HaProxyLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - haproxy
                details:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/HaProxyConfig"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type: boolean
                    nullable: true
        Duration:
            title: Duration
            type: string
            description: A string signifying a duration of time. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h", "d", "w", "y".
            example: 72h45m2s
        TcpTransportConfig:
            title: TcpTransportConfig
            description: Additional configuration options for the TCP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    required:
                        - connections
                    properties:
                        connections:
                            type: object
                            additionalProperties: {}
        HttpTransportConfig:
            title: HttpTransportConfig
            description: Additional configuration options for the HTTP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    required:
                        - connections
                        - telemetry
                    properties:
                        connections:
                            type: object
                            required:
                                - max_idle_conns_per_connection
                            description: Defines extra configuration options connections to the load balancer
                            properties:
                                max_idle_conns_per_connection:
                                    nullable: true
                                    type: integer
                                    description: Maximum number of simultaneous connections (via http/2) per connection.
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled.
                            required:
                                - disable_url_tracking
                                - disable_router_metrics
                            properties:
                                disable_url_tracking:
                                    description: Determines if the load balancer will track url metrics. Defaults to false.
                                    type: boolean
                                disable_router_metrics:
                                    description: Determines if the load balancer will track router metrics. Defaults to false.
                                    type: boolean
                                max_trackable_urls:
                                    description: Determines how many URLs the load balancer will track at one time. Defaults to 150.
                                    nullable: true
                                    type: integer
                                tracking_window:
                                    description: Determines how long the load balancer will track a URL from its last hit. Helps reduce noise by not tracking URLs that are occasionally hit. Defaults to 8h.
                                    type: string
                                    nullable: true
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                                track_invalid_requests:
                                    description: Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false.
                                    type: boolean
                                    nullable: true
                                group_paths:
                                    description: Group paths is used to group URLs.  The key is the URL and the value is the regex used to match URLs.
                                    nullable: true
                                    type: object
                                    additionalProperties:
                                        type: string
                                ignore_paths:
                                    description: An array of paths to exclude from tracking.
                                    type: array
                                    nullable: true
                                    items:
                                        type: string
        TcpRouterConfig:
            title: TcpRouterConfig
            description: Additional configuration options for TCP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    additionalProperties: {}
        HttpRouterConfig:
            title: HttpRouterConfig
            description: Additional configuration options for HTTP mode routers.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    properties:
                        redirect:
                            nullable: true
                            type: object
                            required:
                                - auto_https_redirect
                                - remove_www
                            description: Defines a built-in redirect for HTTP mode routers
                            properties:
                                auto_https_redirect:
                                    type: boolean
                                    description: If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router.
                                remove_www:
                                    description: If true, any request comes in with "www" prefix will be permanently redirected to the same path without www.
                                    type: boolean
                                port:
                                    nullable: true
                                    type: integer
                                    description: The port to redirect traffic to.
                                scheme:
                                    nullable: true
                                    type: string
                                    description: The scheme to redirect to. (i.e. `https`)
                                url:
                                    nullable: true
                                    type: string
                                    description: A specific URL to redirect to.
                        forward:
                            nullable: true
                            type: object
                            properties:
                                scheme:
                                    nullable: true
                                    type: string
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    nullable: true
                                    type: object
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            nullable: true
                                            type: array
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                        proxy:
                            nullable: true
                            type: object
                            properties:
                                domain:
                                    nullable: true
                                    type: string
                                    description: The proxy domain for this router.
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    nullable: true
                                    type: object
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            nullable: true
                                            type: array
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                        caching:
                            nullable: true
                            type: object
                            properties:
                                files:
                                    nullable: true
                                    type: array
                                    items:
                                        type: object
                                        required:
                                            - match
                                            - ttl
                                        properties:
                                            match:
                                                description: Regex string that describes the files to cache.
                                                example: (.*)\\.(js|jpg|css|png|svg)$
                                                type: string
                                            ttl:
                                                description: Time string that describes the time to live.
                                                $ref: "#/components/schemas/Duration"
        V1LbConfigRouter:
            title: V1LbRouterConfig
            description: A specific router configuration that describes how traffic matching the rule is handled.
            type: object
            required:
                - match
                - mode
                - config
            properties:
                match:
                    type: object
                    description: The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then this match acts as a wildcard and will match all.
                    required:
                        - domains
                        - internal_port
                    properties:
                        domains:
                            nullable: true
                            type: array
                            description: The specific domains to match against.
                            items:
                                type: string
                        internal_port:
                            nullable: true
                            type: array
                            description: The specific ports to match against.
                            items:
                                type: integer
                        path:
                            nullable: true
                            type: string
                mode:
                    type: string
                    description: |
                        How to route the traffic to the destination.
                        `random`: Pick a valid destination at random.
                        `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
                    enum:
                        - random
                        - round-robin
                config:
                    type: object
                    required:
                        - sticky_sessions
                        - destination_retries
                        - timeouts
                    properties:
                        sticky_sessions:
                            type: boolean
                            description: If a request comes in from the same origin, ensure it hits the same destination.
                        destination_retries:
                            type: integer
                            description: If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error.
                        tls:
                            nullable: true
                            type: object
                            description: TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled.
                            properties:
                                server_name:
                                    type: string
                                    nullable: true
                                    description: |
                                        [Advanced] Change the domain the controller listens on.
                                allow_insecure:
                                    type: boolean
                                    nullable: true
                                    description: If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use.
                                client_cert_auth:
                                    nullable: true
                                    description: A PEM encoded string of certificates.
                                    type: string
                                client_auth:
                                    type: string
                                    nullable: true
                                    enum:
                                        - none
                                        - request
                                        - require
                                        - require-verify
                                    description: |
                                        Defines how to validate the connecting TLS certificate.
                                        `none`: Do not require a TLS certificate to be sent
                                        `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                                        `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                                        `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                        timeouts:
                            type: object
                            description: Defines how the length of various sorts of timeouts when communicating with the destination.
                            required:
                                - destination_connection
                            properties:
                                destination_connection:
                                    $ref: "#/components/schemas/Duration"
                                    description: The duration the load balancer will wait before timing out while attempting to connect to the destination.
                        extension:
                            type: object
                            description: Additional configuration options specific to the selected mode (tcp/http).
                            discriminator:
                                propertyName: type
                                mapping:
                                    tcp: "#/components/schemas/TcpRouterConfig"
                                    http: "#/components/schemas/HttpRouterConfig"
                            oneOf:
                                - $ref: "#/components/schemas/TcpRouterConfig"
                                - $ref: "#/components/schemas/HttpRouterConfig"
        V1LbController:
            title: V1LbController
            type: object
            required:
                - default
                - identifier
                - transport
            properties:
                default:
                    type: boolean
                identifier:
                    type: string
                    description: A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents.
                transport:
                    title: V1LbControllerTransport
                    description: Defines how traffic comes in to the load balancer, and how the load balancer handles it.
                    type: object
                    required:
                        - mode
                        - config
                        - routers
                        - disable
                    properties:
                        disable:
                            type: boolean
                            description: When true, this controller is disabled and will not be used.
                        mode:
                            type: string
                            description: The kind of traffic (http/tcp) that will be sent to the load balancer.
                            enum:
                                - tcp
                                - http
                        config:
                            type: object
                            description: Defines how the transport for this controller operates.
                            required:
                                - performance
                                - ingress
                                - timeouts
                                - verbosity
                            properties:
                                performance:
                                    type: boolean
                                    description: |
                                        Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                                        You will not see per-request breakdowns or URL logging if performance mode is enabled.
                                ingress:
                                    type: object
                                    description: Defines how traffic gets into the load balancer.
                                    required:
                                        - port
                                    properties:
                                        port:
                                            type: integer
                                            description: The port inbound trafic is accepted on.
                                        tls:
                                            nullable: true
                                            type: object
                                            required:
                                                - enable
                                            properties:
                                                enable:
                                                    type: boolean
                                                    description: Enables or disables TLS.
                                timeouts:
                                    type: object
                                    description: Defines settings for various types of timeouts.
                                    required:
                                        - idle
                                    properties:
                                        idle:
                                            description: The total amount of time a connection can be idle before being killed.
                                            $ref: "#/components/schemas/Duration"
                                verbosity:
                                    type: string
                                    description: Verbosity describes the level of logging detail for the controller
                                    enum:
                                        - low
                                        - normal
                                        - high
                                        - debug
                                extension:
                                    type: object
                                    description: Extended configurations for the specified transport mode (http/tcp)
                                    discriminator:
                                        propertyName: type
                                        mapping:
                                            tcp: "#/components/schemas/TcpTransportConfig"
                                            http: "#/components/schemas/HttpTransportConfig"
                                    oneOf:
                                        - $ref: "#/components/schemas/TcpTransportConfig"
                                        - $ref: "#/components/schemas/HttpTransportConfig"
                        routers:
                            type: array
                            description: Defines where traffic is sent. Many can be defined per controller.
                            items:
                                $ref: "#/components/schemas/V1LbConfigRouter"
        V1LbConfig:
            title: V1LbConfig
            type: object
            required:
                - controllers
            properties:
                controllers:
                    type: array
                    description: A configuration for a specific port.
                    items:
                        $ref: "#/components/schemas/V1LbController"
                controller_template:
                    nullable: true
                    $ref: "#/components/schemas/V1LbController"
        V1LbType:
            title: V1LbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - v1
                details:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/V1LbConfig"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type: boolean
                    nullable: true
        DefaultLbType:
            title: DefaultLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - default
                details:
                    allOf:
                        - type: object
                          nullable: true
                        - oneOf:
                              - $ref: "#/components/schemas/HaProxyConfig"
                              - $ref: "#/components/schemas/V1LbConfig"
        LoadBalancerConfig:
            title: LoadBalancerConfig
            type: object
            description: The config object for the loadbalancer service.
            nullable: true
            discriminator:
                propertyName: type
                mapping:
                    haproxy: "#/components/schemas/HaProxyLbType"
                    v1: "#/components/schemas/V1LbType"
                    default: "#/components/schemas/DefaultLbType"
            oneOf:
                - $ref: "#/components/schemas/V1LbType"
                - $ref: "#/components/schemas/HaProxyLbType"
                - $ref: "#/components/schemas/DefaultLbType"
        LoadBalancerEnvironmentService:
            title: LoadBalancerEnvironmentService
            type: object
            nullable: true
            description: Information about the environments loadbalancer service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the loadbalancer service is enabled.
                container_id:
                    type: string
                    nullable: true
                    description: The ID of the loadbalancer service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    $ref: "#/components/schemas/LoadBalancerConfig"
        DiscoveryConfig:
            title: DiscoveryConfig
            type: object
            description: The config object for the discovery service.
            nullable: true
            properties:
                hosts:
                    type: object
                    description: A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom /etc/resolv.conf file that works environment wide.
                    nullable: true
                    additionalProperties:
                        type: object
                        properties:
                            ipv4:
                                description: The IPv4 address the discovery server should return to any container instance requesting this hostname.
                                nullable: true
                                type: array
                                items:
                                    type: string
                            ipv6:
                                description: The IPv6 address the discovery server should return to any container instance requesting this hostname.
                                nullable: true
                                type: array
                                items:
                                    type: string
        DiscoveryEnvironmentService:
            title: DiscoveryEnvironmentService
            type: object
            nullable: true
            description: Information about the environments discovery service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the discovery service is enabled.
                container_id:
                    type: string
                    description: The ID of the discovery service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment discovery service.
                config:
                    description: The config object for the discovery service.
                    $ref: "#/components/schemas/DiscoveryConfig"
        VpnEnvironmentService:
            title: VpnEnvironmentService
            type: object
            nullable: true
            description: Information about the environments vpn service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the VPN service is enabled.
                container_id:
                    type: string
                    description: The ID of the VPN service container
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    type: object
                    nullable: true
                    description: The config object for the VPN service.
                    required:
                        - allow_internet
                        - auth
                    properties:
                        allow_internet:
                            type: boolean
                            description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                        auth:
                            type: object
                            description: Auth configuration for the VPN.
                            required:
                                - webhook
                                - cycle_accounts
                            properties:
                                webhook:
                                    type: string
                                    nullable: true
                                    description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                                cycle_accounts:
                                    type: boolean
                                    description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                                vpn_accounts:
                                    type: boolean
                                    description: If true, allows the custom VPN accounts to log in to the VPN.
        SchedulerAccessKey:
            title: SchedulerAccessKey
            description: Custom authorization keys for the scheduler service.
            type: object
            required:
                - name
                - secret
            properties:
                name:
                    type: string
                    description: The name given to this access key
                secret:
                    type: string
                    description: The access key secret. This should be submitted with requests to a publicly accessible scheduler service.
                ips:
                    type: array
                    description: Whitelisted IPs that are allowed to make requests to the scheduler service.
                    items:
                        type: string
        SchedulerConfig:
            title: SchedulerConfig
            description: Configuration options for the scheduler Environment service.
            type: object
            required:
                - public
            properties:
                public:
                    type: boolean
                    description: |
                        If true, the scheduler service API will be exposed publicly via the load balancer. This is useful for allowing external services spin up function containers using custom logic.
                access_keys:
                    type: array
                    items:
                        $ref: "#/components/schemas/SchedulerAccessKey"
        SchedulerEnvironmentService:
            title: SchedulerEnvironmentService
            type: object
            nullable: true
            description: Information about the environments scheduler service. The scheduler is used by containers with a function deployment strategy to route requests to the correct instances.
            required:
                - enable
                - container_id
                - high_availablity
            properties:
                enable:
                    type: boolean
                    description: Whether or not the scheduler service is enabled.
                container_id:
                    type: string
                    nullable: true
                    description: The ID of the scheduler service container.
                high_availability:
                    type: boolean
                    description: A boolean representing if the scheduler service container is set to high availability. mode or not. As of Jan 2024, this will always be false because HA is not availiable for the scheduler service.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment scheduler service.
                config:
                    nullable: true
                    type: object
                    allOf:
                        - $ref: "#/components/schemas/SchedulerConfig"
        EnvironmentServices:
            title: EnvironmentServices
            type: object
            description: Service containers run by this environment and their configurations.
            required:
                - loadbalancer
            properties:
                loadbalancer:
                    $ref: "#/components/schemas/LoadBalancerEnvironmentService"
                discovery:
                    $ref: "#/components/schemas/DiscoveryEnvironmentService"
                vpn:
                    $ref: "#/components/schemas/VpnEnvironmentService"
                scheduler:
                    $ref: "#/components/schemas/SchedulerEnvironmentService"
        IPNet:
            title: IPNet
            type: object
            required:
                - ip
                - cidr
            properties:
                ip:
                    type: string
                    description: The IP address.
                    example: fd00::21:0:0:0
                cidr:
                    type: string
                    description: The CIDR notation, describing the range of IP addresses.
                    example: fd00::21:0:0:0/96
        LegacyNetwork:
            title: LegacyNetwork
            type: object
            nullable: true
            description: Legacy network information for an environment.
            required:
                - subnet
                - ipv4
            properties:
                subnet:
                    type: integer
                    description: The IPv4 subnet Id.
                ipv4:
                    allOf:
                        - description: IPv4 information available from environments using legacy networking.
                        - $ref: "#/components/schemas/IPNet"
        PrivateNetwork:
            title: PrivateNetwork
            type: object
            required:
                - vxlan_tag
                - subnet
                - ipv6
                - legacy
            properties:
                vxlan_tag:
                    type: integer
                    description: The vxlan tag added to each packet to help identify the network.
                subnet:
                    type: string
                    description: The subnet ID.
                ipv6:
                    allOf:
                        - description: The IPv6 interface.
                        - $ref: "#/components/schemas/IPNet"
                legacy:
                    $ref: "#/components/schemas/LegacyNetwork"
        Version:
            title: Version
            type: string
            description: |
                Version can be any string, but if it begins with a "v", semantic version will be enforced. A [Semantic Version](https://semver.org/) string. Follows the format vMAJOR.MINOR.PATCH-build.
            example: v1.2.3-dev
        EnvironmentDeploymentTags:
            title: EnvironmentDeploymentTags
            type: object
            description: |
                A map of custom tags to deployment versions. Allows for defining a custom, persistent tag with a changing version number. 
                For example, `dev -> v1.2.3-dev`. This is useful when dealing with DNS LINKED records, where you always want dev.example.com to point to the 
                `dev` version of your app within an environment, where you can continuously deploy and update it without needing to change the record. It is 
                even more useful when you have multiple LINKED records, and you update i.e. `prod`` tag to point to a new version, all records using the `prod` tag
                are switched at once.
            additionalProperties:
                $ref: "#/components/schemas/Version"
        StateCountSummary:
            title: ResourceCountSummary
            type: object
            description: A summary of resources by state
            required:
                - state
                - total
            properties:
                state:
                    title: CountsByState
                    type: object
                    description: A count of this resource, grouped by state.
                    additionalProperties:
                        type: integer
                total:
                    type: integer
                    description: The total number of this resource
                available:
                    type: integer
                    description: The total number of this resource available, less any deleted ones.
            example:
                state:
                    new: 0
                    starting: 0
                    running: 5
                    stopping: 0
                    deleting: 0
                    deleted: 0
                total: 5
                available: 5
        ContainerState:
            title: ContainerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                      desired:
                          description: The desired state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ContainerImageSummary:
            title: ContainerImageSummary
            description: The Id of the image and information on if it is a service.
            type: object
            required:
                - id
                - service
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                service:
                    type: string
                    nullable: true
                    description: If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
                    enum:
                        - discovery
                        - loadbalancer
                        - vpn
        ContainerEnvironmentSummary:
            title: ContainerEnvironmentSummary
            description: A summary of supplemental environment and network information specific to a container.
            type: object
            nullable: true
            required:
                - id
                - cluster
                - container_subnet
                - ipv6
                - legacy
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                container_subnet:
                    type: string
                    description: The private network subnet ID for this container and its instances.
                ipv6:
                    allOf:
                        - description: The IPv6 interface.
                        - $ref: "#/components/schemas/IPNet"
                legacy:
                    $ref: "#/components/schemas/LegacyNetwork"
        ContainerSummary:
            title: ContainerSummary
            type: object
            description: Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls.
            required:
                - id
                - name
                - state
                - image
                - environment
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A user defined name for the container resource.
                state:
                    $ref: "#/components/schemas/ContainerState"
                image:
                    $ref: "#/components/schemas/ContainerImageSummary"
                environment:
                    $ref: "#/components/schemas/ContainerEnvironmentSummary"
        EnvironmentMeta:
            title: EnvironmentMeta
            type: object
            description: A list of meta fields that can be applied to this environment.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                containers:
                    type: array
                    items:
                        $ref: "#/components/schemas/ContainerSummary"
        Environment:
            title: Environment
            type: object
            description: Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).
            required:
                - id
                - identifier
                - name
                - cluster
                - about
                - creator
                - hub_id
                - state
                - events
                - features
                - services
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this environment.
                name:
                    type: string
                    description: A user defined name for the environment resource.
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                about:
                    $ref: "#/components/schemas/EnvironmentAbout"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    $ref: "#/components/schemas/EnvironmentState"
                events:
                    title: EnvironmentEvents
                    type: object
                    description: A collection of timestamps for each event in the environment's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the environment was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the environment was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the environment was deleted.
                            $ref: "#/components/schemas/DateTime"
                features:
                    $ref: "#/components/schemas/Features"
                services:
                    $ref: "#/components/schemas/EnvironmentServices"
                private_network:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/PrivateNetwork"
                deployments:
                    type: object
                    nullable: true
                    description: |
                        A map of custom tags to deployment versions.
                    required:
                        - tags
                    properties:
                        tags:
                            $ref: "#/components/schemas/EnvironmentDeploymentTags"
                meta:
                    $ref: "#/components/schemas/EnvironmentMeta"
        Permissions:
            title: Permissions
            description: Permissions information for an API Key
            type: object
            required:
                - all_environments
                - environments
            properties:
                all_environments:
                    type: boolean
                    description: A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments
                environments:
                    title: EnvironmentPermission
                    type: array
                    description: An environment ID and a boolean representing management configuration for an API key
                    items:
                        type: object
                        required:
                            - id
                            - manage
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            manage:
                                type: boolean
                                description: A boolean, where true represents the API keys ability to make changes to the environment components
        ApiKeyCreator:
            title: ApiKeyCreator
            description: An extended resource that has information on a Cycle hub API key
            type: object
            required:
                - id
                - name
                - creator
                - hub_id
                - permissions
                - capabilities
                - ips
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the API key
                hub_id:
                    $ref: "#/components/schemas/ID"
                secret:
                    type: string
                    description: The API key secret
                permissions:
                    $ref: "#/components/schemas/Permissions"
                capabilities:
                    type: object
                    description: The API key capabilities list
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                        specific:
                            type: array
                            items:
                                type: string
                ips:
                    type: array
                    nullable: true
                    items:
                        type: string
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    $ref: "#/components/schemas/Events"
        CreatorInclude:
            title: CreatorInclude
            description: An identity that created a resource.
            type: object
            properties:
                accounts:
                    type: object
                    description: Included creators that are public accounts, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                employees:
                    type: object
                    description: Included creators that are employees of Cycle, keyed by ID.
                    example: null
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                visitors:
                    type: object
                    description: Included creators that are not Cycle accounts, keyed by ID.
                    example: null
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                environments:
                    type: object
                    description: Included creators that are Cycle environments (usually automatically created resources), keyed by ID.
                    example: null
                    additionalProperties:
                        $ref: "#/components/schemas/Environment"
                api_keys:
                    type: object
                    description: Included creators that are Cycle API Keys, keyed by ID.
                    example: null
                    additionalProperties:
                        $ref: "#/components/schemas/ApiKeyCreator"
        EnvironmentStartAction:
            title: EnvironmentStartAction
            description: A task to start an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - start
                    description: The name of the action to perform.
        EnvironmentStopAction:
            title: EnvironmentStopAction
            description: A task to stop an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - stop
                    description: The name of the action to perform.
        EnvironmentInitializeAction:
            title: EnvironmentInitializeAction
            description: A task to initialize an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - initialize
                    description: The name of the action to perform.
        EnvironmentReconfigureDeploymentsAction:
            title: EnvironmentReconfigureDeploymentsAction
            description: A task to reconfigure deployment mappings on an environment.
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - deployments.reconfigure
                    description: The action to take.
                contents:
                    type: object
                    required:
                        - tags
                    properties:
                        tags:
                            $ref: "#/components/schemas/EnvironmentDeploymentTags"
        EnvironmentServiceContainerSummary:
            title: EnvironmentServiceContainerSummary
            type: object
            description: An object containing information about a service container associated with this environment.
            required:
                - enable
                - container_id
                - state
                - high_availability
            properties:
                enable:
                    type: boolean
                    description: Whether or not the service is enabled.
                container_id:
                    $ref: "#/components/schemas/ID"
                state:
                    $ref: "#/components/schemas/ContainerState"
                high_availability:
                    type: boolean
                    description: Whether or not the service is deployed in high availability
        EnvironmentSummary:
            title: EnvironmentSummary
            type: object
            description: Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
            required:
                - id
                - state
                - services
                - stats
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                state:
                    $ref: "#/components/schemas/EnvironmentState"
                services:
                    title: EnvironmentServiceSummary
                    type: object
                    description: An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
                    required:
                        - loadbalancer
                        - discovery
                        - vpn
                    properties:
                        loadbalancer:
                            nullable: true
                            $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                        discovery:
                            nullable: true
                            $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                        vpn:
                            nullable: true
                            $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                        scheduler:
                            nullable: true
                            $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                stats:
                    title: EnvironmentSummaryStats
                    type: object
                    description: Statistics about the containers and instances associated with this environment.
                    required:
                        - containers
                        - instances
                    properties:
                        containers:
                            $ref: "#/components/schemas/StateCountSummary"
                        instances:
                            $ref: "#/components/schemas/StateCountSummary"
        Range:
            title: Range
            type: object
            description: A start and end date-time pair indicating a range of time
            required:
                - start
                - end
            properties:
                start:
                    $ref: "#/components/schemas/DateTime"
                end:
                    $ref: "#/components/schemas/DateTime"
        LoadBalancerTelemetryControllerMetrics:
            title: LoadBalancerTelemetryControllerMetrics
            type: object
            required:
                - disconnects
                - connections
                - requests
                - bytes_transmitted
                - bytes_received
            properties:
                disconnects:
                    title: LoadBalancerTelemetryControllerDisconnectsMetrics
                    type: object
                    required:
                        - no_error
                        - request_invalid
                        - timeout_idle
                        - router_none
                        - router_nomatch
                        - destination_unavailable
                        - unknown_error
                    properties:
                        no_error:
                            type: integer
                        request_invalid:
                            type: integer
                        timeout_idle:
                            type: integer
                        router_none:
                            type: integer
                        router_nomatch:
                            type: integer
                        destination_unavailable:
                            type: integer
                        unknown_error:
                            type: integer
                connections:
                    type: integer
                requests:
                    type: integer
                bytes_transmitted:
                    type: integer
                bytes_received:
                    type: integer
        LoadBalancerTelemetryReport:
            title: LoadBalancerTelemetryReport
            description: Aggregated load balancer telemetry across all instances for a given range.
            type: object
            required:
                - created
                - range
                - snapshots
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                range:
                    $ref: "#/components/schemas/Range"
                snapshots:
                    type: array
                    nullable: true
                    items:
                        type: object
                        title: LoadBalancerTelemetryReportMergedSnapshot
                        required:
                            - time
                            - controller
                            - metrics
                        properties:
                            time:
                                $ref: "#/components/schemas/DateTime"
                            controller:
                                $ref: "#/components/schemas/Identifier"
                            metrics:
                                $ref: "#/components/schemas/LoadBalancerTelemetryControllerMetrics"
        LoadBalancerTelemetryRouterMetrics:
            title: LoadBalancerTelemetryRouterMetrics
            type: object
            required:
                - destinations
            properties:
                destinations:
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - connections
                            - requests
                            - instance_id
                            - container_id
                        properties:
                            connections:
                                nullable: true
                                type: object
                                required:
                                    - success
                                    - unavailable
                                properties:
                                    success:
                                        type: integer
                                    unavailable:
                                        type: integer
                                    errors:
                                        type: object
                                        additionalProperties:
                                            type: integer
                                    bytes_transmitted:
                                        type: integer
                                    bytes_received:
                                        type: integer
                            requests:
                                nullable: true
                                type: object
                                required:
                                    - total
                                properties:
                                    total:
                                        type: integer
                                    responses:
                                        type: object
                                        additionalProperties:
                                            type: integer
                                    errors:
                                        type: object
                                        additionalProperties:
                                            type: integer
                            latency_ms:
                                type: array
                                items:
                                    type: integer
                            instance_id:
                                type: string
                            container_id:
                                type: string
        LoadBalancerTelemetryUrlRequestHandler:
            title: LoadBalancerTelemetryUrlRequestHandler
            type: object
            required:
                - hits
                - timing_ms
            properties:
                hits:
                    description: The number of hits to a specific URL handler.
                    type: integer
                timing_ms:
                    description: The cumulative ms of response time across all hits.
                    type: integer
        LoadBalancerTelemetryUrlMetrics:
            title: LoadBalancerTelemetryUrlMetrics
            type: object
            required:
                - destinations
            properties:
                destinations:
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - requests
                        properties:
                            requests:
                                nullable: true
                                type: object
                                required:
                                    - host
                                    - method
                                    - path
                                    - total
                                    - last_hit
                                    - handlers
                                properties:
                                    host:
                                        type: string
                                        description: The host name of the URL request.
                                        example: abc.cycle.io
                                    method:
                                        type: string
                                        description: The HTTP method of the URL request.
                                        example: GET
                                    path:
                                        type: string
                                        description: The path portion of the inbound URL request.
                                        example: /pathname
                                    total:
                                        type: integer
                                        description: The number of requests to a this URL.
                                        example: 11
                                    last_hit:
                                        description: The date of the most recent hit to the URL.
                                        $ref: "#/components/schemas/DateTime"
                                    handlers:
                                        type: object
                                        description: An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
                                        required:
                                            - proxy
                                            - cache
                                            - forward
                                            - redirect
                                        properties:
                                            proxy:
                                                description: Object containing hit count and timing data for proxy responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            cache:
                                                description: Object containing hit count and timing data for cache responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            forward:
                                                description: Object containing hit count and timing data for forward responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            redirect:
                                                description: Object containing hit count and timing data for redirect responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                    responses:
                                        type: object
                                        example:
                                            http:404: 10
                                        description: An object where the key is the response type and the value is the number of hits with that response.
                                        additionalProperties:
                                            type: integer
                                    errors:
                                        type: object
                                        example:
                                            i/o timeout: 1
                                        description: An object where the key is the error type and the value is the number of hits with that error.
                                        additionalProperties:
                                            type: integer
        LoadBalancerTelemetrySnapshot:
            title: LoadBalancerTelemetrySnapshot
            type: object
            required:
                - time
                - dataset_id
                - metrics
            properties:
                time:
                    $ref: "#/components/schemas/DateTime"
                dataset_id:
                    type: integer
                router:
                    $ref: "#/components/schemas/LoadBalancerTelemetryRouterMetrics"
                urls:
                    $ref: "#/components/schemas/LoadBalancerTelemetryUrlMetrics"
                metrics:
                    $ref: "#/components/schemas/LoadBalancerTelemetryControllerMetrics"
        LoadBalancerLatestTelemetryInstance:
            title: LoadBalancerLatestTelemetryInstance
            description: Detailed telemetry for a load balancer instance at a point in time.
            type: object
            required:
                - id
                - hub_id
                - environment_id
                - container_id
                - instance_id
                - server_id
                - cluster
                - time
                - controller
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    $ref: "#/components/schemas/ID"
                container_id:
                    $ref: "#/components/schemas/ID"
                instance_id:
                    $ref: "#/components/schemas/ID"
                server_id:
                    $ref: "#/components/schemas/ID"
                cluster:
                    $ref: "#/components/schemas/Identifier"
                time:
                    $ref: "#/components/schemas/DateTime"
                controller:
                    $ref: "#/components/schemas/Identifier"
                latest:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/LoadBalancerTelemetrySnapshot"
                snapshots:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/LoadBalancerTelemetrySnapshot"
        LoadBalancerLatestTelemetryController:
            title: LoadBalancerLatestTelemetryController
            type: object
            required:
                - time
                - controller
            properties:
                time:
                    $ref: "#/components/schemas/DateTime"
                controller:
                    $ref: "#/components/schemas/Identifier"
                instances:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryInstance"
        LoadBalancerLatestTelemetry:
            title: LoadBalancerLatestTelemetry
            description: Snapshots of the latest load balancer telemetry
            type: object
            required:
                - created
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                controllers:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryController"
        LoadBalancerLatestControllers:
            title: LoadBalancerLatestControllers
            description: Information about the latest controllers that generated traffic.
            type: object
            required:
                - created
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                controllers:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryController"
        ExistingSource:
            title: ExistingSource
            type: object
            description: In a stack, specifies an image source ID from which Cycle will derive any values not specified in the stack file. This is useful for avoiding direct placement of credentials in a stack file, for example.
            properties:
                source_id:
                    $ref: "#/components/schemas/ID"
                    description: The ID of the image source this image should be built from.
        DockerHubOrigin:
            title: DockerHubOrigin
            type: object
            description: An image origin where the image is pulled from DockerHub.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-hub
                details:
                    type: object
                    required:
                        - target
                    properties:
                        existing:
                            allOf:
                                - type: object
                                  nullable: true
                                - $ref: "#/components/schemas/ExistingSource"
                        target:
                            type: string
                            description: The DockerHub target string. ex - `mysql:5.7`
                        username:
                            type: string
                            description: For authentication, a username.
                        token:
                            type: string
                            description: For authentication, a token.
        CredentialsHTTP:
            title: HTTPSourceCredentials
            type: object
            required:
                - type
                - credentials
            properties:
                type:
                    type: string
                    enum:
                        - http
                credentials:
                    type: object
                    description: Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
                    required:
                        - username
                        - password
                    properties:
                        username:
                            type: string
                            description: For authentication, the username.
                        password:
                            type: string
                            description: For authentication, the password.
        CredentialsSSH:
            title: SSHSourceCredentials
            type: object
            required:
                - type
                - credentials
            properties:
                type:
                    type: string
                    enum:
                        - ssh
                credentials:
                    type: object
                    description: Authentication credentials for the Dockerfile image source type when authenticating with SSH.
                    required:
                        - username
                        - passphrase
                        - private_key
                    properties:
                        username:
                            type: string
                            description: The username for the repo service, that is used to authenticate an ssh key.
                        passphrase:
                            type: string
                            description: The passphrase used for the key.
                        private_key:
                            type: string
                            description: A pem encoded private key.
        RepoType:
            title: RepoSourceType
            type: object
            description: Information about the repostiory.
            required:
                - url
            properties:
                url:
                    type: string
                    description: The URL of the repository.
                branch:
                    type: string
                    description: An optional branch arguement.  Default value is `master`.
                auth:
                    type: object
                    nullable: true
                    description: Authentication information for the repository.
                    discriminator:
                        propertyName: type
                        mapping:
                            http: "#/components/schemas/CredentialsHTTP"
                            ssh: "#/components/schemas/CredentialsSSH"
                    oneOf:
                        - $ref: "#/components/schemas/CredentialsHTTP"
                        - $ref: "#/components/schemas/CredentialsSSH"
                ref:
                    type: object
                    nullable: true
                    description: Repository reference information.
                    required:
                        - type
                        - value
                    properties:
                        type:
                            type: string
                            description: The type of reference being used.
                        value:
                            type: string
                            description: The value for the given reference type.
        DockerfileCredentials:
            title: DockerfileCredentails
            description: An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
            type: array
            items:
                type: object
                description: Credentials object used for authentication of indirect resources such as private parent images.
                properties:
                    url:
                        type: string
                        description: The url the resource is located at.
                    username:
                        type: string
                        description: A username for authentication.
                    token:
                        type: string
                        description: A token for authentication.
        DockerFileOrigin:
            title: DockerFileOrigin
            type: object
            description: An image origin where the image is built from a Dockerfile located in a git repository.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-file
                details:
                    type: object
                    properties:
                        existing:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/ExistingSource"
                        repo:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/RepoType"
                        targz_url:
                            type: string
                            nullable: true
                            description: An endpoint that serves the tar file.
                        context_dir:
                            type: string
                            nullable: true
                            description: The path to the directory to use as the context when building the image.
                        build_file:
                            type: string
                            nullable: true
                            description: The path to the Dockerfile to be used for buiding the image.
                        credentials:
                            type: array
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/DockerfileCredentials"
        DockerRegistryOrigin:
            title: DockerRegistryOrigin
            type: object
            description: An image origin where the image is pulled from a private Docker registry.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-registry
                details:
                    type: object
                    required:
                        - target
                        - url
                    properties:
                        existing:
                            $ref: "#/components/schemas/ExistingSource"
                        target:
                            type: string
                            description: The image name on the registry.
                        url:
                            type: string
                            description: The url of the remote registry.
                        username:
                            type: string
                            description: For authentication, a username.
                        token:
                            type: string
                            description: For authentication, a token.
                        password:
                            type: string
                            description: For authentication, a password.
        RegistryAuthUser:
            title: RegistryAuthUser
            description: User/token based credentials for authentication to a third-party image source.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - user
                details:
                    type: object
                    properties:
                        username:
                            type: string
                        token:
                            type: string
        RegistryAuthProvider:
            title: RegistryAuthProvider
            description: Credentials for authentication to a provider-native image registry, such as AWS ECR.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - provider
                details:
                    type: object
                    required:
                        - flavor
                        - credentials
                    properties:
                        flavor:
                            type: string
                            enum:
                                - ecr
                        credentials:
                            title: RegistryAuthProviderCredentials
                            type: object
                            properties:
                                region:
                                    type: string
                                namespace:
                                    type: string
                                api_key:
                                    type: string
                                secret:
                                    type: string
                                subscription_id:
                                    type: string
                                client_id:
                                    type: string
                                config:
                                    type: string
                                    description: A base64'd string of additional configuration options.
        RegistryAuthWebhook:
            title: RegistryAuthWebhook
            description: Webhook-based authentication to the provided URL. This webhook expects to receive a base-64 string that when decoded is in the format `username:password`
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - webhook
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
        RegistryAuth:
            title: RegistryAuth
            type: object
            nullable: true
            description: Authentication details for a third party image registry/source.
            discriminator:
                propertyName: type
                mapping:
                    user: "#/components/schemas/RegistryAuthUser"
                    provider: "#/components/schemas/RegistryAuthProvider"
                    webhook: "#/components/schemas/RegistryAuthWebhook"
            oneOf:
                - $ref: "#/components/schemas/RegistryAuthUser"
                - $ref: "#/components/schemas/RegistryAuthProvider"
                - $ref: "#/components/schemas/RegistryAuthWebhook"
        OciRegistryOrigin:
            title: OciRegistryOrigin
            type: object
            description: An image origin that pulls images fro an OCI-compatible registry. Also used for provider-native registries, such as AWS ECR.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - oci-registry
                details:
                    type: object
                    required:
                        - target
                        - url
                        - auth
                    properties:
                        existing:
                            $ref: "#/components/schemas/ExistingSource"
                        target:
                            type: string
                            description: The image name on the registry.
                        url:
                            type: string
                            description: The url of the remote registry.
                        auth:
                            $ref: "#/components/schemas/RegistryAuth"
        CycleUploadOrigin:
            title: CycleUploadOrigin
            type: object
            description: |
                An image origin where the image is pushed directly to the factory, bypassing the need for a registry or external source.

                In order to utilize this image origin type, a tar file of an OCI compliant image will need to be generated and pushed directly to the factory. The authentication token is generated when this image is created, and expires at the provided time.
                Once you have a token, it can be uploaded as multipart form data under the key `file.tar`, directly to the factory at `https://factory.cycle.io:9414/v1/images/<IMAGE ID>/upload?hub-id=<HUB ID>&token=<TOKEN>`.
            properties:
                type:
                    type: string
                    enum:
                        - cycle-upload
                details:
                    type: object
                    required:
                        - expires
                        - token
                    properties:
                        expires:
                            $ref: "#/components/schemas/DateTime"
                            description: The date-time at which the authorization token for uploading this image expires.
                        token:
                            type: string
                            description: The token that is required by the factory to accept an upload for this image.
        CycleSourceOrigin:
            title: CycleSourceOrigin
            type: object
            description: |
                An image origin that references an image source on Cycle. 

                This origin will never be embedded in an image source. It is for use in stacks, describing an image which is already a part of an image source on Cycle.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cycle-source
                details:
                    type: object
                    required:
                        - source_id
                    properties:
                        source_id:
                            $ref: "#/components/schemas/ID"
                            description: The ID referencing the image source where this image originated.
        NoneOrigin:
            title: NoneOrigin
            type: object
            description: An empty origin. No details are provided for this image.
            required:
                - type
            properties:
                type:
                    type: string
                    enum:
                        - none
                details:
                    type: object
        ImageOrigin:
            title: ImageOrigin
            type: object
            description: The origin of the given image source.
            discriminator:
                propertyName: type
                mapping:
                    docker-hub: "#/components/schemas/DockerHubOrigin"
                    docker-file: "#/components/schemas/DockerFileOrigin"
                    docker-registry: "#/components/schemas/DockerRegistryOrigin"
                    oci-registry: "#/components/schemas/OciRegistryOrigin"
                    cycle-upload: "#/components/schemas/CycleUploadOrigin"
                    cycle-source: "#/components/schemas/CycleSourceOrigin"
                    none: "#/components/schemas/NoneOrigin"
            oneOf:
                - $ref: "#/components/schemas/DockerHubOrigin"
                - $ref: "#/components/schemas/DockerFileOrigin"
                - $ref: "#/components/schemas/DockerRegistryOrigin"
                - $ref: "#/components/schemas/OciRegistryOrigin"
                - $ref: "#/components/schemas/CycleUploadOrigin"
                - $ref: "#/components/schemas/CycleSourceOrigin"
                - $ref: "#/components/schemas/NoneOrigin"
        HybridIdentifier:
            title: HybridIdentifier
            type: string
            description: Either a resource ID (objectid - i.e. 651586fca6078e98982dbd90) or a resource Identifier (human-readable)
            example: my-image-source
        StackSpecContainerImage:
            title: StackSpecContainerImage
            type: object
            required:
                - name
                - origin
            properties:
                name:
                    nullable: true
                    type: string
                origin:
                    $ref: "#/components/schemas/ImageOrigin"
                build:
                    nullable: true
                    type: object
                    required:
                        - args
                    properties:
                        args:
                            type: object
                            additionalProperties:
                                type: string
                builder:
                    type: object
                    nullable: true
                    required:
                        - integration_id
                    properties:
                        integration_id:
                            $ref: "#/components/schemas/HybridIdentifier"
        StackContainerConfigRuntime:
            title: StackContainerConfigRuntime
            type: object
            properties:
                workdir:
                    type: string
                command:
                    type: object
                    properties:
                        path:
                            type: string
                        args:
                            type: string
                environment_vars:
                    type: object
                    additionalProperties:
                        type: string
                namespaces:
                    type: array
                    items:
                        type: string
                        enum:
                            - ipc
                            - pid
                            - uts
                            - network
                            - mount
                            - user
                            - cgroup
                sysctl:
                    type: object
                    additionalProperties:
                        type: string
                rlimits:
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - hard
                            - soft
                        properties:
                            hard:
                                type: integer
                            soft:
                                type: integer
                seccomp:
                    type: object
                    required:
                        - disable
                        - rules
                    properties:
                        disable:
                            type: boolean
                        rules:
                            type: array
                            items:
                                type: object
                                required:
                                    - capabilities
                                    - syscall
                                properties:
                                    capabilities:
                                        type: object
                                        required:
                                            - includes
                                            - excludes
                                        properties:
                                            includes:
                                                type: string
                                            excludes:
                                                type: string
                                    syscall:
                                        type: object
                                        required:
                                            - names
                                            - action
                                        properties:
                                            names:
                                                type: array
                                                items:
                                                    type: string
                                            action:
                                                type: string
                                                enum:
                                                    - SCMP_ACT_KILL
                                                    - SCMP_ACT_KILL_PROCESS
                                                    - SCMP_ACT_KILL_THREAD
                                                    - SCMP_ACT_TRAP
                                                    - SCMP_ACT_ERRNO
                                                    - SCMP_ACT_TRACE
                                                    - SCMP_ACT_ALLOW
                                                    - SCMP_ACT_LOG
                                                    - SCMP_ACT_NOTIFY
                                            errnoRet:
                                                type: integer
                                            args:
                                                type: array
                                                items:
                                                    type: object
                                                    required:
                                                        - index
                                                        - value
                                                        - op
                                                    properties:
                                                        index:
                                                            type: integer
                                                        value:
                                                            type: integer
                                                        valuetwo:
                                                            type: integer
                                                        op:
                                                            type: string
                                                            enum:
                                                                - SCMP_CMP_NE
                                                                - SCMP_CMP_LT
                                                                - SCMP_CMP_LE
                                                                - SCMP_CMP_EQ
                                                                - SCMP_CMP_GE
                                                                - SCMP_CMP_GT
                                                                - SCMP_CMP_MASKED_EQ
                host:
                    nullable: true
                    type: object
                    properties:
                        expose_proc:
                            nullable: true
                            type: boolean
                privileged:
                    type: boolean
                capabilities:
                    type: array
                    items:
                        type: string
                        enum:
                            - CAP_CHOWN
                            - CAP_FSETID
                            - CAP_DAC_OVERRIDE
                            - CAP_FOWNER
                            - CAP_SETFCAP
                            - CAP_SETGID
                            - CAP_SETUID
                            - CAP_KILL
                            - CAP_MKNOD
                            - CAP_NET_BIND_SERVICE
                            - CAP_NET_RAW
                            - CAP_AUDIT_WRITE
                            - CAP_SYS_CHROOT
                            - CAP_SETPCAP
                            - CAP_DAC_READ_SEARCH
                            - CAP_NET_ADMIN
                            - CAP_NET_BROADCAST
                            - CAP_SYS_ADMIN
                            - CAP_SYS_MODULE
                            - CAP_SYS_NICE
                            - CAP_SYS_PACCT
                            - CAP_SYS_PTRACE
                            - CAP_SYS_RAWIO
                            - CAP_SYS_RESOURCE
                            - CAP_SYS_BOOT
                            - CAP_SYS_TIME
                            - CAP_SYS_TTY_CONFIG
                            - CAP_SYSLOG
                            - CAP_AUDIT_CONTROL
                            - CAP_AUDIT_READ
                            - CAP_IPC_LOCK
                            - CAP_IPC_OWNER
                            - CAP_LINUX_IMMUTABLE
                            - CAP_MAC_ADMIN
                            - CAP_MAC_OVERRIDE
                            - CAP_BLOCK_SUSPEND
                            - CAP_LEASE
                            - CAP_WAKE_ALARM
                rootfs:
                    type: object
                    required:
                        - readonly
                    properties:
                        readonly:
                            type: boolean
        StackContainerConfigResources:
            title: StackContainerConfigResources
            type: object
            required:
                - cpu
                - ram
            properties:
                cpu:
                    type: object
                    properties:
                        shares:
                            type: object
                            required:
                                - limit
                                - reserve
                            properties:
                                limit:
                                    type: integer
                                reserve:
                                    type: integer
                        cpus:
                            type: string
                ram:
                    type: object
                    properties:
                        limit:
                            type: string
                        reserve:
                            type: string
                        swappiness:
                            type: number
        StackSpecTestContainer:
            title: StackSpecTestContainer
            type: object
            required:
                - name
                - image
                - config
            properties:
                name:
                    type: string
                image:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/StackSpecContainerImage"
                config:
                    type: object
                    nullable: true
                    properties:
                        runtime:
                            nullable: true
                            type: object
                            allOf:
                                - $ref: "#/components/schemas/StackContainerConfigRuntime"
                        resources:
                            nullable: true
                            type: object
                            allOf:
                                - $ref: "#/components/schemas/StackContainerConfigResources"
        StackSpecScopedVariableUrlSource:
            title: StackSpecScopedVaribaleUrlSource
            type: object
            description: The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of source value, can be either `raw` or `url`.
                    enum:
                        - url
                details:
                    type: object
                    required:
                        - url
                        - headers
                        - auth_token_url
                    properties:
                        url:
                            type: string
                            description: The URL to call to produce the value.
                        headers:
                            type: object
                            description: Additional headers that can be attached to the URL request. Useful for adding metadata to third-party services.
                            additionalProperties: {}
                        auth_token_url:
                            nullable: true
                            type: string
                            description: A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret.
        StackSpecScopedVariableRawSource:
            title: StackSpecScopedVariableRawSource
            type: object
            description: A stack spec resource.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - raw
                details:
                    type: object
                    required:
                        - value
                        - blob
                        - secret
                    properties:
                        value:
                            type: string
                            description: The value of the variable.
                        blob:
                            type: boolean
                            description: A boolean where true represents the text the user is entering will be multi line.
                        secret:
                            nullable: true
                            type: object
                            properties:
                                iv:
                                    type: string
                                    description: A string describing the IV Hex associated with the encryption of the variable
                                hint:
                                    type: string
                                    description: A user specified hint that will suggest what the encryption key might be
        StackSpecScopedVariable:
            title: StackSpecScopedVariable
            type: object
            required:
                - identifier
                - scope
                - access
                - source
            properties:
                identifier:
                    $ref: "#/components/schemas/Identifier"
                scope:
                    type: object
                    required:
                        - containers
                    properties:
                        containers:
                            type: object
                            description: Information about the assignment of the scoped variable to different containers in the environment.
                            required:
                                - global
                            properties:
                                global:
                                    type: boolean
                                    description: A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment.
                                ids:
                                    nullable: true
                                    type: array
                                    description: An array of container IDs, where each container identified will have access to the scoped variable.
                                    items:
                                        type: string
                                identifiers:
                                    nullable: true
                                    type: array
                                    description: An array of container identifiers, where each container identfied will have access to the scoped variable.
                                    items:
                                        type: string
                access:
                    type: object
                    required:
                        - env_variable
                    properties:
                        env_variable:
                            nullable: true
                            type: object
                            required:
                                - key
                            properties:
                                key:
                                    description: The name of the environment variable set on the target container.
                                    type: string
                        internal_api:
                            nullable: true
                            description: If set, this scoped variable will be available over the internal API. Contains settings for accessing this variable over the internal API.
                            type: object
                            properties:
                                duration:
                                    type: string
                                    description: Duration is a time string that the internal API will serve that variable after runtime starts.
                                    nullable: true
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                        file:
                            nullable: true
                            description: File is an object that describes a path to mount the file to inside the container.
                            type: object
                            required:
                                - decode
                                - path
                            x-ogen-properties:
                                decode:
                                    name: DecodeBase64
                            properties:
                                decode:
                                    description: When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before passing it into the container.
                                    type: boolean
                                path:
                                    nullable: true
                                    example: /var/run/cycle/variables/<myVariable>
                                    description: The path to mount the file to inside the container.
                                    type: string
                source:
                    type: object
                    nullable: true
                    description: The source or value of the scoped variable.
                    discriminator:
                        propertyName: type
                        mapping:
                            url: "#/components/schemas/StackSpecScopedVariableUrlSource"
                            raw: "#/components/schemas/StackSpecScopedVariableRawSource"
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecScopedVariableUrlSource"
                        - $ref: "#/components/schemas/StackSpecScopedVariableRawSource"
        StackContainerConfigNetwork:
            title: StackContainerConfigNetwork.yml
            type: object
            required:
                - public
                - hostname
            properties:
                public:
                    type: string
                    enum:
                        - enable
                        - disable
                        - egress-only
                hostname:
                    type: string
                ports:
                    type: array
                    items:
                        type: string
        StackContainerConfigDeploy:
            title: StackContainerConfigDeploy.yml
            type: object
            required:
                - instances
            properties:
                instances:
                    type: integer
                strategy:
                    type: string
                    nullable: true
                    enum:
                        - resource-density
                        - manual
                        - high-availability
                        - first-available
                        - node
                        - edge
                        - function
                stateful:
                    type: object
                    nullable: true
                    required:
                        - options
                    properties:
                        options:
                            nullable: true
                            type: object
                            properties:
                                use_base_hostname:
                                    type: boolean
                                    nullable: true
                constraints:
                    type: object
                    nullable: true
                    properties:
                        node:
                            type: object
                            nullable: true
                            required:
                                - tags
                            properties:
                                tags:
                                    type: object
                                    properties:
                                        any:
                                            type: array
                                            items:
                                                type: string
                                        all:
                                            type: array
                                            items:
                                                type: string
                        secrets:
                            nullable: true
                            type: array
                            items:
                                type: string
                        containers:
                            nullable: true
                            type: array
                            items:
                                type: string
                shutdown:
                    type: object
                    nullable: true
                    properties:
                        graceful_timeout:
                            type: string
                            nullable: true
                            description: How long the platform will wait for a container to stop gracefully.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                        signals:
                            type: array
                            items:
                                type: string
                startup:
                    type: object
                    nullable: true
                    properties:
                        delay:
                            nullable: true
                            type: string
                            description: How long the platform will wait before sending the start signal to the given container.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                update:
                    type: object
                    nullable: true
                    description: Configurations for container updates.
                    properties:
                        stagger:
                            type: string
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            description: When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here).
                restart:
                    type: object
                    nullable: true
                    required:
                        - condition
                        - delay
                        - max_attempts
                    properties:
                        condition:
                            type: string
                            enum:
                                - always
                                - never
                                - failure
                        delay:
                            $ref: "#/components/schemas/Duration"
                            description: How long the platform will wait before trying to restart the container.
                        max_attempts:
                            type: integer
                        notify:
                            type: object
                            nullable: true
                            properties:
                                emails:
                                    type: array
                                    items:
                                        type: string
                                web_hook:
                                    type: string
                health_check:
                    type: object
                    nullable: true
                    required:
                        - command
                        - retries
                        - interval
                        - timeout
                        - restart
                    properties:
                        command:
                            type: string
                            description: The command to run as your health check
                            example: /bin/sh healthcheck.sh
                        retries:
                            type: integer
                            description: The number of times to retry the command before marking an instance unhealthy
                        interval:
                            $ref: "#/components/schemas/Duration"
                            description: How long to wait between running health checks.
                        timeout:
                            $ref: "#/components/schemas/Duration"
                            description: How long before a health check attempt times out.
                        restart:
                            type: boolean
                            description: A boolean where true represents the desire for the container to restart if any instance is unhealthy.
                        delay:
                            type: string
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            description: How long to wait after a container start event before starting health checks.
                telemetry:
                    type: object
                    nullable: true
                    required:
                        - disable
                    properties:
                        retention:
                            type: string
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            description: How long telemetry data should be retained.
                        interval:
                            type: string
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            description: The duration between samples.
                        web_hook:
                            type: string
                            nullable: true
                            description: A URL where Cycle will send telemetry data to.
                        disable:
                            type: boolean
        StackContainerScaleThresholdRam:
            title: StackContainerScaleThresholdRam
            type: object
            description: Describes the RAM threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - ram
                details:
                    type: object
                    required:
                        - used
                    properties:
                        used:
                            type: string
                            description: The limit (maximum) amount of RAM each instance of the given container can use before triggering a scaling event.
                            example: 1G, 2M
        StackContainerScaleThresholdCpu:
            title: StackContainerScaleThresholdCpu
            type: object
            description: Describes the CPU threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cpu
                details:
                    type: object
                    required:
                        - utilization
                    properties:
                        utilization:
                            type: integer
        StackContainerScaleThresholdNetworkConnections:
            title: StackContainerScaleThresholdNetworkConnections
            type: object
            description: Describes the network connections threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-connections
                details:
                    type: object
                    required:
                        - connections_total
                    properties:
                        connections_total:
                            type: integer
        StackContainerScaleThresholdNetworkRequests:
            title: StackContainerScaleThresholdNetworkRequests
            type: object
            description: Describes the network requests threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-requests
                details:
                    type: object
                    required:
                        - requests_total
                    properties:
                        requests_total:
                            type: integer
        StackContainerScaleThresholdNetworkThroughput:
            title: StackContainerScaleThresholdNetworkThroughput
            type: object
            description: Describes the network throughput threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-throughput
                details:
                    type: object
                    required:
                        - private
                        - bandwidth
                    properties:
                        private:
                            type: boolean
                        bandwidth:
                            type: string
                            description: The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event.
                            example: 1G, 2M
        StackContainerScaleThreshold:
            title: StackContainerScaleThreshold
            type: object
            description: Discriminated union describing the different types of scaling threshold and their respective details
            discriminator:
                propertyName: type
                mapping:
                    ram: "#/components/schemas/StackContainerScaleThresholdRam"
                    cpu: "#/components/schemas/StackContainerScaleThresholdCpu"
                    network-connections: "#/components/schemas/StackContainerScaleThresholdNetworkConnections"
                    network-requests: "#/components/schemas/StackContainerScaleThresholdNetworkRequests"
                    network-throughput: "#/components/schemas/StackContainerScaleThresholdNetworkThroughput"
            oneOf:
                - $ref: "#/components/schemas/StackContainerScaleThresholdRam"
                - $ref: "#/components/schemas/StackContainerScaleThresholdCpu"
                - $ref: "#/components/schemas/StackContainerScaleThresholdNetworkConnections"
                - $ref: "#/components/schemas/StackContainerScaleThresholdNetworkRequests"
                - $ref: "#/components/schemas/StackContainerScaleThresholdNetworkThroughput"
        StackContainerConfigScaling:
            title: StackContainerConfigScaling.yml
            type: object
            description: Network configuration for a container.
            required:
                - autoscale_group
                - instances
                - window
                - thresholds
            properties:
                autoscale_group:
                    type: string
                    nullable: true
                    description: The autoscaling group describes which servers should be deployed
                instances:
                    type: object
                    description: Describes how many instances should be running
                    required:
                        - delta
                        - max
                        - max_server
                        - min_ttl
                    properties:
                        delta:
                            type: integer
                            description: Number of additional instances the auto-scaler will add/subtract per scaling event
                        max:
                            type: integer
                            description: Maximum additional instances the auto-scaler will run at any time
                        max_server:
                            type: integer
                            description: Minimum number of instances per server
                        min_ttl:
                            $ref: "#/components/schemas/Duration"
                            description: Minimum amount of time an instance will live
                window:
                    description: Duration in which the auto-scaler will watch for changes
                    $ref: "#/components/schemas/Duration"
                thresholds:
                    description: An array of rules that dictate when a scaling event will be triggered
                    type: array
                    items:
                        $ref: "#/components/schemas/StackContainerScaleThreshold"
        StackContainerConfigIntegrations:
            title: StackContainerConfigIntegrations
            type: object
            properties:
                webhooks:
                    type: object
                    nullable: true
                    properties:
                        events:
                            type: object
                            nullable: true
                            properties:
                                deploy:
                                    nullable: true
                                    type: string
                                start:
                                    nullable: true
                                    type: string
                                stop:
                                    nullable: true
                                    type: string
                        config:
                            nullable: true
                            type: string
                lets_encrypt:
                    type: object
                    nullable: true
                    required:
                        - enable
                    properties:
                        enable:
                            type: boolean
                        certificate_path:
                            nullable: true
                            type: string
                        chain_path:
                            nullable: true
                            type: string
                        key_path:
                            nullable: true
                            type: string
                        bundle_path:
                            nullable: true
                            type: string
                        additional_certs_path:
                            nullable: true
                            type: string
                files:
                    type: array
                    nullable: true
                    items:
                        type: object
                        required:
                            - source
                            - destination
                        properties:
                            source:
                                type: string
                            destination:
                                type: string
                backups:
                    type: object
                    nullable: true
                    required:
                        - destination
                        - backup
                        - restore
                        - retention
                    properties:
                        destination:
                            type: string
                        backup:
                            type: object
                            required:
                                - command
                                - timeout
                                - cron_string
                            properties:
                                command:
                                    type: string
                                timeout:
                                    type: string
                                    nullable: true
                                    description: How long the backup will attempt to run before timing out.
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                                cron_string:
                                    nullable: true
                                    type: string
                        restore:
                            nullable: true
                            type: object
                            required:
                                - command
                                - timeout
                            properties:
                                command:
                                    type: string
                                timeout:
                                    type: string
                                    nullable: true
                                    description: The time in seconds for the restore to attempt to complete before timing out.
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                        retention:
                            type: string
                            nullable: true
                            description: How long the platform will keep backups. Default is 1 year.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            default: 365d
                shared_file_systems:
                    nullable: true
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - writable
                            - mount_point
                        properties:
                            writable:
                                type: boolean
                            mount_point:
                                type: string
        StackContainer:
            title: StackContainer
            type: object
            description: Records defining the containers within the stack.
            additionalProperties:
                type: object
                description: Stacks container object
                required:
                    - name
                    - image
                    - config
                    - stateful
                properties:
                    name:
                        type: string
                    image:
                        $ref: "#/components/schemas/StackSpecContainerImage"
                    annotations:
                        type: object
                        nullable: true
                        description: Additional meta info about the container.
                        additionalProperties: {}
                    stateful:
                        type: boolean
                    config:
                        type: object
                        title: StackSpecContainerConfig
                        required:
                            - network
                            - deploy
                        properties:
                            network:
                                $ref: "#/components/schemas/StackContainerConfigNetwork"
                            deploy:
                                $ref: "#/components/schemas/StackContainerConfigDeploy"
                            scaling:
                                type: object
                                nullable: true
                                allOf:
                                    - $ref: "#/components/schemas/StackContainerConfigScaling"
                            runtime:
                                type: object
                                nullable: true
                                allOf:
                                    - $ref: "#/components/schemas/StackContainerConfigRuntime"
                            resources:
                                type: object
                                nullable: true
                                allOf:
                                    - $ref: "#/components/schemas/StackContainerConfigResources"
                            integrations:
                                type: object
                                nullable: true
                                allOf:
                                    - $ref: "#/components/schemas/StackContainerConfigIntegrations"
                    role:
                        type: string
                        nullable: true
                        enum:
                            - conductor
                    pod:
                        type: string
                        nullable: true
                    volumes:
                        type: array
                        nullable: true
                        items:
                            title: StackSpecContainerVolume
                            type: object
                            required:
                                - destination
                                - read_only
                            properties:
                                local:
                                    type: object
                                    required:
                                        - max_size
                                    properties:
                                        max_size:
                                            type: string
                                        storage_pool:
                                            type: boolean
                                destination:
                                    type: string
                                read_only:
                                    type: boolean
                                remote_access:
                                    type: object
                                    required:
                                        - enable
                                        - password
                                    properties:
                                        enable:
                                            type: boolean
                                        ips:
                                            type: array
                                            items:
                                                type: string
                                        web_hook:
                                            type: string
                                        password:
                                            type: object
                                            required:
                                                - algorigthm
                                                - data
                                            properties:
                                                algorithm:
                                                    type: string
                                                    enum:
                                                        - raw
                                                        - sha512
                                                        - md5
                                                data:
                                                    type: string
                    deprecate:
                        type: boolean
                    lock:
                        type: boolean
        StackSpecLoadBalancerConfig:
            title: StackSpecLoadBalancerConfig
            type: object
            description: The config object for the loadbalancer service.
            discriminator:
                propertyName: type
                mapping:
                    haproxy: "#/components/schemas/HaProxyLbType"
                    v1: "#/components/schemas/V1LbType"
                    default: "#/components/schemas/DefaultLbType"
            oneOf:
                - $ref: "#/components/schemas/HaProxyLbType"
                - $ref: "#/components/schemas/V1LbType"
                - $ref: "#/components/schemas/DefaultLbType"
        StackSpec:
            title: StackSpec
            type: object
            required:
                - version
                - containers
            properties:
                version:
                    type: string
                    description: A string defining the version of the stack spec.
                about:
                    nullable: true
                    type: object
                    description: Information about the stack.
                    required:
                        - description
                        - version
                    properties:
                        version:
                            type: string
                            description: Internal version information set by the user.
                        description:
                            type: string
                            description: Information describing the stack.
                tests:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/StackSpecTestContainer"
                scoped_variables:
                    nullable: true
                    type: array
                    items:
                        $ref: "#/components/schemas/StackSpecScopedVariable"
                containers:
                    $ref: "#/components/schemas/StackContainer"
                services:
                    title: StackSpecServices
                    nullable: true
                    type: object
                    properties:
                        discovery:
                            type: object
                            nullable: true
                            properties:
                                hosts:
                                    nullable: true
                                    type: object
                                    additionalProperties:
                                        type: object
                                        properties:
                                            ipv4:
                                                nullable: true
                                                type: array
                                                items:
                                                    type: string
                                            ipv6:
                                                nullable: true
                                                type: array
                                                items:
                                                    type: string
                        loadbalancer:
                            $ref: "#/components/schemas/StackSpecLoadBalancerConfig"
                        vpn:
                            type: object
                            required:
                                - auth
                                - allow_internet
                            properties:
                                auth:
                                    type: object
                                    required:
                                        - cycle_accounts
                                        - vpn_accounts
                                    properties:
                                        webhook:
                                            type: string
                                        cycle_accounts:
                                            type: boolean
                                        vpn_accounts:
                                            type: boolean
                                allow_internet:
                                    type: boolean
                annotations:
                    type: object
                    description: Additional meta info about the stack.
                    additionalProperties: {}
        StackGitCommit:
            title: StackGitCommit
            type: object
            description: Information about the git commit this stack build was created from.
            required:
                - hash
                - message
                - time
                - author
            properties:
                hash:
                    type: string
                    description: The commit hash for the given stack build.
                message:
                    type: string
                    description: The commit message for the given stack build hash.
                time:
                    description: The time the commit was made.
                    $ref: "#/components/schemas/DateTime"
                author:
                    type: object
                    description: Inforamtion about the author of the commit.
                    required:
                        - name
                        - email
                    properties:
                        name:
                            type: string
                            description: The commit authors name.
                        email:
                            type: string
                            description: The commit authors email address.
        StackBuildInstructions:
            title: StackBuildInstructions
            x-ogen-name: StackBuildInstructionsDetails
            type: object
            description: Additional instructions used when generating this stack build.
            properties:
                git:
                    type: object
                    description: Git information specifics.
                    required:
                        - type
                        - value
                    properties:
                        type:
                            type: string
                            description: The type of information the user is passing.
                            enum:
                                - hash
                                - tag
                                - branch
                        value:
                            type: string
                            description: The actual value to be passed.
                variables:
                    type: object
                    description: Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map.
                    additionalProperties:
                        type: string
        StackBuildState:
            title: StackBuildState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the stack build.
                          type: string
                          enum:
                              - new
                              - importing
                              - building
                              - verifying
                              - saving
                              - live
                              - deploying
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StackBuildMeta:
            title: StackBuildMeta
            type: object
            description: A list of meta fields that can be applied to a stack build.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
        StackBuild:
            title: StackBuild
            type: object
            description: A stack build resource.
            required:
                - id
                - hub_id
                - stack_id
                - about
                - instructions
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                stack_id:
                    type: string
                    description: An identifier for the stack related to this build.
                spec:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/StackSpec"
                about:
                    x-ogen-name: StackBuildAboutDetails
                    type: object
                    description: Information about the stack build.
                    required:
                        - version
                        - description
                    properties:
                        version:
                            type: string
                            description: Information about the version of the stack.
                        description:
                            type: string
                            description: Information describing the stack
                        git_commit:
                            $ref: "#/components/schemas/StackGitCommit"
                instructions:
                    $ref: "#/components/schemas/StackBuildInstructions"
                events:
                    title: StackBuildEvents
                    type: object
                    description: A collection of timestamps for each event in the stack build's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the stack build was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the stack build was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the stack build was deleted.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/StackBuildState"
                meta:
                    $ref: "#/components/schemas/StackBuildMeta"
        StackBuildIncludes:
            title: StackBuildInclude
            description: A resource thats associated with a stack build.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/StackBuild"
        StackRepoSource:
            title: StackRepoSource
            type: object
            description: A repo source type for a stack.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - git-repo
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
                            description: The URL of the repository.
                        branch:
                            type: string
                            description: An optional branch arguement.  Default value is `master`.
                        auth:
                            type: object
                            description: Authentication information for the repository.
                            discriminator:
                                propertyName: type
                                mapping:
                                    http: "#/components/schemas/CredentialsHTTP"
                                    ssh: "#/components/schemas/CredentialsSSH"
                            oneOf:
                                - $ref: "#/components/schemas/CredentialsHTTP"
                                - $ref: "#/components/schemas/CredentialsSSH"
                        ref:
                            type: object
                            description: Repository reference information.
                            required:
                                - type
                                - value
                            properties:
                                type:
                                    type: string
                                    description: The type of reference being used.
                                value:
                                    type: string
                                    description: The value for the given reference type.
        StackRawSource:
            title: StackRawSource
            type: object
            description: A stack spec resource.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - raw
                details:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/StackSpec"
        StackSource:
            title: StackSource
            type: object
            description: A source for a stack to be created from.
            discriminator:
                propertyName: type
                mapping:
                    git-repo: "#/components/schemas/StackRepoSource"
                    raw: "#/components/schemas/StackRawSource"
            oneOf:
                - $ref: "#/components/schemas/StackRepoSource"
                - $ref: "#/components/schemas/StackRawSource"
        StackState:
            title: StackState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the stack.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StackMeta:
            title: StackMeta
            type: object
            description: A list of meta fields that can be applied to this stack.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
                builds_count:
                    $ref: "#/components/schemas/StateCountSummary"
        Stack:
            title: Stack
            type: object
            description: Stacks are a way to orchestrate multiple containers atomically and automatically.
            required:
                - id
                - identifier
                - name
                - hub_id
                - creator
                - source
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this stack.
                name:
                    type: string
                    description: A user defined name for the stack resource.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/UserScope"
                source:
                    $ref: "#/components/schemas/StackSource"
                state:
                    $ref: "#/components/schemas/StackState"
                variables:
                    type: object
                    description: A map of default variable values used when building this stack. A variable can be added anywhere in a stack using the format `{{var}}` where `var` would be a key in this map.
                    additionalProperties:
                        type: string
                events:
                    title: StackEvents
                    type: object
                    description: A collection of timestamps for each event in the Stacks lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_build
                    properties:
                        created:
                            description: The timestamp of when the stack was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the stack was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the stack was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_build:
                            description: The timestamp for the last build of the stack.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/StackMeta"
        StackIncludes:
            title: StackIncludes
            description: A resource associated with a stack.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Stack"
        ImageSourceType:
            title: ImageSourceType
            type: string
            description: The type of images in this source.
            enum:
                - stack-build
                - direct
                - bucket
        ImageSourceAbout:
            title: ImageSourceAbout
            type: object
            description: Information about the image source resource.
            properties:
                description:
                    nullable: true
                    type: string
                    description: Some information about the image source resource.
        ImageSourceState:
            title: ImageSourceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the image source.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ImageSourceMeta:
            title: ImageSourceMeta
            type: object
            description: A list of meta fields that can be applied to this environment.
            properties:
                images_count:
                    type: object
                    required:
                        - state
                        - total
                    properties:
                        total:
                            description: Number of image sources
                            type: number
                        state:
                            type: object
                            required:
                                - new
                                - downloading
                                - building
                                - verifying
                                - saving
                                - live
                                - deleting
                            properties:
                                new:
                                    description: Number of images in this source with state new
                                    type: number
                                downloading:
                                    description: Number of images in this source with state downloading
                                    type: number
                                building:
                                    description: Number of images in this source with state building
                                    type: number
                                verifying:
                                    description: Number of images in this source with state verifying
                                    type: number
                                saving:
                                    description: Number of images in this source with state saving
                                    type: number
                                live:
                                    description: Number of images in this source with state live
                                    type: number
                                deleting:
                                    description: Number of images in this source with state deleting
                                    type: number
        ImageSource:
            title: ImageSource
            type: object
            description: An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
            required:
                - id
                - type
                - identifier
                - name
                - origin
                - hub_id
                - state
                - events
                - creator
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this image source.
                type:
                    $ref: "#/components/schemas/ImageSourceType"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A name for the image source resource.
                about:
                    $ref: "#/components/schemas/ImageSourceAbout"
                origin:
                    $ref: "#/components/schemas/ImageOrigin"
                builder:
                    type: object
                    nullable: true
                    description: Configuration options regarding the builder used to create/import Images using this Image Source.
                    properties:
                        integration_id:
                            nullable: true
                            description: The ID or Identifier of the Integration used to do the build.
                            $ref: "#/components/schemas/HybridIdentifier"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    $ref: "#/components/schemas/ImageSourceState"
                events:
                    title: ImageSourceEvents
                    type: object
                    description: A collection of timestamps for each event in the image source's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image source was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image source was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image source was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ImageSourceMeta"
        ImageSourceIncludes:
            title: ImageSourceIncludes
            description: A resource associated with an image source.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ImageSource"
        controllers:
            title: LoadBalancerLatestControllersIncludes
            description: Optionally included resources for load balancer controllers
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                sources:
                    $ref: "#/components/schemas/ImageSourceIncludes"
        VPNInfoReturn:
            title: VPNInfo
            type: object
            description: A summary of a VPN service for a given environment.
            required:
                - url
                - service
            properties:
                url:
                    type: string
                    description: A url associated with the VPN service.
                service:
                    $ref: "#/components/schemas/VpnEnvironmentService"
        VPNLogin:
            title: VPNLogin
            type: object
            description: A VPN login event record.
            required:
                - id
                - username
                - environment_id
                - ip
                - time
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                username:
                    type: string
                    description: The username used when logging in.
                environment_id:
                    type: string
                    description: The ID of the environment the VPN service is in.
                ip:
                    type: string
                    description: The IP address of the machine the user has logged in from.
                time:
                    description: The timestamp for when the login occured.
                    $ref: "#/components/schemas/DateTime"
                success:
                    type: boolean
                    description: A boolean where true means the login attempt was successful.
        VPNUsers:
            title: VPNUser
            type: object
            description: A VPN user for a given VPN.
            required:
                - id
                - username
                - creator
                - last_login
                - hub_id
                - environment_id
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                username:
                    type: string
                    description: The username for the login.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                last_login:
                    description: A timestamp of the last time the user logged into the VPN.
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    type: string
                    description: An identifier for the environment the VPN service is associated with.
                events:
                    title: VPNUserEvents
                    type: object
                    description: A collection of timestamps for each event in the VPN user's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the VPN user was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the VPN user was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the VPN user was deleted.
                            $ref: "#/components/schemas/DateTime"
        VpnResetTask:
            title: VpnResetTask
            description: This will reset the VPN certificates and restart the container. Should be done when the certificates expire, every 1000 days. Then, you will need to redownload the VPN config in order to connect.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - reset
                    description: The name of the action to perform.
        VpnReconfigureTask:
            title: VpnReconfigureTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reconfigure
                    description: The action to take.
                contents:
                    type: object
                    description: Additional information the platform needs to create this job.
                    properties:
                        enable:
                            type: boolean
                            description: A boolean where true means the VPN service is enabled.
                        high_availability:
                            nullable: true
                            type: boolean
                            description: A boolean where `true` represents the desire to run the environment vpn service in high availability mode.
                        auto_update:
                            nullable: true
                            type: boolean
                            description: A boolean representing if this service container is set to autoupdate or not
                        config:
                            type: object
                            nullable: true
                            description: The config object for the VPN service, in this case without the required fields normally found in a VPN config object.
                            properties:
                                allow_internet:
                                    type: boolean
                                    description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                                auth:
                                    type: object
                                    description: Auth configuration for the VPN.
                                    required:
                                        - webhook
                                        - cycle_accounts
                                    properties:
                                        webhook:
                                            type: string
                                            nullable: true
                                            description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                                        cycle_accounts:
                                            type: boolean
                                            description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                                        vpn_accounts:
                                            type: boolean
                                            description: If true, allows the custom VPN accounts to log in to the VPN.
        InstanceTelemetryPoint:
            title: InstanceTelemetryPoint
            description: A point-in-time snapshot of a count of instances by state.
            required:
                - time
                - instances
            type: object
            properties:
                time:
                    description: A timestamp for when the data was collected.
                    $ref: "#/components/schemas/DateTime"
                instances:
                    description: Records for instance state and number of instances in that state.
                    type: object
                    additionalProperties:
                        type: integer
        ScopedVariableScope:
            title: ScopedVariableScope
            type: object
            description: Information about the assignment of the scoped variable and how it is invoked.
            required:
                - containers
            properties:
                containers:
                    type: object
                    description: Information about the assignment of the scoped variable to different containers in the environment.
                    required:
                        - global
                        - ids
                        - identifiers
                    properties:
                        global:
                            type: boolean
                            description: A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment.
                        ids:
                            type: array
                            description: An array of container IDs, where each container identified will have access to the scoped variable.
                            items:
                                type: string
                        identifiers:
                            type: array
                            description: An array of container identifiers, where each container identfied will have access to the scoped variable.
                            items:
                                type: string
        ScopedVariableAccess:
            title: ScopedVariableAccess
            type: object
            description: The way the scoped variable is accessed.
            properties:
                env_variable:
                    nullable: true
                    type: object
                    required:
                        - key
                    properties:
                        key:
                            description: The name of the environment variable set on the target container.
                            type: string
                    description: When set to true, this scoped variable is set as an environment variable inside the container.
                internal_api:
                    nullable: true
                    description: If set, this scoped variable will be available over the internal API. Contains settings for accessing this variable over the internal API.
                    type: object
                    properties:
                        duration:
                            type: string
                            description: Duration is a time string that the internal API will serve that variable after runtime starts.
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                file:
                    nullable: true
                    description: File is an object that describes a path to mount the file to inside the container.
                    type: object
                    x-ogen-properties:
                        decode:
                            name: DecodeBase64
                    required:
                        - decode
                        - path
                    properties:
                        decode:
                            description: When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before passing it into the container.
                            type: boolean
                        path:
                            nullable: true
                            example: /var/run/cycle/variables/<myVariable>
                            description: The path to mount the file to inside the container.
                            type: string
        URLSource:
            title: URLScopedVariableSource
            type: object
            description: The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of source value, can be either `raw` or `url`.
                    enum:
                        - url
                details:
                    type: object
                    required:
                        - url
                        - headers
                        - auth_token_url
                    properties:
                        url:
                            type: string
                            description: The URL to call to produce the value.
                        headers:
                            type: object
                            description: Additional headers that can be attached to the URL request. Useful for adding metadata to third-party services.
                            additionalProperties: {}
                        auth_token_url:
                            nullable: true
                            type: string
                            description: A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret.
        RawSource:
            title: RawScopedVariableSource
            type: object
            description: The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is static, not the result of a call to an external or internal URL.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of source value, can be either `raw` or `url`.
                    enum:
                        - raw
                details:
                    type: object
                    required:
                        - value
                        - blob
                    properties:
                        value:
                            type: string
                            description: The value of the variable.
                        blob:
                            type: boolean
                            description: A boolean where true represents the text the user is entering will be multi line.
                        secret:
                            nullable: true
                            type: object
                            properties:
                                iv:
                                    type: string
                                    description: A string describing the IV Hex associated with the encryption of the variable
                                hint:
                                    nullable: true
                                    type: string
                                    description: A user specified hint that will suggest what the encryption key might be
        ScopedVariableState:
            title: ScopedVariableState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the scoped variable.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ScopedVariable:
            title: ScopedVariable
            type: object
            description: Scoped variables are a way for users to dynamically allocate runtime specific environment variables across any number of containers in an environment.
            required:
                - id
                - creator
                - hub_id
                - environment_id
                - identifier
                - scope
                - source
                - access
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    type: string
                    description: An identifier used to reference the environment this resource is scoped to.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                scope:
                    $ref: "#/components/schemas/ScopedVariableScope"
                access:
                    $ref: "#/components/schemas/ScopedVariableAccess"
                source:
                    nullable: true
                    type: object
                    description: The source or value of the scoped variable.
                    discriminator:
                        propertyName: type
                        mapping:
                            url: "#/components/schemas/URLSource"
                            raw: "#/components/schemas/RawSource"
                    oneOf:
                        - $ref: "#/components/schemas/URLSource"
                        - $ref: "#/components/schemas/RawSource"
                state:
                    $ref: "#/components/schemas/ScopedVariableState"
                events:
                    title: ScopedVariableEvents
                    type: object
                    description: A collection of timestamps for each event in the Scoped Variable's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the scoped variable was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the scoped variable was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the scoped variable was deleted.
                            $ref: "#/components/schemas/DateTime"
        ImageSummary:
            title: ContainerImageSummary
            description: A summary of the image this container was created from.
            type: object
            required:
                - id
                - service
                - extension
            properties:
                id:
                    type: string
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/ID"
                extension:
                    type: object
                    description: An image that is packaged with Cycle directly, such as the global load balancer.
                    nullable: true
                    required:
                        - identifier
                    properties:
                        identifier:
                            $ref: "#/components/schemas/Identifier"
                service:
                    type: string
                    nullable: true
                    description: If a service container, the identifier specifying which service it is.
                    enum:
                        - loadbalancer
                        - discovery
                        - vpn
        StackSummary:
            title: ContainerStackSummary
            description: A summary of the stack this container was created format.
            type: object
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                image:
                    type: object
                    properties:
                        id:
                            type: string
                            description: The ID of the image used for this container.
                build_id:
                    type: string
                    description: The ID of the stack build this container is associated with.
                identifier:
                    type: string
                    description: The container identifier, usually the key to the container section of a stack file.
        ContainerNetwork:
            title: ContainerNetwork
            type: object
            description: Network configuration for a container.
            required:
                - public
                - hostname
            properties:
                public:
                    type: string
                    description: The public network settings for the given container
                    enum:
                        - enable
                        - egress-only
                        - disable
                hostname:
                    type: string
                    description: The hostname for the given container.
                ports:
                    type: array
                    items:
                        type: string
                    description: An array of port mappings for the container.
        DeploymentStrategyName:
            title: DeploymentStrategyName
            type: string
            enum:
                - resource-density
                - high-availability
                - first-available
                - node
                - edge
                - manual
                - function
        ContainerDeploy:
            title: ContainerDeploy
            type: object
            description: Deployment configuration for the given container.
            required:
                - instances
            properties:
                instances:
                    type: integer
                    description: The number of initial desired instances for a given container.
                strategy:
                    $ref: "#/components/schemas/DeploymentStrategyName"
                    description: The deployment strategy to use when scaling the given container.
                stateful:
                    type: object
                    properties:
                        options:
                            type: object
                            nullable: true
                            properties:
                                use_base_hostname:
                                    type: boolean
                                    nullable: true
                constraints:
                    type: object
                    description: Settings that give more granular control over deployment targets and conditions.
                    properties:
                        node:
                            type: object
                            description: Constraint settings related to which nodes an instance can be deployed to.
                            required:
                                - tags
                            properties:
                                tags:
                                    type: object
                                    description: Lists of server tags that formally declair servers that match the criteria for deployment.
                                    properties:
                                        any:
                                            type: array
                                            items:
                                                type: string
                                            description: A list of tags where a server matching any tags from the list is qualified as a deployment target.
                                        all:
                                            type: array
                                            items:
                                                type: string
                                            description: A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target.
                        secrets:
                            type: array
                            items:
                                type: string
                shutdown:
                    type: object
                    description: Configuration for what to do during container shutdown.
                    properties:
                        graceful_timeout:
                            type: string
                            nullable: true
                            description: How long the platform will wait for a container to stop gracefully.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                        signals:
                            type: array
                            nullable: true
                            items:
                                type: string
                                enum:
                                    - SIGTERM
                                    - SIGINT
                                    - SIGUSR1
                                    - SIGUSR2
                                    - SIGHUP
                                    - SIGQUIT
                            description: Process signal sent to the container process.
                startup:
                    type: object
                    description: Configurations for container startup.
                    properties:
                        delay:
                            $ref: "#/components/schemas/Duration"
                            description: How long the platform will wait before sending the start signal to the given container.
                update:
                    type: object
                    description: Configurations for container updates.
                    properties:
                        stagger:
                            $ref: "#/components/schemas/Duration"
                            description: When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here).
                restart:
                    type: object
                    description: Configurations for container restart events.
                    required:
                        - condition
                        - delay
                        - max_attempts
                    properties:
                        condition:
                            type: string
                            description: Policy for what should happen in the event of a container dying.
                            enum:
                                - always
                                - never
                                - failure
                        delay:
                            $ref: "#/components/schemas/Duration"
                            description: How long the platform will wait before trying to restart the container.
                        max_attempts:
                            type: integer
                            description: The amount of times the platform will attempt the restart policies.
                health_check:
                    type: object
                    description: Configuration for determining the health of a container.
                    required:
                        - command
                        - retries
                        - delay
                        - interval
                        - timeout
                        - restart
                    properties:
                        command:
                            type: string
                            description: The command that will be run to verify the health of the container.
                        retries:
                            type: integer
                            description: The number of times the platform will retry the command before marking the container unhealthy.
                        delay:
                            type: string
                            nullable: true
                            description: How long to wait before performing an initial health check when the instance starts. The `state.health.healthy` field of the instance will be `null`` until the first check is performed.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                        interval:
                            $ref: "#/components/schemas/Duration"
                            description: How long to wait between restarts.
                        timeout:
                            $ref: "#/components/schemas/Duration"
                            description: How long before a health check attempt times out.
                        restart:
                            type: boolean
                            description: A boolean where `true` represents the desire for a container to restart if unhealthy.
                telemetry:
                    type: object
                    description: Configuration settings for container telemetery reporting.
                    required:
                        - retention
                        - interval
                        - disable
                    properties:
                        retention:
                            $ref: "#/components/schemas/Duration"
                            description: How long telemetry data should be retained.
                        interval:
                            $ref: "#/components/schemas/Duration"
                            description: The duration between samples.
                        disable:
                            type: boolean
                            description: A boolean where true disables all telemetry reporting for this container.
                        web_hook:
                            type: string
                            description: An endpoint to report the telemetry data to.
        ScaleThresholdMetricRam:
            title: ScaleThresholdMetricRam
            type: object
            description: Describes the RAM threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - ram
                details:
                    type: object
                    required:
                        - used
                    properties:
                        used:
                            type: string
                            description: The limit (maximum) amount of RAM each instance of the given container can use before triggering a scaling event.
                            example: 1G, 2M
        ScaleThresholdMetricCpu:
            title: ScaleThresholdMetricCpu
            type: object
            description: Describes the CPU threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cpu
                details:
                    type: object
                    required:
                        - utilization
                    properties:
                        utilization:
                            type: integer
        ScaleThresholdMetricNetworkConnections:
            title: ScaleThresholdMetricNetworkConnections
            type: object
            description: Describes the network connections threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-connections
                details:
                    type: object
                    required:
                        - connections_total
                    properties:
                        connections_total:
                            type: integer
        ScaleThresholdMetricNetworkRequests:
            title: ScaleThresholdMetricNetworkRequests
            type: object
            description: Describes the network requests threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-requests
                details:
                    type: object
                    required:
                        - requests_total
                    properties:
                        requests_total:
                            type: integer
        ScaleThresholdMetricNetworkThroughput:
            title: ScaleThresholdMetricNetworkThroughput
            type: object
            description: Describes the network throughput threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-throughput
                details:
                    type: object
                    required:
                        - private
                        - bandwidth
                    properties:
                        private:
                            type: boolean
                        bandwidth:
                            type: string
                            description: The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event.
                            example: 1G, 2M
        ScaleThresholdMetric:
            title: ScaleThresholdMetric
            type: object
            description: Discriminated union describing the different types of scaling threshold and their respective details
            discriminator:
                propertyName: type
                mapping:
                    ram: "#/components/schemas/ScaleThresholdMetricRam"
                    cpu: "#/components/schemas/ScaleThresholdMetricCpu"
                    network-connections: "#/components/schemas/ScaleThresholdMetricNetworkConnections"
                    network-requests: "#/components/schemas/ScaleThresholdMetricNetworkRequests"
                    network-throughput: "#/components/schemas/ScaleThresholdMetricNetworkThroughput"
            oneOf:
                - $ref: "#/components/schemas/ScaleThresholdMetricRam"
                - $ref: "#/components/schemas/ScaleThresholdMetricCpu"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkConnections"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkRequests"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkThroughput"
        ContainerScale:
            title: ContainerScale
            type: object
            description: Network configuration for a container.
            required:
                - autoscale_group
                - instances
                - window
                - thresholds
            properties:
                autoscale_group:
                    type: string
                    nullable: true
                    description: The autoscaling group describes which servers should be deployed
                instances:
                    type: object
                    description: Describes how many instances should be running
                    required:
                        - delta
                        - max
                        - max_server
                        - min_ttl
                    properties:
                        delta:
                            type: integer
                            description: Number of additional instances the auto-scaler will add/subtract per scaling event
                        max:
                            type: integer
                            description: Maximum additional instances the auto-scaler will run at any time
                        max_server:
                            type: integer
                            description: Minimum number of instances per server
                        min_ttl:
                            $ref: "#/components/schemas/Duration"
                            description: Minimum amount of time an instance will live
                window:
                    description: Duration in which the auto-scaler will watch for changes
                    $ref: "#/components/schemas/Duration"
                thresholds:
                    description: An array of rules that dictate when a scaling event will be triggered
                    type: array
                    items:
                        $ref: "#/components/schemas/ScaleThresholdMetric"
        SeccompRule:
            title: SeccompRule
            description: Rules for controlling Linux seccomp inside a container.
            type: object
            properties:
                capabilities:
                    type: object
                    properties:
                        includes:
                            type: string
                        excludes:
                            type: string
                syscall:
                    type: object
                    description: LinuxSyscall is used to match a syscall in Seccomp
                    required:
                        - names
                        - action
                    properties:
                        names:
                            type: array
                            items:
                                type: string
                        action:
                            type: string
                        errnoRet:
                            type: integer
                        args:
                            type: array
                            items:
                                type: object
                                required:
                                    - index
                                    - value
                                    - op
                                properties:
                                    index:
                                        type: integer
                                    value:
                                        type: integer
                                    valueTwo:
                                        type: integer
                                    op:
                                        type: string
        ContainerRuntime:
            title: ContainerRuntime
            type: object
            description: Runtime configurations for a given container.
            required:
                - privileged
            properties:
                command:
                    type: object
                    nullable: true
                    description: A command that will be run in place of the images defined startup command.
                    properties:
                        path:
                            type: string
                            nullable: true
                            description: System path for the command.
                        args:
                            type: string
                            nullable: true
                            description: Arguments to pass to the command.
                namespaces:
                    type: array
                    items:
                        type: string
                        enum:
                            - ipc
                            - pid
                            - uts
                            - network
                            - mount
                            - user
                            - cgroup
                    description: Namespaces the given container will have access to.
                environment_vars:
                    type: object
                    description: A record of environment variables for the given container.
                    additionalProperties:
                        type: string
                privileged:
                    type: boolean
                    description: Selecting this option will give this container full permissions on the server. This is not recommended and increases the likelihood of your server being compromised.
                capabilities:
                    type: array
                    items:
                        type: string
                        enum:
                            - CAP_CHOWN
                            - CAP_FSETID
                            - CAP_DAC_OVERRIDE
                            - CAP_FOWNER
                            - CAP_SETFCAP
                            - CAP_SETGID
                            - CAP_SETUID
                            - CAP_KILL
                            - CAP_MKNOD
                            - CAP_NET_BIND_SERVICE
                            - CAP_NET_RAW
                            - CAP_AUDIT_WRITE
                            - CAP_SYS_CHROOT
                            - CAP_SETPCAP
                            - CAP_DAC_READ_SEARCH
                            - CAP_NET_ADMIN
                            - CAP_NET_BROADCAST
                            - CAP_SYS_ADMIN
                            - CAP_SYS_MODULE
                            - CAP_SYS_NICE
                            - CAP_SYS_PACCT
                            - CAP_SYS_PTRACE
                            - CAP_SYS_RAWIO
                            - CAP_SYS_RESOURCE
                            - CAP_SYS_BOOT
                            - CAP_SYS_TIME
                            - CAP_SYS_TTY_CONFIG
                            - CAP_SYSLOG
                            - CAP_AUDIT_CONTROL
                            - CAP_AUDIT_READ
                            - CAP_IPC_LOCK
                            - CAP_IPC_OWNER
                            - CAP_LINUX_IMMUTABLE
                            - CAP_MAC_ADMIN
                            - CAP_MAC_OVERRIDE
                            - CAP_BLOCK_SUSPEND
                            - CAP_LEASE
                            - CAP_WAKE_ALARM
                    description: A list of linux kernel capabilites for the given container.
                workdir:
                    type: string
                    description: Configure the working directory for the given container.
                sysctl:
                    type: object
                    description: A record of sysctl fields and values for a given container.
                    additionalProperties:
                        type: string
                rlimits:
                    type: object
                    description: A record of rlimits and their values.
                    additionalProperties:
                        type: object
                        properties:
                            hard:
                                type: integer
                                description: The hard limit for the rlimit.
                            soft:
                                type: integer
                                description: The soft limit for the rlimit.
                seccomp:
                    nullable: true
                    type: object
                    properties:
                        disable:
                            type: boolean
                        rules:
                            type: array
                            items:
                                $ref: "#/components/schemas/SeccompRule"
                host:
                    nullable: true
                    type: object
                    properties:
                        expose_proc:
                            nullable: true
                            type: boolean
                rootfs:
                    type: object
                    properties:
                        readonly:
                            description: Enabling this option will set the containers filesystem to readonly. Volumes associated with the container will not be affected by this.
                            type: boolean
        ContainerResources:
            title: ContainerResources
            type: object
            description: Configuration settings for the resource allocations and limits of a given container.
            required:
                - cpu
                - ram
            properties:
                cpu:
                    type: object
                    description: Configurations settings related to CPU usage.
                    properties:
                        shares:
                            type: object
                            description: A share represents 1/10th of the available compute time on a single thread.
                            required:
                                - limit
                                - reserve
                            properties:
                                limit:
                                    type: integer
                                    description: The limit (maximum) amount of shares each instance of a container can use.
                                reserve:
                                    type: integer
                                    description: The reserve (allocation) number of shares for each instance of a given container.
                        cpus:
                            type: string
                ram:
                    type: object
                    description: Configuration settings for limits and reserves of RAM resources for the given container.
                    properties:
                        limit:
                            type: string
                            description: The limit (maximum) amount of RAM each instance of the given container can use.
                            example: 1G, 2M
                        reserve:
                            type: string
                            description: The reserve (allocation) of RAM given to each instance of the container.
        ContainerIntegrations:
            title: ContainerIntegrations
            type: object
            description: Configuration settings for integrations with a given container.
            properties:
                webhooks:
                    type: object
                    description: Webhooks that can be set for specific event reporting and advanced container configurations.
                    properties:
                        events:
                            type: object
                            description: Container events that can be configured to report to a webhook.
                            properties:
                                deploy:
                                    type: string
                                    description: A webhook to hit when a container deploy event happens.
                                start:
                                    type: string
                                    description: A webhook to hit when a container start event happens.
                                stop:
                                    type: string
                                    description: A webhook to hit when a container stop event happens.
                        config:
                            type: string
                            description: An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations.
                files:
                    type: array
                    description: Inject remotely hosted files into container instances at runtime.
                    items:
                        type: object
                        description: These objects are sources and destinations for the given files.
                        required:
                            - source
                            - destination
                        properties:
                            source:
                                type: string
                                description: The http endpoint that is hosting the files to be used.
                            destination:
                                type: string
                                description: The path in the container for these files to be injected.
                lets_encrypt:
                    type: object
                    description: Configuration settings to embed a TLS certificate in the container.
                    required:
                        - enable
                    properties:
                        enable:
                            type: boolean
                            description: A boolean where true represents the desire for a container to have its corresponding TLS certificate(s) injected into the configured path(s).
                        certificate_path:
                            type: string
                            description: Path where the `certificate.cert` will be saved.
                        chain_path:
                            type: string
                            description: Path where the `certificate.chain` will be saved.
                        key_path:
                            type: string
                            description: Path where the `certificate.key` will be saved.
                        bundle_path:
                            type: string
                            description: Path where the `certificate.bundle` will be saved.
                        additional_certs_path:
                            type: string
                            description: File path where any remaining certificate files will be stored.
                backups:
                    type: object
                    description: Automated backups configuration for the given container.
                    required:
                        - destination
                        - backup
                        - restore
                        - retention
                    properties:
                        integration_id:
                            $ref: "#/components/schemas/HybridIdentifier"
                        backup:
                            type: object
                            description: Configuration settings for each backup.
                            required:
                                - command
                            properties:
                                command:
                                    type: string
                                    description: The command to run for the backup.
                                timeout:
                                    type: string
                                    nullable: true
                                    description: How long the backup will attempt to run before timing out.
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                                cron_string:
                                    type: string
                                    description: A cron string that configures how often the backup will run.
                        restore:
                            type: object
                            description: Configuration settings for restoring from a backup.
                            nullable: true
                            required:
                                - command
                            properties:
                                command:
                                    type: string
                                    description: The command to run for restoring from a backup.
                                timeout:
                                    type: string
                                    nullable: true
                                    description: The time in seconds for the restore to attempt to complete before timing out.
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                        retention:
                            type: string
                            nullable: true
                            description: How long the platform will keep backups. Default is 1 year.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
                            default: 365d
                shared_file_systems:
                    nullable: true
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - writable
                            - mount_point
                        properties:
                            writable:
                                type: boolean
                            mount_point:
                                type: string
        Config:
            title: ContainerConfig
            description: A container configuration.
            type: object
            required:
                - network
                - deploy
            properties:
                network:
                    $ref: "#/components/schemas/ContainerNetwork"
                deploy:
                    $ref: "#/components/schemas/ContainerDeploy"
                scale:
                    $ref: "#/components/schemas/ContainerScale"
                runtime:
                    $ref: "#/components/schemas/ContainerRuntime"
                resources:
                    $ref: "#/components/schemas/ContainerResources"
                integrations:
                    $ref: "#/components/schemas/ContainerIntegrations"
        Deployment:
            title: Deployment
            description: |
                A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments by separating multiple versions of the same application within an environment.

                If a container is a member of a deployment, it can only resolve containers in that same deployment, or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve all containers in the environment.
            type: object
            required:
                - version
            properties:
                version:
                    $ref: "#/components/schemas/Version"
                    description: |
                        A version string representing the deployment.
        ContainerVolume:
            title: ContainerVolume
            type: object
            description: Configuration settings for container volumes.
            required:
                - read_only
                - destination
            properties:
                read_only:
                    type: boolean
                    description: A boolean where true marks the volume as read only.
                local:
                    type: object
                    description: Configuration for settings local to the container filesystem.
                    required:
                        - max_size
                    properties:
                        max_size:
                            type: string
                            description: The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes.
                            example: 10G
                        storage_pool:
                            type: boolean
                            description: A boolean where true signifies using the largest drive over 2TB for the target server.
                destination:
                    type: string
                    description: The mountpoint path for the container.
                remote_access:
                    type: object
                    description: Configuration settings for remotely accessing the container volume.
                    required:
                        - enable
                        - password
                    properties:
                        enable:
                            type: boolean
                            description: A boolean where true represents this container volume being open to remote access connections over SFTP.
                        ips:
                            type: array
                            items:
                                type: string
                        web_hook:
                            type: string
                            description: Call out to a webhook to authenticate usernames/passwords if an organization manages their own accounts
                        password:
                            type: object
                            nullable: true
                            description: Password configuration settings for the remote access of the container volume.
                            required:
                                - algorithm
                                - data
                            properties:
                                algorithm:
                                    type: string
                                    description: The hashing algorithm used to has the password.
                                    enum:
                                        - raw
                                        - sha512
                                        - md5
                                data:
                                    type: string
                                    description: The raw or hashed password.
        VolumeSummary:
            title: VolumeSummary
            type: object
            description: A summary of relevant volume information.
            required:
                - id
                - hash
                - config
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hash:
                    type: string
                    description: A unique hash for the given volume.
                config:
                    $ref: "#/components/schemas/ContainerVolume"
        RecordTypes:
            title: DNSRecordTypes
            type: object
            description: DNS record types the platform supports.
            properties:
                a:
                    type: object
                    description: A DNS A record
                    required:
                        - ip
                    properties:
                        ip:
                            type: string
                            description: The IPv4 address that the A record should map to.
                aaaa:
                    type: object
                    description: A DNS AAAA record
                    required:
                        - ip
                    properties:
                        ip:
                            type: string
                            description: The IPv6 address that the AAAA record should map to.
                cname:
                    type: object
                    description: A DNS CNAME record
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain string the record resolves to.
                ns:
                    type: object
                    description: A DNS NS record
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain of the nameserver for this record.
                mx:
                    type: object
                    description: A DNS MX record
                    required:
                        - priority
                        - domain
                    properties:
                        priority:
                            type: integer
                            description: The priority setting for this mx record.
                        domain:
                            type: string
                            description: The domain this mx record points to.
                txt:
                    type: object
                    description: A DNS TXT record.
                    required:
                        - value
                    properties:
                        value:
                            type: string
                            description: The value for this TXT record.
                alias:
                    type: object
                    description: A DNS ALIAS record.
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain string returned from the DNS server when this alias record is requested.
                srv:
                    type: object
                    description: A DNS SRV record.
                    required:
                        - weight
                        - priority
                        - port
                        - domain
                    properties:
                        weight:
                            type: integer
                            description: Teh weight configured for this record - breaks ties for priority.
                        priority:
                            type: integer
                            description: The priority for the record.
                        port:
                            type: integer
                            description: The port number for the service.
                        domain:
                            type: string
                            description: The domain for the record.
                caa:
                    type: object
                    description: A DNS CAA record.
                    required:
                        - tag
                        - value
                    properties:
                        tag:
                            type: string
                            description: The ASCII string that represents the identifier of the property represented by the record.
                        value:
                            type: string
                            description: The value associated with the tag.
                linked:
                    type: object
                    description: A LINKED record is a record special to Cycle.  It represents a URL that points to a specific container or deployment of a container, however the IP address mapping in handled automatically by the platform.
                    allOf:
                        - type: object
                          required:
                              - features
                          properties:
                              features:
                                  type: object
                                  description: Features associated with this record.
                                  required:
                                      - tls
                                  properties:
                                      tls:
                                          type: object
                                          description: TLS properties of the record.
                                          required:
                                              - enable
                                          properties:
                                              enable:
                                                  type: boolean
                                                  description: A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform.
                        - oneOf:
                              - type: object
                                properties:
                                    container_id:
                                        type: string
                                        nullable: true
                                        description: The ID of the container this record is related to.
                              - type: object
                                properties:
                                    deployment:
                                        type: object
                                        nullable: true
                                        description: Information about the deployment this record points to.
                                        required:
                                            - environment_id
                                            - match
                                        properties:
                                            environment_id:
                                                $ref: "#/components/schemas/ID"
                                                description: The ID of the environment with the deployment tag mapping we want to reference.
                                            match:
                                                type: object
                                                description: Describes which container and which tagged deployment this record should target.
                                                required:
                                                    - container
                                                properties:
                                                    container:
                                                        $ref: "#/components/schemas/Identifier"
                                                        description: The identifier of the container in the environment this record should point to.
                                                    tag:
                                                        type: string
                                                        nullable: true
                                                        description: The deployment tag that this record should point to. The tags are set on the root of an environment and map to a deployment version.
                                                        allOf:
                                                            - $ref: "#/components/schemas/Identifier"
        Certificate:
            title: DNSRecordCertificate
            type: object
            description: A TLS record certificate
            required:
                - id
                - generated
                - wildcard_child
            nullable: true
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                generated:
                    $ref: "#/components/schemas/DateTime"
                wildcard_child:
                    type: boolean
                    description: A value where true represents that the certificate is using a shared wildcard cert.
        RecordState:
            title: DNSRecordState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the record.
                          type: string
                          enum:
                              - pending
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Record:
            title: DNSRecord
            type: object
            description: A DNS record.
            required:
                - id
                - hub_id
                - creator
                - zone_id
                - name
                - resolved_domain
                - type
                - features
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                zone_id:
                    type: string
                    description: A unique identifier for the zone
                name:
                    type: string
                    description: A name used for the record, where `@` signifies the use of the root domain.
                resolved_domain:
                    type: string
                    description: The name of the record and the origin as a domain name.
                type:
                    $ref: "#/components/schemas/RecordTypes"
                features:
                    type: object
                    description: TLS features for the record.
                    required:
                        - certificate
                    nullable: true
                    properties:
                        certificate:
                            $ref: "#/components/schemas/Certificate"
                state:
                    $ref: "#/components/schemas/RecordState"
                events:
                    $ref: "#/components/schemas/Events"
        IpState:
            title: IpState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the IP.
                          type: string
                          enum:
                              - assigning
                              - assigned
                              - releasing
                              - available
                - $ref: "#/components/schemas/State"
        Ip:
            title: Ip
            type: object
            description: An IP resource.
            required:
                - id
                - hub_id
                - kind
                - assingment
                - pool_id
                - address
                - gateway
                - cidr
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                kind:
                    type: string
                    description: The type of IP protocol this IP is.
                    enum:
                        - ipv4
                        - ipv6
                assignment:
                    type: object
                    description: Information about the assignment of this IP.
                    nullable: true
                    required:
                        - container_id
                        - instance_id
                        - environment_id
                    properties:
                        container_id:
                            type: string
                        instance_id:
                            type: string
                        environment_id:
                            type: string
                pool_id:
                    type: string
                    description: A unique identifier that associates the IP with an IP pool.
                address:
                    type: string
                    description: The IP address.
                gateway:
                    type: string
                    description: The IP gateway.
                cidr:
                    type: string
                    description: The CIDR for the IP.
                state:
                    $ref: "#/components/schemas/IpState"
        ContainersMeta:
            title: ContainersMeta
            type: object
            description: A list of meta fields that can be applied to a container.
            properties:
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                domains:
                    type: array
                    nullable: true
                    items:
                        type: object
                        description: Any associated Linked Records for this container, and their fully-qualified domain name (fqdn)
                        required:
                            - fqdn
                        properties:
                            fqdn:
                                type: string
                                description: The fully qualified domain name.
                            record:
                                $ref: "#/components/schemas/Record"
                ips:
                    description: An array of IP resources.
                    type: array
                    items:
                        $ref: "#/components/schemas/Ip"
        Container:
            title: Container
            type: object
            description: Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
            required:
                - id
                - identifier
                - name
                - identifier
                - creator
                - environment
                - hub_id
                - image
                - config
                - instances
                - annotations
                - stateful
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this container. Usually used as a key in a stack file.
                name:
                    type: string
                    description: A user defined name for the container resource.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                environment:
                    $ref: "#/components/schemas/ContainerEnvironmentSummary"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                image:
                    $ref: "#/components/schemas/ImageSummary"
                stack:
                    $ref: "#/components/schemas/StackSummary"
                config:
                    $ref: "#/components/schemas/Config"
                deployment:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/Deployment"
                instances:
                    type: integer
                    description: The number of instances for a given container.
                volumes:
                    type: array
                    items:
                        $ref: "#/components/schemas/VolumeSummary"
                annotations:
                    type: object
                    description: Custom meta data for a given container
                    nullable: true
                    additionalProperties: {}
                role:
                    type: string
                    description: The role of a given container if it has one.
                    enum:
                        - orchestrator
                    nullable: true
                stateful:
                    type: boolean
                    description: A boolean where true signifies the container is stateful.
                deprecate:
                    type: boolean
                    description: A boolean where true signifies the container is marked as deprecated.
                lock:
                    type: boolean
                    description: When set to true, prevents this container from being deleted.
                state:
                    $ref: "#/components/schemas/ContainerState"
                events:
                    title: ContainerEvents
                    type: object
                    description: A collection of timestamps for each event in the container's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - started
                    properties:
                        created:
                            description: The timestamp of when the container was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the container was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the container was deleted.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the container was started.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ContainersMeta"
        StackImageSourceType:
            title: StackImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - stack-build
                details:
                    type: object
                    required:
                        - id
                        - stack_id
                        - containers
                        - origin
                    properties:
                        id:
                            type: string
                        stack_id:
                            type: string
                        containers:
                            type: array
                            items:
                                $ref: "#/components/schemas/Identifier"
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        DirectImageSourceType:
            title: DirectImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - direct
                details:
                    type: object
                    required:
                        - id
                        - origin
                    properties:
                        id:
                            type: string
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        BucketImageSourceType:
            title: BucketImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - bucket
                details:
                    type: object
                    required:
                        - id
                        - origin
                    properties:
                        id:
                            type: string
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        ImageState:
            title: ImageState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the image.
                          type: string
                          enum:
                              - new
                              - uploading
                              - downloading
                              - building
                              - verifying
                              - saving
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ImageMeta:
            title: ImageMeta
            type: object
            description: A list of meta fields that can be applied to the image.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
        Image:
            title: Image
            type: object
            description: An image is a point in time build on a given image source, and what is distributed by Cycle to run containers.
            required:
                - id
                - hub_id
                - name
                - size
                - backend
                - requires
                - config
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A user defined name for the image.
                size:
                    type: integer
                    description: The image size in bytes.
                about:
                    type: object
                    description: An object that holds information about the image.
                    required:
                        - description
                    properties:
                        description:
                            type: string
                            nullable: true
                            description: A description of the image.
                backend:
                    type: object
                    description: Describes where the image is hosted.
                    required:
                        - provider
                        - size
                        - file_name
                        - file_id
                    properties:
                        provider:
                            type: string
                            description: The provider where this image is hosted.
                        size:
                            type: integer
                            description: The size of the image in bytes.
                        file_name:
                            type: string
                            description: A file name for the image, used by the platform.
                        file_id:
                            type: string
                            description: A file id for the image, used by the platform.
                requires:
                    type: object
                    description: Any restrictions or requirements needed to run this image as a container.
                    properties:
                        nvidia_gpu:
                            type: boolean
                build:
                    type: object
                    nullable: true
                    description: Any additional build details for this image
                    properties:
                        args:
                            type: object
                            description: Arguments to pass to the builder during a build of this image.
                            additionalProperties:
                                type: string
                builder:
                    type: object
                    nullable: true
                    description: Configuration options regarding the builder used to create/import this Image.
                    required:
                        - integration_id
                    properties:
                        integration_id:
                            description: The ID of the Integration used to do the build.
                            $ref: "#/components/schemas/ID"
                config:
                    type: object
                    description: Configuration settings for the image.
                    required:
                        - user
                        - ports
                        - env
                        - labels
                        - command
                        - entrypoint
                        - volumes
                        - workdir
                        - signal_stop
                    properties:
                        user:
                            type: string
                            description: The linux user this image runs its processes as.
                        ports:
                            description: The port settings for the image.
                            type: array
                            items:
                                type: object
                                required:
                                    - host
                                    - container
                                    - type
                                properties:
                                    host:
                                        description: Host Port
                                        type: number
                                    container:
                                        type: number
                                    type:
                                        type: string
                        env:
                            type: object
                            description: Image defined environment variables for the image.
                            additionalProperties:
                                type: string
                        labels:
                            type: object
                            description: Image labels.
                            additionalProperties:
                                type: string
                        command:
                            description: The CMD array used to start the container.
                            type: array
                            items:
                                type: string
                        entrypoint:
                            description: An entrypoint command.
                            type: array
                            items:
                                type: string
                        volumes:
                            description: Volumes information for the given image.
                            type: array
                            items:
                                type: object
                                properties:
                                    path:
                                        type: string
                                        description: The path where the volume is mounted.
                                    mode:
                                        type: string
                                        description: Permission settings for the volume.
                                        enum:
                                            - ro
                                            - rw
                        workdir:
                            type: string
                            description: The working directory for the image.
                        signal_stop:
                            type: string
                            description: A set command to be run if a signal is called.
                source:
                    x-ogen-name: ImageSourceDetails
                    type: object
                    discriminator:
                        propertyName: type
                        mapping:
                            stack-build: "#/components/schemas/StackImageSourceType"
                            direct: "#/components/schemas/DirectImageSourceType"
                            bucket: "#/components/schemas/BucketImageSourceType"
                    oneOf:
                        - $ref: "#/components/schemas/DirectImageSourceType"
                        - $ref: "#/components/schemas/StackImageSourceType"
                        - $ref: "#/components/schemas/BucketImageSourceType"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                factory:
                    type: object
                    nullable: true
                    description: Information about the Factory service that built/imported the Image into Cycle.
                    required:
                        - node_id
                        - cached
                        - acknowledged
                    properties:
                        node_id:
                            type: string
                            description: The node holding the factory service that was responsible for building the image.
                        cached:
                            $ref: "#/components/schemas/DateTime"
                            description: A date timestamp for when the node cached the image.
                        acknowledged:
                            $ref: "#/components/schemas/DateTime"
                            description: A date timestamp for when the node acknowledged the image import job.
                state:
                    $ref: "#/components/schemas/ImageState"
                events:
                    title: ImageEvents
                    type: object
                    description: A collection of timestamps for each event in the image's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ImageMeta"
        ImagesIncludes:
            title: ImageIncludes
            description: A resource associated with an image.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Image"
        IdentifierIncludes:
            title: IdentifierIncludes
            type: object
            description: A map of identifiers to an array of resource IDs that are associated with it. All IDs point to the same type of resource.
            additionalProperties:
                type: array
                items:
                    $ref: "#/components/schemas/ID"
        EnvironmentIncludes:
            title: EnvironmentInclude
            description: An identity that is associated with an environment.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Environment"
        ContainerIncludes:
            title: ContainerIncludes
            description: All includable resources linkable to the given container.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                images:
                    $ref: "#/components/schemas/ImagesIncludes"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                stacks:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
                environments:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        ContainerStartAction:
            title: ContainerStartActionTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - start
                    description: The name of the action to perform.
        ContainerStopAction:
            title: ContainerStopActionTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - stop
                    description: The name of the action to perform.
        ReconfigureContainer:
            title: ReconfigureContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reconfigure
                    description: The action to take.
                contents:
                    $ref: "#/components/schemas/Config"
        ReconfigureVolumes:
            title: ReconfigureVolumeTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - volumes.reconfigure
                    description: The action to take.
                contents:
                    description: An array of volume objects to be reconfigured.
                    type: array
                    items:
                        $ref: "#/components/schemas/VolumeSummary"
        Reimage:
            title: ReimageContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reimage
                    description: The action to take.
                contents:
                    type: object
                    description: Additional information needed to complete the job.
                    required:
                        - image_id
                    properties:
                        image_id:
                            type: string
                            description: The ID of the image to use when reimaging.
                        allow_incompatible:
                            type: boolean
                            description: A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced.
                        overwrite_runtime_config:
                            type: boolean
                            description: A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process.
        Scale:
            title: ScaleContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - scale
                contents:
                    type: object
                    description: Additional information needed to complete the job.
                    required:
                        - instances
                    properties:
                        instances:
                            type: integer
                            description: The number of desired instances to scale to.
        EnvironmentNetworkSummary:
            title: EnvironmentNetworkSummary
            type: object
            description: Details about the environment network this instance is a member of.
            required:
                - id
                - network_subnet
                - subnet
                - ipv6
                - legacy
                - mac_addr
                - vxlan_tag
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                network_subnet:
                    type: string
                subnet:
                    type: string
                ipv6:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/IPNet"
                legacy:
                    nullable: true
                    type: object
                    required:
                        - host
                        - subnet
                        - ipv4
                    properties:
                        host:
                            type: integer
                        subnet:
                            type: integer
                        ipv4:
                            nullable: true
                            $ref: "#/components/schemas/IPNet"
                mac_addr:
                    type: string
                vxlan_tag:
                    type: integer
        InstanceProvider:
            title: InstanceProvider
            type: object
            properties:
                vendor:
                    type: string
                    description: The vendor of the hub provider integration related to the server this instance runs on.
                integration_id:
                    description: An ID of the provider Hub integration that this instance's host node is related to.
                location:
                    type: string
                    description: The identifier of the location related to the server this instance runs on.
        MigrationInstance:
            title: MigrationInstance
            type: object
            description: Information about an instances migration.
            required:
                - instance_id
                - server_id
            properties:
                instance_id:
                    type: string
                    description: The ID of the instance.
                server_id:
                    type: string
                    description: The ID of the server in the context its represented.
        InstanceState:
            title: InstanceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the instance.
                          type: string
                          enum:
                              - new
                              - starting
                              - reimaging
                              - migrating
                              - running
                              - stopping
                              - stopped
                              - failed
                              - deleting
                              - deleted
                      health:
                          type: object
                          nullable: true
                          description: information about the health of the instance.
                          required:
                              - healthy
                              - updated
                          properties:
                              healthy:
                                  type: boolean
                                  nullable: true
                                  description: |
                                      Describes the healthiness of the instance. Health checks can be configured at the container level. 
                                      - `true`: The instance is considered healthy.
                                      - `false`: The instance is considered unhealthy.
                                      - `null`: The instance has not yet reported its health, or a health check has not yet been performed.
                              updated:
                                  description: A timestamp of the last time the instance health was updated.
                                  $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/schemas/State"
        InstanceAutoScale:
            title: InstanceAutoScale
            description: Auto-scale details for instances created by auto-scale events
            type: object
            required:
                - sibling_id
                - min_ttl
            properties:
                sibling_id:
                    $ref: "#/components/schemas/ID"
                min_ttl:
                    $ref: "#/components/schemas/DateTime"
        Instance:
            title: Instance
            type: object
            description: An instance of a Container.
            required:
                - id
                - hub_id
                - container_id
                - location_id
                - creator
                - environment
                - stateful
                - provider
                - server_id
                - ready_state
                - hostname
                - migration
                - purge_time
                - service
                - state
                - autoscale
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                container_id:
                    type: string
                    description: A container identifier for the container that is associated with this instance.
                location_id:
                    type: string
                    description: A location identifier that's associated with the server this instance is deployed to.
                deployment:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/Deployment"
                environment:
                    $ref: "#/components/schemas/EnvironmentNetworkSummary"
                stateful:
                    type: object
                    description: Additional information about the instance relating to its setting as being stateful.
                    nullable: true
                    required:
                        - id
                        - base_hostname
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        base_hostname:
                            type: string
                            description: The base hostname for the given instance.
                provider:
                    $ref: "#/components/schemas/InstanceProvider"
                server_id:
                    type: string
                    description: An identifier for the server this instance is deployed to.
                ready_state:
                    type: string
                    description: The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run.
                    enum:
                        - active
                        - purge
                        - hibernate
                hostname:
                    type: string
                    description: The hostname of the instance.
                migration:
                    type: object
                    description: If this instance is scheduled to be migrated or has been migrated in the past, there will be information populating this field with the server that the instance came from or the server that the instance was moved to and the instance ID.
                    nullable: true
                    required:
                        - key
                        - copy_volumes
                    properties:
                        to:
                            $ref: "#/components/schemas/MigrationInstance"
                        from:
                            $ref: "#/components/schemas/MigrationInstance"
                        started:
                            description: A timestamp of when the migration was started.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: A timestamp of when the migration was completed.
                            $ref: "#/components/schemas/DateTime"
                        key:
                            type: string
                            description: A key used by the platform to verify the migration.
                        copy_volumes:
                            type: boolean
                            description: A boolean where true represents the volumes for the instance should be copied to the new server as well.
                purge_time:
                    nullable: true
                    type: string
                    description: If the instance was purged, the timestamp of when that happened.
                    allOf:
                        - $ref: "#/components/schemas/DateTime"
                service:
                    type: string
                    description: If the instance is an instance of a service container that will be denoted here.
                    nullable: true
                    enum:
                        - discovery
                        - vpn
                        - loadbalancer
                state:
                    $ref: "#/components/schemas/InstanceState"
                autoscale:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/InstanceAutoScale"
                events:
                    title: InstanceEvents
                    description: A collection of timestamps for each event in the instnaces lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - first_started
                    properties:
                        created:
                            description: The timestamp of when the instance was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the instance was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the instance was deleted.
                            $ref: "#/components/schemas/DateTime"
                        first_started:
                            description: The timestamp of when the instance was started.
                            $ref: "#/components/schemas/DateTime"
        ServerSharedFileSystems:
            title: ServerSharedFileSystems
            type: object
            properties:
                mounts:
                    nullable: true
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - type
                            - options
                            - source
                        properties:
                            type:
                                type: string
                                description: String describing the server mount type.
                            options:
                                type: string
                                description: Comma separated string describing the server mount options.
                                example: key1=value1,key2=value2
                            source:
                                type: string
                                description: String describing the server mount source.
                directories:
                    type: object
                    nullable: true
                    description: An object describing directory identifiers with value {}.
                    additionalProperties: {}
        ServerProvider:
            title: ServerProvider
            type: object
            description: A resource regarding the provider a given server is deployed from.
            required:
                - vendor
                - model
                - location
                - server
            properties:
                vendor:
                    type: string
                    description: The vendor for the provider this server is deployed from.
                model:
                    type: string
                    description: The model of the server that is deployed.
                location:
                    type: string
                    description: A location where the server is deployed.
                server:
                    type: string
                    description: A provider specific identifier for the server.
                init_ips:
                    description: The IP's assigned to this server during provisioning.
                    type: array
                    items:
                        type: string
                mac_addr:
                    type: string
                    description: The mac address for the server.
                extra:
                    type: object
                    additionalProperties: true
                provision_options:
                    type: object
                    properties:
                        attachesd_storage_size:
                            type: number
                        reservation_id:
                            type: string
        ServerFeatures:
            title: ServerFeatures
            type: object
            description: A set of features a given server can have and their information.
            required:
                - sftp
                - base_volume_ gb
            properties:
                sftp:
                    type: boolean
                    description: A boolean where true means the server accepts incoming SFTP connections through the remote volume integration.
                base_volume_gb:
                    nullable: true
                    type: integer
                    description: The size of the base volume (where Cycle stores container images on this server).
        ServerConstraints:
            title: ServerConstraints
            type: object
            description: Constraints to apply to the server.
            required:
                - tags
                - allow
            properties:
                tags:
                    description: A list of server tags to put on the given server.
                    type: array
                    items:
                        type: string
                allow:
                    type: object
                    description: Settings for the server, things that are or are not allowed.
                    required:
                        - pool
                        - services
                        - overcommit
                    properties:
                        pool:
                            type: boolean
                            description: A boolean where true means - allow containers with no tags specified to be deployed to this server.
                        services:
                            type: boolean
                            description: A boolean where true means - allow service containers to be deployed to this container.
                        overcommit:
                            type: boolean
                            description: A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server.
        ServerState:
            title: ServerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the server.
                          type: string
                          enum:
                              - new
                              - provisioning
                              - configuring
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        NodeState:
            title: NodeState
            allOf:
                - required:
                      - current
                      - changed
                  properties:
                      current:
                          description: The current state of the node.
                          type: string
                          enum:
                              - new
                              - offline
                              - authorizing
                              - online
                              - decommissioned
                      changed:
                          $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/schemas/State"
        ServerStatsNetwork:
            title: ServerStatsNetwork
            type: object
            description: Statistics about the networks on a given server.
            required:
                - external_ipv4
                - external_ipv6
            properties:
                interfaces:
                    type: object
                    description: Network interfaces for a given server.
                    additionalProperties:
                        type: object
                        description: Network interface.
                        properties:
                            interface:
                                type: string
                                description: The interface name.
                            flags:
                                type: string
                                description: Flags for the given interface.
                            mtu:
                                type: integer
                                description: The maximum transmission unit for the interface.
                            mac_addr:
                                type: string
                                description: The mac address for the interface.
                            addrs:
                                nullable: true
                                description: An array of IP addresses associated with the interface.
                                type: array
                                items:
                                    type: string
                external_ipv4:
                    type: string
                    description: The public IPv4 address used to connect to this server.
                external_ipv6:
                    type: string
                    description: The public IPv6 address used to connect to this server.
        ServerStatsUptime:
            title: ServerStatsUptime
            type: object
            description: Statistics describing the uptime of a given server.
            properties:
                seconds:
                    type: number
                    description: The amount in seconds the server has been up (resets on restart).
                cpu_idle:
                    type: number
                    description: CPU idle time.
        ServerStatsCpuUsage:
            title: ServerStatsCpuUsage
            type: object
            properties:
                user:
                    type: integer
                nice:
                    type: integer
                system:
                    type: integer
                idle:
                    type: integer
                iowait:
                    type: integer
                irq:
                    type: integer
                soft_irq:
                    type: integer
                steal:
                    type: integer
                guest:
                    type: integer
                guest_nice:
                    type: integer
        ServerStatsCpu:
            title: ServerStatsCpu
            type: object
            description: Statistics about the CPU resources on a server.
            properties:
                cores:
                    type: integer
                    description: The number of CPU's or vCPU's for a given server.
                processors:
                    description: An array of processor information objects.
                    type: array
                    items:
                        type: object
                        description: Processor information.
                        properties:
                            model:
                                type: string
                                description: The model of the processor.
                            speed:
                                type: number
                                format: float
                                description: The speed of the processor.
                usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsage"
        ServerStatsLoad:
            title: ServerStatsLoad
            type: object
            description: Statistics about the current load on the server.
            required:
                - avg1m
                - avg5m
                - avg15m
            properties:
                avg1m:
                    type: number
                    format: float
                    description: The 1 minute load average.
                avg5m:
                    type: number
                    format: float
                    description: The 5 minute load average.
                avg15m:
                    type: number
                    format: float
                    description: the 15 minute load average.
        ServerStatsRam:
            title: ServerStatsRam
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: integer
                    description: The available RAM on the server.
                free:
                    type: integer
                    description: The free RAM on the server.
                total:
                    type: integer
                    description: The total RAM on the server.
        ServerStatsStorage:
            title: ServerStatsStorage
            type: object
            description: Statistics about storage for a given server.
            required:
                - volume_groups
                - mounts
            properties:
                volume_groups:
                    description: An array of volume group objects.
                    type: object
                    additionalProperties:
                        type: object
                        description: Volume group
                        required:
                            - name
                            - size
                            - volumes
                        properties:
                            name:
                                type: string
                                description: A name for the volume group.
                            size:
                                type: integer
                                description: A number representing the aggregate group volume size in megabytes.
                            volumes:
                                description: The actual volumes.
                                type: object
                                additionalProperties:
                                    type: object
                                    required:
                                        - name
                                        - size
                                        - data_percent
                                        - meta_percent
                                        - pool
                                    properties:
                                        name:
                                            type: string
                                            description: The name of the volume.
                                        size:
                                            type: integer
                                            description: The size in megabytes of the volume.
                                        data_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by data.
                                        meta_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by meta data.
                                        pool:
                                            type: string
                                            description: The name of the volume pool this volume is associated with.
                mounts:
                    type: object
                    description: Records that show information about mounted filesystems where the key is the path to the mount.
                    additionalProperties:
                        title: MountedFS
                        type: object
                        description: Mounted filesystem information.
                        required:
                            - type
                            - total
                            - free
                            - used
                        properties:
                            device:
                                type: string
                                description: The device assocaited with the mount.
                            type:
                                type: string
                                description: The type of filesystem in use by the mount.
                            mountpoint:
                                type: string
                                description: The path the mount is associated with.
                            total:
                                type: integer
                                description: The total amount of storage in KB available at this mount.
                            free:
                                type: integer
                                description: The amount of uninitialized storage in KB.
                            used:
                                type: integer
                                description: The amount of storage being used in KB.
        ServerStatsOS:
            title: ServerStatsOS
            type: object
            description: Statistics about the operating system installed on the server (CycleOS).
            properties:
                release:
                    type: string
                    description: The currently installed release version of the OS.
                kernel:
                    type: string
                    description: The currently installed kernel version.
                hostname:
                    type: string
                    description: The hostname as set by the given server's OS.
        ServerStatsVersions:
            title: ServerStatsVersions
            type: object
            description: Information about the versions of Cycle services on a given server.
            required:
                - services
            properties:
                services:
                    description: A list of records about Cycle services.
                    type: object
                    additionalProperties:
                        type: string
        NodeMetaStats:
            title: NodeMetaStats
            type: object
            description: Statistics that pertain to a specific node.
            required:
                - network
                - uptime
                - cpu
                - load
                - ram
                - storage
                - os
                - versions
            properties:
                network:
                    $ref: "#/components/schemas/ServerStatsNetwork"
                uptime:
                    $ref: "#/components/schemas/ServerStatsUptime"
                cpu:
                    $ref: "#/components/schemas/ServerStatsCpu"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRam"
                storage:
                    $ref: "#/components/schemas/ServerStatsStorage"
                os:
                    $ref: "#/components/schemas/ServerStatsOS"
                versions:
                    $ref: "#/components/schemas/ServerStatsVersions"
        ServerMeta:
            title: ServerMeta
            type: object
            description: A list of meta fields that can be applied to a server.
            properties:
                node:
                    type: object
                    description: Infrormation about the status of the server.
                    required:
                        - last_checkin
                        - drivers
                        - state
                        - stats
                        - healthy
                        - online
                    properties:
                        last_checkin:
                            description: The last time this server checked in with the platform.
                            $ref: "#/components/schemas/DateTime"
                        drivers:
                            description: An array a drivers associated with the given server.
                            type: array
                            items:
                                type: string
                        state:
                            $ref: "#/components/schemas/NodeState"
                        stats:
                            $ref: "#/components/schemas/NodeMetaStats"
                        healthy:
                            type: boolean
                            description: A boolean where true means the platform is reporting the server as healthy.
                        online:
                            type: boolean
                            description: A boolean where true means the server is online and reachable by the platform.
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
        Server:
            title: Server
            x-ogen-name: InfraServer
            type: object
            description: The server resource, referring to servers that have been deployed to a Cycle hub.
            required:
                - id
                - hub_id
                - location_id
                - model_id
                - node_id
                - shared_file_systems
                - hostname
                - creator
                - provider
                - cluster
                - features
                - constraints
                - ephemeral
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                location_id:
                    type: string
                    description: An identifier for the location this server is deployed to.
                model_id:
                    type: string
                    description: An identifier for the model of server that is deployed.
                node_id:
                    type: string
                    description: An identifier for the node.
                shared_file_systems:
                    $ref: "#/components/schemas/ServerSharedFileSystems"
                hostname:
                    type: string
                    description: The server hostname.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                provider:
                    $ref: "#/components/schemas/ServerProvider"
                cluster:
                    type: string
                    description: The cluster the given server is deployed to.
                features:
                    $ref: "#/components/schemas/ServerFeatures"
                constraints:
                    $ref: "#/components/schemas/ServerConstraints"
                autoscale:
                    nullable: true
                    type: object
                    required:
                        - group_id
                    properties:
                        group_id:
                            $ref: "#/components/schemas/ID"
                ephemeral:
                    type: boolean
                    description: Set to true when a server is created as part of an auto-scale event.
                evacuate:
                    nullable: true
                    description: Details about a server's evacuation status. When an evacuation is in progress, no new container instances will be permitted on the server.
                    type: object
                    required:
                        - started
                    properties:
                        started:
                            description: The time when this server began evacuating instances.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/ServerState"
                events:
                    title: ServerEvents
                    type: object
                    description: A collection of timestamps for each event in the server's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - latest_instance
                        - provisioning
                    properties:
                        created:
                            description: The timestamp of when the server was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the server was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the server was deleted.
                            $ref: "#/components/schemas/DateTime"
                        latest_instance:
                            description: The timestamp of when the latest instance was deployed to this server.
                            $ref: "#/components/schemas/DateTime"
                        provisioning:
                            type: object
                            description: Information about the provisioning of the server.
                            required:
                                - started
                                - failed
                                - completed
                            properties:
                                started:
                                    description: A timestamp of when the server started provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                failed:
                                    description: A timestamp of when the server failed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                completed:
                                    description: A timestamp of when the server completed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ServerMeta"
        ServersIncludes:
            title: ServerIncludes
            description: A resource thats associated with a server.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Server"
        ProviderLocationGeography:
            title: ProviderLocationGeography
            type: object
            description: Geographic information about a provider location.
            required:
                - latitude
                - longitude
                - city
                - state
                - country
                - region
            properties:
                latitude:
                    type: integer
                    description: The latitude of the given provider datacenter.
                longitude:
                    type: integer
                    description: The longitude of the given provider datacenter.
                city:
                    type: string
                    description: The city the datacenter resides in.
                state:
                    type: string
                    description: The state the datacenter resides in.
                country:
                    type: string
                    description: The country the datacenter resides in.
                region:
                    type: string
                    description: The region the datacenter resides in.
        ProviderLocationDetails:
            title: LocationProvider
            type: object
            description: Information about the locaiton of the provider.
            required:
                - identifier
                - location
                - code
            properties:
                identifier:
                    type: string
                    description: An identifier for the given provider
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: The ID of the provider integration associated with this location.
                location:
                    type: string
                    description: A location name returned from the provider.
                code:
                    type: string
                    description: A location code returned from the provider.
                availability_zones:
                    type: array
                    items:
                        type: string
        ProviderLocation:
            title: ProviderLocation
            type: object
            description: Location information for a given provider.
            required:
                - id
                - name
                - provider
                - compatible
                - features
                - abbreviation
                - annotations
            properties:
                id:
                    type: string
                name:
                    type: string
                    description: A name for the location.
                geographic:
                    allOf:
                        - type: object
                          nullable: true
                        - $ref: "#/components/schemas/ProviderLocationGeography"
                provider:
                    $ref: "#/components/schemas/ProviderLocationDetails"
                compatible:
                    type: boolean
                    description: A boolean where true means the locaiton is supported by the platform.
                features:
                    type: object
                    description: Additional information about available and supported features of the provider location.
                    required:
                        - available
                        - supported
                    properties:
                        available:
                            description: Available features for the provider location.
                            type: array
                            items:
                                type: string
                        supported:
                            description: Supported features for the provider location.
                            type: array
                            items:
                                type: string
                abbreviation:
                    type: string
                    description: An abbreviation for the given provider locaiton.
                annotations:
                    type: object
                    description: Additional information about the given provider locaiton.
                    additionalProperties: {}
        LocationsIncludes:
            title: LocationIncludes
            description: A resource thats associated with a provider location.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderLocation"
        IntegrationAuth:
            title: IntegrationAuth
            type: object
            properties:
                region:
                    type: string
                    nullable: true
                    description: The region associated with the Integration.
                namespace:
                    type: string
                    nullable: true
                    description: The namespace associated with the Integration.
                api_key:
                    type: string
                    nullable: true
                    description: API key for accessing the Integration.
                key_id:
                    type: string
                    nullable: true
                    description: Key ID for accessing the Integration.
                secret:
                    type: string
                    nullable: true
                    description: Secret for accessing the Integration.
                subscription_id:
                    type: string
                    nullable: true
                    description: Subscription ID for the Integration.
                client_id:
                    type: string
                    nullable: true
                    description: Client ID for the Integration.
                base64_config:
                    type: string
                    nullable: true
                    description: Base64 encoded configuration for the Integration.
        IntegrationState:
            title: IntegrationState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the integration.
                          type: string
                          enum:
                              - new
                              - verifying
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        IntegrationDefinition:
            title: IntegrationDefinition
            description: Describes an integration for a Cycle Hub that can be enabled by the Hub owner.
            type: object
            required:
                - vendor
                - name
                - supports_verification
                - supports_multiple
                - required_fields
                - url
                - public
                - usable
                - editable
            properties:
                vendor:
                    type: string
                name:
                    type: string
                supports_verification:
                    type: boolean
                supports_multiple:
                    type: boolean
                features:
                    type: array
                    description: A list of additional features supported by this Integration.
                    nullable: true
                    items:
                        type: string
                extends:
                    type: array
                    description: A list of functionality that this integration extends. i.e. ["backups"]
                    nullable: true
                    items:
                        type: string
                extended_configuration:
                    type: object
                    nullable: true
                    description: Additional configuration options that are available when using this Integration. These describe additional functionality that Cycle may utilize.
                    properties:
                        options:
                            type: array
                            nullable: true
                            items:
                                type: object
                                properties:
                                    title:
                                        type: string
                                    key:
                                        type: string
                                    type:
                                        type: string
                fields:
                    type: object
                    properties:
                        extra:
                            type: object
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type: string
                                        nullable: true
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                            nullable: true
                        auth:
                            type: object
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type: string
                                        nullable: true
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                            nullable: true
                url:
                    type: string
                    format: uri
                public:
                    type: boolean
                usable:
                    type: boolean
                editable:
                    type: boolean
                    description: If true, the Integration can be edited. Otherwise, to make a change it will need to be deleted and recreated.
        IntegrationMeta:
            title: IntegrationMeta
            type: object
            description: Additional fields that can be requested for an Integration on fetch.
            properties:
                definition:
                    $ref: "#/components/schemas/IntegrationDefinition"
                    description: The full Integration definition associated with this Integration.
        Integration:
            title: Integration
            type: object
            required:
                - id
                - identifier
                - vendor
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    nullable: true
                    description: Name of the Integration.
                vendor:
                    type: string
                    description: Which vendor this Integration is associated with.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                auth:
                    type: object
                    nullable: true
                    description: Authentication information for the Integration, can be null.
                    allOf:
                        - $ref: "#/components/schemas/IntegrationAuth"
                extra:
                    type: object
                    additionalProperties:
                        type: string
                    nullable: true
                    description: Additional key-value pairs associated with the Integration.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/ID"
                    description: Identifier of the hub associated with the Integration.
                state:
                    $ref: "#/components/schemas/IntegrationState"
                events:
                    title: IntegrationEvents
                    type: object
                    description: A collection of timestamps for each event in the Integration's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the Integration was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the Integration was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the Integration was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/IntegrationMeta"
        IntegrationsIncludes:
            title: IntegrationsIncludes
            description: A resource thats associated with an integration.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Integration"
        ContainersIncludes:
            title: ContainersIncludes
            type: object
            description: A resource thats associated with a contianer.
            additionalProperties:
                $ref: "#/components/schemas/Container"
        InstanceIncludes:
            title: InstanceIncludes
            description: A resource associated with an instance.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                servers:
                    $ref: "#/components/schemas/ServersIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                containers:
                    $ref: "#/components/schemas/ContainersIncludes"
                containers:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
                environments:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        SSHToken:
            title: SSHToken
            type: object
            description: An Instance SSH token.
            required:
                - id
                - instance_id
                - container_id
                - hub_id
                - creator
                - events
                - valid
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                instance_id:
                    type: string
                    description: The ID of the instance being connected to.
                container_id:
                    type: string
                    description: The ID of the container from which the instance was created.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    title: SSHTokenEvents
                    type: object
                    description: A collection of timestamps for each event in the SSH token's lifetime.
                    required:
                        - created
                        - used
                        - expires
                    properties:
                        created:
                            description: The timestamp of when the SSH token was created.
                            $ref: "#/components/schemas/DateTime"
                        used:
                            description: The timestamp of when the SSH token was used.
                            $ref: "#/components/schemas/DateTime"
                        expires:
                            description: The timestamp of when the SSH token expires.
                            $ref: "#/components/schemas/DateTime"
                valid:
                    type: boolean
                    description: A boolean where true represents the token as being a valid token to be used for connection.
        SSHResponse:
            title: SSHConnectionResponse
            type: object
            description: SSH connection information for a given container instance.
            required:
                - token
                - secret
                - address
            properties:
                token:
                    $ref: "#/components/schemas/SSHToken"
                secret:
                    type: string
                    description: The SSH connection response secret.
                address:
                    type: string
                    description: The SSH connection response address.
        Migrate:
            title: MigrateAction
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - migrate
                    description: The name of the action to perform.
                contents:
                    type: object
                    required:
                        - destination_server_id
                    properties:
                        destination_server_id:
                            type: string
                            description: The ID of the server being migrated to.
                        stateful:
                            type: object
                            description: Information about additonal configuration settings used when migrating a stateful instance.
                            required:
                                - copy_volumes
                            properties:
                                copy_volumes:
                                    type: boolean
                                    description: A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration.
        RevertMigration:
            title: RevertMigrationAction
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - migrate_revert
                    description: The name of the action to perform.
        DeployedVolume:
            title: DeployedVolume
            type: object
            description: A deployed volume resource.
            required:
                - server_id
                - container_id
                - container_volume_id
                - instance_id
                - hash
                - path
                - storage
                - last_updated
            properties:
                server_id:
                    type: string
                    description: The ID of the server the instance is deployed to.
                container_id:
                    type: string
                    description: The ID of the container the instance was created from.
                container_volume_id:
                    type: string
                    description: The ID for the volume withing the context of the container.
                instance_id:
                    type: string
                    description: The ID for the container instance this volume is attached to.
                hash:
                    type: string
                    description: A hash used as part of the identification mechanisms for the platform and API.
                path:
                    type: string
                    description: The path where the volume is mounted on the instnace filesystem.
                storage:
                    type: object
                    description: Storage information for the volume.
                    required:
                        - used
                        - total
                    properties:
                        used:
                            type: integer
                            description: The amount of volume storage used, in MB's
                        total:
                            type: integer
                            description: The total amount of volume storage available, in MB's.
        SFTP:
            title: InstanceVolumeSFTP
            type: object
            description: Information about connecting to a instance volume over SFTP.
            required:
                - host
                - port
                - username
                - password
            properties:
                host:
                    type: string
                    description: The hostname for connecting to the volume over SFTP.
                port:
                    type: number
                    description: The port number to use when connecting.
                username:
                    type: string
                    description: The username to use when connecting.
                password:
                    type: object
                    description: Password configuration settings for the remote access of the container volume.
                    required:
                        - algorithm
                        - data
                    properties:
                        algorithm:
                            type: string
                            description: The hashing algorithm used to has the password.
                            enum:
                                - raw
                                - sha512
                                - md5
                        data:
                            type: string
                            description: The raw or hashed password.
        InstanceVolume:
            title: InstanceVolume
            type: object
            description: A container instance volume resource.
            required:
                - id
                - config
                - deployed
                - sftp
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                config:
                    $ref: "#/components/schemas/ContainerVolume"
                deployed:
                    $ref: "#/components/schemas/DeployedVolume"
                sftp:
                    $ref: "#/components/schemas/SFTP"
        TelemetryReportRequest:
            title: InstanceTelemetryReportRequest
            type: object
            description: A summary of report requests and when they occured.
            required:
                - instance_id
                - start
                - end
            properties:
                instance_id:
                    type: string
                    description: The ID of the instance this telemetry reporting pertains to.
                start:
                    description: A timestamp of when the snapshot began.
                    $ref: "#/components/schemas/DateTime"
                end:
                    description: A timestamp of when the snapshot ended.
                    $ref: "#/components/schemas/DateTime"
        CPUSnapshot:
            title: InstanceTelemetryCPUSnapshot
            type: object
            description: A telemetry snapshot pertaining to CPU usage.
            required:
                - usage
                - throttling
            properties:
                usage:
                    type: object
                    description: Usage statistics.
                    required:
                        - total
                        - per_core
                        - kernel
                        - user
                    properties:
                        total:
                            type: integer
                            description: Total amount of VPU time since last restart.
                        per_core:
                            description: An array showing CPU core specific usage in nanoseconds since the last restart.
                            type: array
                            items:
                                type: integer
                        kernel:
                            type: integer
                            description: The amount of time in nanoseconds used by the kernel since last restart.
                        user:
                            type: number
                            description: The amount of time in nanoseconds taken up for user processes.
                throttling:
                    type: object
                    description: Throttling statistics.
                    properties:
                        periods:
                            type: integer
                            description: The amount of periods that have passed since the last restart.
                        throttled_periods:
                            type: integer
                            description: How many times the instance has been throttled for using all its alloted CPU during a period.
                        throttled_time:
                            type: integer
                            description: The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
        MemoryData:
            title: MemoryData
            type: object
            properties:
                usage:
                    type: number
                    description: The number in bytes of memory being used by the instance at the time of the snapshot.
                max_usage:
                    type: number
                    description: The highest amoun tof memory usage since the last restart.
                fail_count:
                    type: number
                    description: The number of times the memory liimit was exceeded for the instance.
                limit:
                    type: number
                    description: The maximum number of bytes of memory this instance has acess to.
        MemorySnapshot:
            title: InstanceTelemetryMemorySnapshot
            type: object
            description: A snapshot of memory usage statistics.
            properties:
                cache:
                    type: number
                    description: The number of bytes of page cache memory being used by this instance.
                usage:
                    description: The memory usage data.
                    $ref: "#/components/schemas/MemoryData"
                swap_usage:
                    description: Memory swap usage data.
                    $ref: "#/components/schemas/MemoryData"
                kernel_usage:
                    description: Kernal memory usage.
                    $ref: "#/components/schemas/MemoryData"
                kernel_tcp_usage:
                    description: Kernel TCP buffer usage.
                    $ref: "#/components/schemas/MemoryData"
        ProcessesSnapshot:
            title: InstanceTelemetryProcessesSnapshot
            type: object
            description: Process information for a given snapshot.
            properties:
                current:
                    type: number
                    description: The current number of running processes in the instance.
                limit:
                    type: number
                    description: The maximum number of running processes for the instance.
        NetworkSnapshot:
            title: InstanceTelemetryNetworkSnapshot
            type: object
            description: A snapshot of network usage statistics.
            required:
                - interfaces
            properties:
                interfaces:
                    type: array
                    description: An array of network interfaces attached to this instance.
                    items:
                        type: object
                        title: InstanceTelemetryNetworkInterfaceSnapshot
                        required:
                            - name
                            - rx_bytes
                            - tx_bytes
                        properties:
                            name:
                                type: string
                            rx_bytes:
                                type: integer
                            tx_bytes:
                                type: integer
        HugeTLB:
            title: HugeTLB
            type: object
            description: HugeTLB data.
            properties:
                usage:
                    type: integer
                    description: The number of bytes being consumed by huge pages of all sizes.
                max:
                    type: integer
                    description: The maximum number of bytes allowed to be used for huge pages for this instance.
                fail_count:
                    type: integer
                    description: The number of times the hugeTLB memory limit has been exceeded by this instance.
        ResourceSnapshot:
            title: InstanceTelemetryResourceSnapshot
            description: A resource snapshot that shows instance telemetry.
            type: object
            required:
                - time
                - cpu
                - memory
                - processes
                - network
            properties:
                time:
                    description: A timestamp of the time this snapshot was captured at.
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                container_id:
                    type: string
                    description: An ID for an associated container.
                instance_id:
                    type: string
                    description: An ID for an associated instance.
                environment_id:
                    type: string
                    description: An ID for an associated environment.
                cpu:
                    $ref: "#/components/schemas/CPUSnapshot"
                memory:
                    $ref: "#/components/schemas/MemorySnapshot"
                processes:
                    $ref: "#/components/schemas/ProcessesSnapshot"
                network:
                    $ref: "#/components/schemas/NetworkSnapshot"
                hugetlb:
                    $ref: "#/components/schemas/HugeTLB"
        InstanceTelemetryReport:
            title: InstanceTelemetryReport
            type: object
            description: An Instance telemetry report.
            required:
                - request
                - snapshots
            properties:
                request:
                    $ref: "#/components/schemas/TelemetryReportRequest"
                snapshots:
                    description: An array of telemetry snapshots.
                    type: array
                    items:
                        $ref: "#/components/schemas/ResourceSnapshot"
        ServerInstancesSummary:
            title: ServerInstancesSummary
            type: object
            description: A Server ID and number of Instances of a specific Container it hosts.
            required:
                - server_id
                - instances
            properties:
                server_id:
                    $ref: "#/components/schemas/ID"
                instances:
                    type: integer
        CPUSpec:
            title: CPUServerSpec
            type: object
            description: Information about the CPU for a given server.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of CPUs.
                cores:
                    type: integer
                    description: The number of cores.
                threads:
                    type: integer
                    description: The number of threads.
                type:
                    type: string
                    description: The type of the CPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the CPU is shared.
                extra:
                    type: object
                    description: Extra information about the CPU if there is any.
                    additionalProperties:
                        type: string
        GPUSpec:
            title: GPUServerSpec
            type: object
            description: Information about a given servers GPU resources.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of GPUs.
                cores:
                    type: integer
                    description: The number of cores.
                vram_gb:
                    type: integer
                    description: The amount of virtaul RAM for the GPU.
                type:
                    type: string
                    description: The type of the GPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the GPU is shared.
                extra:
                    type: object
                    description: Extra information about the GPU if there is any.
                    additionalProperties:
                        type: string
        MemorySpec:
            title: MemoryServerSpec
            type: object
            description: Information about the memory resources of a given server.
            required:
                - size_gb
                - type
                - extra
            properties:
                size_gb:
                    type: integer
                    description: A number that represents the memory resources in GB.
                type:
                    type: string
                    description: The type of the memory resources.
                extra:
                    type: object
                    description: Extra inforamtion about the memory resources.
                    additionalProperties:
                        type: string
        StorageSpec:
            title: StorageServerSpec
            type: object
            description: Information about the storage resources for a given server.
            required:
                - count
                - size_gb
                - type
                - extra
            properties:
                count:
                    type: integer
                    description: The number of storage devices for a given server.
                size_gb:
                    type: integer
                    description: The total amount of storage on a given server, in GB.
                type:
                    type: string
                    description: The type of the storage device(s).
                extra:
                    type: object
                    description: Extra information about the storage resources for a given server.
                    additionalProperties:
                        type: string
        NetworkSpec:
            title: NetworkServerSpec
            type: object
            description: Information about the network resources for a given server.
            required:
                - count
                - scope
                - throughput
                - type
            properties:
                count:
                    type: integer
                    description: The number of network resources for a given server.
                scope:
                    type: string
                    description: The scope of the interfaces.
                    enum:
                        - public
                        - private
                        - shared
                throughput:
                    type: integer
                    description: The network throughput in MB(per second).
                type:
                    type: string
                    description: The type of the NIC.
        FeaturesSpec:
            title: FeaturesServerSpec
            type: object
            required:
                - raid
            description: The spec for server features.
            properties:
                raid:
                    type: string
                    description: The type of raid supported, if any.
                    nullable: true
                aws:
                    type: object
                    description: Features specific to AWS.
                    required:
                        - ena_support
                        - ebs_optimized
                    properties:
                        ena_support:
                            type: boolean
                            description: A boolean where true indicates this is a machine that can support a much higher networking throughput.
                        ebs_optimized:
                            type: boolean
                            description: A boolean where true indicates this is a machine that can support higher storage throughput.
        ServerSpecs:
            title: ServerSpecs
            description: Specs for a given server
            type: object
            required:
                - cpu
                - gpu
                - memory
                - storage
                - network
                - features
            properties:
                cpu:
                    $ref: "#/components/schemas/CPUSpec"
                gpu:
                    $ref: "#/components/schemas/GPUSpec"
                memory:
                    $ref: "#/components/schemas/MemorySpec"
                storage:
                    type: array
                    items:
                        $ref: "#/components/schemas/StorageSpec"
                network:
                    type: array
                    items:
                        $ref: "#/components/schemas/NetworkSpec"
                features:
                    $ref: "#/components/schemas/FeaturesSpec"
        ProviderServerSpec:
            title: ProviderServerSpec
            type: object
            description: Higher level information about a providers server.
            required:
                - identifier
                - category
                - model
                - locations
            properties:
                identifier:
                    type: string
                    description: A provider identifier
                integration_id:
                    type: string
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/ID"
                category:
                    type: string
                    description: A category for the server.
                class:
                    type: string
                    description: A class for the server.
                model:
                    type: string
                    description: The model of the server.
                locations:
                    description: A list of location ID's this server is available.
                    type: array
                    items:
                        type: string
                availability_zones:
                    type: object
                    additionalProperties:
                        type: array
                        items:
                            type: string
        ProviderServerModel:
            title: ProviderServerModel
            type: object
            description: A server from a provider.
            required:
                - id
                - name
                - description
                - specs
                - provider
                - price
                - compatible
                - low_resource
                - location_ids
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the server.
                description:
                    type: string
                    description: A description of the server.
                specs:
                    $ref: "#/components/schemas/ServerSpecs"
                provider:
                    $ref: "#/components/schemas/ProviderServerSpec"
                price:
                    $ref: "#/components/schemas/BillingAmount"
                compatible:
                    type: boolean
                    description: A boolean where true signifies this server is compatible with the platform.
                low_resource:
                    type: boolean
                    description: A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads.
                location_ids:
                    description: An array of location IDs where this server type is available.
                    type: array
                    items:
                        type: string
        ServerModelIncludes:
            title: ServerModelIncludes
            description: A resources that assocaited with a provider server.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderServerModel"
        ServerIncludes:
            title: ServerIncludes
            type: object
            description: A resource associated with a server.
            properties:
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
                models:
                    $ref: "#/components/schemas/ServerModelIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
        ContainerBackupTarget:
            title: ContainerBackupTarget
            type: object
            description: A target for the given Container Backup.
            required:
                - integration_id
                - path
                - size
                - file_id
            properties:
                integration_id:
                    $ref: "#/components/schemas/HybridIdentifier"
                path:
                    type: string
                    description: The target for where to store the Container Backup on the destination service.
                file_id:
                    type: string
                size:
                    type: integer
                    description: The total size of the backup.
        ContainerBackupState:
            title: ContainerBackupState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the Container Backup.
                          type: string
                          enum:
                              - saving
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ContainerBackup:
            title: ContainerBackup
            type: object
            description: A Container Backup.
            required:
                - id
                - hub_id
                - container_id
                - instance_id
                - target
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                container_id:
                    type: string
                    description: The ID of the given container.
                instance_id:
                    type: string
                    description: The ID of the instance the backup belongs to.
                target:
                    $ref: "#/components/schemas/ContainerBackupTarget"
                state:
                    $ref: "#/components/schemas/ContainerBackupState"
                events:
                    title: BackupEvents
                    type: object
                    description: A collection of timestamps for each event in the backup's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the backup was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the backup was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the backup was deleted.
                            $ref: "#/components/schemas/DateTime"
        ContainerBackupIncludes:
            title: ContainerBackupIncludes
            description: All includable resources linkable to the given Zone.
            type: object
            properties:
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
        ContainerBackupLogs:
            title: ContainerBackupLogs
            type: object
            description: Backup logs for a given container.
            required:
                - id
                - container_id
                - instance_id
                - backup_id
                - hub_id
                - type
                - log
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                container_id:
                    type: string
                    description: An identifier for the container.
                instance_id:
                    type: string
                    description: An identifier for the instance.
                backup_id:
                    type: string
                    description: An identifier for the backup.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                type:
                    type: string
                    description: The type of the backup log.
                    enum:
                        - restore
                        - backup
                log:
                    type: string
                    description: The log.
                error:
                    type: object
                    nullable: true
                    required:
                        - message
                    properties:
                        message:
                            type: string
                        message_internal:
                            type: string
                        stack:
                            type: array
                            items:
                                type: object
                                required:
                                    - file
                                    - function
                                    - line
                                properties:
                                    file:
                                        type: string
                                    function:
                                        type: string
                                    line:
                                        type: integer
                events:
                    title: BackupLogEvents
                    type: object
                    description: A collection of timestamps for each event in the backup log's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the backup log was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the backup log was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the backup log was deleted.
                            $ref: "#/components/schemas/DateTime"
        ZoneState:
            title: DNSZoneState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the zone.
                          type: string
                          enum:
                              - new
                              - pending
                              - verifying
                              - live
                              - disabled
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Zone:
            title: DNSZone
            type: object
            description: DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.
            required:
                - id
                - hub_id
                - creator
                - origin
                - hosted
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                origin:
                    type: string
                    description: The origin for the given DNS zone.
                hosted:
                    type: boolean
                    description: A boolean where true represents this zone is a hosted zone.
                state:
                    $ref: "#/components/schemas/ZoneState"
                events:
                    title: ZoneEvents
                    type: object
                    description: A collection of timestamps for each event in the DNS zone's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_verification
                        - verified
                    properties:
                        created:
                            description: The timestamp of when the DNS zone was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the DNS zone was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the DNS zone was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_verification:
                            description: The timestamp of when the DNS zone was last_verification.
                            $ref: "#/components/schemas/DateTime"
                        verified:
                            description: The timestamp of when the DNS zone was verified.
                            $ref: "#/components/schemas/DateTime"
        ZoneIncludes:
            title: ZoneIncludes
            description: All includable resources linkable to the given Zone.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        RecordIncludes:
            title: RecordIncludes
            description: All includable resources linkable to the given records.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                containers:
                    $ref: "#/components/schemas/ContainersIncludes"
                containers:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        Attempt:
            title: DNSTLSAttempt
            type: object
            description: A DNS TLS certificate generation attempt resource.
            required:
                - id
                - hub_id
                - domains
                - time
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                domains:
                    description: A list of domains associated with the attempt.
                    type: array
                    items:
                        type: string
                time:
                    description: A timestamp for when the attempt took place.
                    $ref: "#/components/schemas/DateTime"
                success:
                    description: A boolean where true means the attept was successful at creating the TLS certificate.
                    type: boolean
                error:
                    type: string
                    description: If success is false this property will be populated with an error.
        DnsTlsCertificate:
            title: Certificate
            type: object
            description: A DNS TLS certificate.
            required:
                - id
                - hub_id
                - domains
                - events
                - bundle
                - private_key
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                domains:
                    description: A list of domains associated with the certificate.
                    type: array
                    items:
                        type: string
                events:
                    title: CertificateEvents
                    type: object
                    description: A collection of timestamps for each event in the certificate's lifetime.
                    properties:
                        created:
                            description: "[unused]"
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: "[unused]"
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: "[unused]"
                            $ref: "#/components/schemas/DateTime"
                        generated:
                            description: When the certificate was generated; useful for calculating expiration (+90 days)
                            $ref: "#/components/schemas/DateTime"
                bundle:
                    description: The certificate bundle
                    type: string
                private_key:
                    description: The private key for the certificate
                    type: string
        HubUsageDatum:
            title: HubUsageDatum
            description: A hub usage data point
            type: object
            required:
                - time
                - servers
                - members
                - environments
                - containers
            properties:
                time:
                    type: string
                servers:
                    type: number
                members:
                    type: number
                environments:
                    type: number
                containers:
                    type: number
        Context:
            title: ActivityContext
            type: object
            description: ID context for resources associated with an activity.
            properties:
                environment_id:
                    type: string
                    description: An ID for the given resource.
                container_id:
                    type: string
                    description: An ID for the given resource.
                instance_id:
                    type: string
                    description: An ID for the given resource.
                server_id:
                    type: string
                    description: An ID for the given resource.
                stack_id:
                    type: string
                    description: An ID for the given resource.
                dns_zone_id:
                    type: string
                    description: An ID for the given resource.
        Session:
            title: ActivitySession
            type: object
            description: Session info about the activity entry.
            required:
                - url
                - ip
                - token
                - api_key
            properties:
                url:
                    type: string
                    description: URL endpoint assocaited with the activity context - does not include domain.
                ip:
                    type: string
                    description: The IP of the account associated with the session.
                token:
                    type: object
                    nullable: true
                    required:
                        - application_id
                        - application_capabilities_version
                    properties:
                        application_id:
                            $ref: "#/components/schemas/ID"
                        application_capabilities_version:
                            type: integer
                api_key:
                    type: string
                    description: The API key ID.
                    nullable: true
        Detail:
            title: ActivityDetail
            type: object
            description: Details about a given event that is part of an activity.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                number:
                    type: integer
                    description: A number describing the amount of the resource that exists.
                string:
                    type: string
                    description: Additional information.
        Change:
            title: ActivityChange
            type: object
            description: An object with information of details for before and after a resource changed.
            required:
                - component
            properties:
                component:
                    type: string
                    description: A description of the resource that was changed.
                before:
                    $ref: "#/components/schemas/Detail"
                after:
                    $ref: "#/components/schemas/Detail"
        ActivitySecurity:
            title: ActivitySecurity
            type: object
            description: Security information pertaining to this activity.
            required:
                - risk
                - surface
                - event
                - attack
            properties:
                risk:
                    type: string
                    description: |
                        A risk level assessed by the platform. Depending on the nature of the incident, this may change even if the event type is the same.
                    enum:
                        - info
                        - low
                        - medium
                        - high
                        - critical
                surface:
                    type: string
                    description: From where the platform has determined this security event originated from.
                    enum:
                        - network
                        - service
                        - fs
                        - api
                event:
                    type: string
                    description: How the platform has handled this security event.
                    enum:
                        - suggestion
                        - notice
                        - prevention
                        - detection
                        - reaction
                attack:
                    type: string
                    description: The type of attack the platform has determined has occurred.
                    enum:
                        - none
                        - auth-failure
                        - brute-force
                        - exploit-vulnerability
                        - social-engineer
                        - service-interruption
                        - access-elevation
        ActivityMonitor:
            title: ActivityMonitor
            type: object
            description: Details related to the monitor that raised this activity event.
            required:
                - level
                - event
                - state
            properties:
                level:
                    type: string
                    description: |
                        The severity of the event.
                    enum:
                        - info
                        - low
                        - medium
                        - high
                        - critical
                event:
                    type: string
                    description: How the platform has handled this monitor event.
                    enum:
                        - suggestion
                        - notice
                        - prevention
                        - detection
                        - reaction
                state:
                    type: string
                    description: The current state of the monitored resource
                    enum:
                        - none
                        - unknown
                        - unreachable
                        - flux
                        - recovered
        Activity:
            title: Activity
            type: object
            description: A resource representing information about activity taking place on a given hub.
            required:
                - id
                - hub_id
                - user
                - verbosity
                - context
                - session
                - changes
                - annotations
                - error
                - component
                - status
                - event
                - time
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                user:
                    type: object
                    description: Userscope
                    required:
                        - type
                        - id
                    properties:
                        type:
                            type: string
                            description: The type of user.
                            enum:
                                - account
                                - environment
                                - platform
                                - platform-pipeline
                                - employee
                                - api-key
                                - visitor
                        id:
                            type: string
                            description: The given user's ID.
                verbosity:
                    type: integer
                    description: |
                        A number representing the detail level (verbosity) of this activity.

                        ## Levels
                        - 0: activity that other users would find useful
                        - 1: activity that can be useful in tracking down how a user did something
                        - 2: full activity, can be useful in debugging problems
                context:
                    $ref: "#/components/schemas/Context"
                session:
                    type: object
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/Session"
                changes:
                    type: array
                    description: An array of changes.
                    items:
                        $ref: "#/components/schemas/Change"
                annotations:
                    type: object
                    description: A record of additional annotations for the activity.
                    additionalProperties: {}
                error:
                    type: object
                    description: An object describing a given activity error.
                    nullable: true
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: The error message.
                component:
                    type: object
                    description: An object holding information about a component.
                    nullable: true
                    required:
                        - id
                        - type
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        type:
                            type: string
                            description: The type of component.
                tags:
                    type: array
                    description: An array of tags that denote things such as a type of security event, or can be user-provided.
                    items:
                        type: string
                status:
                    type: string
                    description: A status for the given activity.
                    enum:
                        - info
                        - warn
                        - request
                        - success
                        - error
                        - alert
                security:
                    $ref: "#/components/schemas/ActivitySecurity"
                monitor:
                    $ref: "#/components/schemas/ActivityMonitor"
                event:
                    type: string
                    description: The activity event.
                    enum:
                        - hub.images.prune
                        - hub.update
                        - hub.create
                        - hub.task.delete
                        - hub.task.images.prune
                        - environment.services.discovery.reconfigure
                        - environment.services.lb.reconfigure
                        - environment.services.vpn.reconfigure
                        - environment.delete
                        - environment.initialize
                        - environment.start
                        - environment.stop
                        - environment.create
                        - environment.update
                        - environment.task.delete
                        - environment.services.discovery.task.reconfigure
                        - environment.services.lb.task.reconfigure
                        - environment.services.vpn.task.reconfigure
                        - environment.services.vpn.user.create
                        - environment.services.vpn.login
                        - environment.services.vpn.reset
                        - environment.services.vpn.task.reset
                        - environment.task.initialize
                        - environment.task.start
                        - environment.task.stop
                        - environment.task.deployments.reconfigure
                        - environment.deployments.reconfigure
                        - environment.deployments.prune
                        - environment.deployment.start
                        - environment.deployment.stop
                        - environment.scoped-variable.delete
                        - environment.scoped-variable.update
                        - environment.scoped-variable.task.delete
                        - environment.scoped-variable.create
                        - image.delete
                        - image.import
                        - image.create
                        - image.update
                        - image.task.delete
                        - image.task.import
                        - image.source.delete
                        - image.source.create
                        - image.source.update
                        - image.source.task.delete
                        - billing.invoice.task.void
                        - billing.invoice.task.credit
                        - billing.invoice.task.refund
                        - billing.invoice.pay
                        - billing.invoice.task.pay
                        - billing.order.confirm
                        - billing.order.task.confirm
                        - billing.method.update
                        - billing.method.delete
                        - billing.method.task.delete
                        - billing.method.create
                        - hub.apikey.update
                        - hub.apikey.delete
                        - hub.apikey.create
                        - hub.role.update
                        - hub.role.delete
                        - hub.role.create
                        - hub.role.task.delete
                        - hub.membership.delete
                        - hub.membership.create
                        - hub.membership.update
                        - hub.integration.create
                        - hub.integration.update
                        - hub.integration.delete
                        - container.initialize
                        - container.task.start
                        - container.start
                        - container.task.stop
                        - container.stop
                        - container.task.reconfigure
                        - container.reconfigure
                        - container.task.volumes.reconfigure
                        - container.volumes.reconfigure
                        - container.create
                        - container.restart
                        - container.task.reimage
                        - container.reimage
                        - container.update
                        - container.task.delete
                        - container.delete
                        - container.task.scale
                        - container.scale
                        - container.instances.create
                        - container.instances.delete
                        - container.instances.autoscale.up
                        - container.instances.autoscale.down
                        - container.instance.healthcheck.restarted
                        - container.instance.healthcheck.failed
                        - container.instance.error
                        - container.instance.ssh.login
                        - container.instance.migration.start
                        - container.instance.migration.revert
                        - container.instance.delete
                        - container.instance.task.migrate_revert
                        - container.instance.task.migrate
                        - container.backup.create
                        - container.backup.restore
                        - container.backup.delete
                        - container.backup.task.delete
                        - container.backup.task.restore
                        - dns.zone.verify
                        - dns.zone.delete
                        - dns.zone.task.verify
                        - dns.zone.update
                        - dns.zone.task.delete
                        - dns.zone.create
                        - dns.zone.record.delete
                        - dns.zone.record.cert.generate
                        - dns.zone.record.cert.generate.auto
                        - dns.zone.record.task.cert.generate
                        - dns.zone.record.update
                        - dns.zone.record.task.delete
                        - dns.zone.record.create
                        - stack.update
                        - stack.task.delete
                        - stack.create
                        - stack.task.prune
                        - stack.prune
                        - stack.build.create
                        - stack.build.generate
                        - stack.build.deploy
                        - stack.build.delete
                        - stack.build.task.delete
                        - stack.build.task.generate
                        - stack.build.task.deploy
                        - infrastructure.provider.update
                        - infrastructure.provider.task.delete
                        - infrastructure.provider.create
                        - infrastructure.provider.task.verify
                        - infrastructure.server.task.delete
                        - infrastructure.server.task.restart
                        - infrastructure.server.services.sftp.auth
                        - infrastructure.server.live
                        - infrastructure.server.delete
                        - infrastructure.server.restart
                        - infrastructure.server.compute.restart
                        - infrastructure.server.compute.spawner.restart
                        - infrastructure.server.features.reconfigure
                        - infrastructure.server.sharedfs.reconfigure
                        - infrastructure.server.provision
                        - infrastructure.server.console
                        - infrastructure.server.update
                        - infrastructure.server.task.provision
                        - infrastructure.server.ssh.token
                        - infrastructure.server.task.features.reconfigure
                        - infrastructure.server.task.sharedfs.reconfigure
                        - infrastructure.server.services.sftp.lockdown
                        - infrastructure.server.services.internal-api.throttle
                        - infrastructure.autoscale.group.create
                        - infrastructure.autoscale.group.update
                        - infrastructure.autoscale.group.task.delete
                        - infrastructure.autoscale.group.delete
                        - infrastructure.ips.pool.task.delete
                        - sdn.network.update
                        - sdn.network.task.delete
                        - sdn.network.create
                        - sdn.network.task.reconfigure
                        - pipeline.delete
                        - pipeline.trigger
                        - pipeline.update
                        - pipeline.task.delete
                        - pipeline.create
                        - pipeline.task.trigger
                        - pipeline.run.completed
                        - pipeline.key.update
                        - pipeline.key.delete
                        - pipeline.key.create
                time:
                    description: A timestamp for when the activity took place.
                    $ref: "#/components/schemas/DateTime"
        PoolProvider:
            title: IPPoolProvider
            type: object
            description: A IP Pool provider.
            required:
                - integration_id
                - location
                - reservation
                - server
                - server_assignment
                - vendor
            properties:
                vendor:
                    type: string
                    description: A vendor for a provider.
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: ID of the provider integration used to provision the IP.
                location:
                    type: string
                    description: Information about the location of the provider this pool is associated with.
                reservation:
                    type: string
                    description: A reservation identifier associated with the pool reservation.
                server:
                    type: string
                    description: A server identifier associated with the pool.
                server_assignment:
                    type: string
                    description: An identifier linked to the server assingment of the IP pool.
        PoolState:
            title: PoolState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pool.
                          type: string
                          enum:
                              - live
                              - releasing
                              - released
                - $ref: "#/components/schemas/State"
        Pool:
            title: InfrastructureIPPool
            type: object
            description: An IP Pool
            required:
                - id
                - hub_id
                - kind
                - provider
                - server_id
                - floating
                - location_id
                - ips
                - block
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                server_id:
                    type: string
                    description: An ID associated with a server resource.
                location_id:
                    type: string
                    description: An ID associated with a location resource.
                kind:
                    type: string
                    description: The type of IP pool.
                    enum:
                        - ipv4
                        - ipv6
                provider:
                    $ref: "#/components/schemas/PoolProvider"
                floating:
                    type: boolean
                    description: A boolean where true represents the pool as a floating IP pool.
                ips:
                    type: object
                    description: Data about IPs in the pool.
                    required:
                        - total
                        - available
                    properties:
                        total:
                            type: integer
                            description: The total number of IPs in the pool.
                        available:
                            type: integer
                            description: Of the total number of IP's how many are available to be assigned.
                block:
                    type: object
                    description: Network information about the pool.
                    required:
                        - cidr
                        - gateway
                        - netmask
                        - network
                    properties:
                        cidr:
                            type: string
                            description: A cidr for the pool.
                        gateway:
                            type: string
                            description: A gateway for the pool.
                        netmask:
                            type: string
                            description: A netmask for the pool.
                        network:
                            type: string
                            description: A network for the pool.
                state:
                    $ref: "#/components/schemas/PoolState"
        ApiKeyState:
            title: ApiKeyState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the API key.
                          type: string
                          enum:
                              - new
                              - configuring
                              - live
                              - inactive
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ApiKey:
            title: ApiKey
            description: An API key resource
            type: object
            required:
                - id
                - hub_id
                - name
                - creator
                - secret
                - permissions
                - capabilities
                - ips
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A name for the API key.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                secret:
                    type: string
                    description: The API key secret.
                permissions:
                    type: object
                    description: Information about this members permissions for a given resource.
                    required:
                        - all_environments
                        - environments
                    properties:
                        all_environments:
                            type: boolean
                            description: A boolean where true represents the member has access to view and manage all environments for the resource.
                        environments:
                            description: An array of environments this resource has access to.
                            type: array
                            items:
                                type: object
                                description: Environment resource resources.
                                required:
                                    - id
                                    - manage
                                properties:
                                    id:
                                        $ref: "#/components/schemas/ID"
                                    manage:
                                        type: boolean
                                        description: A boolean where true represents this environment can be managed by the resource (i.e. its not just read-only).
                capabilities:
                    type: object
                    description: An object holding information about the capabilities of this API key.
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                            description: A boolean where true represents this key has all available capabilities.
                        specific:
                            description: An array a capabilities this key has.
                            type: array
                            items:
                                $ref: "#/components/schemas/Capability"
                ips:
                    type: array
                    description: An array of IP's this API key can make calls from.
                    items:
                        type: string
                    nullable: true
                state:
                    $ref: "#/components/schemas/ApiKeyState"
                events:
                    title: HubEvents
                    type: object
                    description: A collection of timestamps for each event in the hub's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the hub was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the hub was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the hub was deleted.
                            $ref: "#/components/schemas/DateTime"
        NetworkState:
            title: NetworkState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the network.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        NetworkPrivacySettings:
            title: NetworkPrivacySettings
            type: object
            description: Private network information for a Cycle SDN.
            required:
                - vxlan_tag
                - subnet
                - mac_addr_suffix
                - ipv6
            properties:
                vxlan_tag:
                    type: integer
                    description: A tag used to ensure proper routing.
                subnet:
                    type: string
                    description: The subnet of the private network.
                mac_addr_suffix:
                    type: integer
                    description: A number used to ensure a MAC address exists for each network.
                ipv6:
                    type: object
                    description: IPv6 infromation for the network.
                    required:
                        - ip
                        - cidr
                    properties:
                        ip:
                            type: string
                            description: The networks IPv6 base.
                        cidr:
                            type: string
                            description: The private network CIDR.
        Network:
            title: Network
            type: object
            description: SDN Network resource.
            required:
                - id
                - name
                - identifier
                - cluster
                - creator
                - hub_id
                - state
                - private_network
                - environments
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the network.
                identifier:
                    type: string
                    description: A network identifier used to construct http calls that specifically use this network over another.
                cluster:
                    type: string
                    description: The infrastructure cluster the environments belonging to this network belong to.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    $ref: "#/components/schemas/NetworkState"
                private_network:
                    $ref: "#/components/schemas/NetworkPrivacySettings"
                environments:
                    description: An array of environments and timestamps.
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - added
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            added:
                                description: A timestamp of when the environment was added.
                                $ref: "#/components/schemas/DateTime"
                events:
                    title: NetworkEvents
                    type: object
                    description: A collection of timestamps for each event in the network's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
        ImageSourceCreateStep:
            title: ImageSourceCreateStep
            type: object
            description: Settings for the image source create step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.source.create
                details:
                    type: object
                    required:
                        - name
                        - type
                        - origin
                    properties:
                        name:
                            type: string
                        type:
                            type: string
                        about:
                            $ref: "#/components/schemas/ImageSourceAbout"
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
        FluidIdentifier:
            title: FluidIdentifier
            type: string
            description: |
                An identifier used in pipelines to refer to different kinds of resources across Cycle.

                ## Types:
                - `id:<mongo id>`: A raw resource ID
                - `resource:<a resource identifier>`: A compound identifier pointing to a resource.
                - `from:<stage/step>`: For referencing a previous pipeline step.
            example: |
                - id:6515098637b66c233ed164e7
                - resource:cluster:dev,env:demo,container:api
                - from:/image-create
        ImageCreateStep:
            title: ImageCreateStep
            type: object
            description: Settings for the image create step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.create
                details:
                    type: object
                    required:
                        - source
                    properties:
                        name:
                            nullable: true
                            type: string
                        source:
                            $ref: "#/components/schemas/FluidIdentifier"
                        build:
                            type: object
                            description: Optional build-time options for when this image is built on pipeline run.
                            properties:
                                args:
                                    type: object
                                    description: Build args passed into the container image build process during pipeline run.
                                    nullable: true
                                    additionalProperties:
                                        type: string
                        override:
                            nullable: true
                            type: object
                            description: An override object to be used for a single image create request.
                            properties:
                                target:
                                    description: For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag.
                                    nullable: true
                                    type: string
                                targz_url:
                                    description: For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
                                    nullable: true
                                    type: string
        ImageImportStep:
            title: ImageImportStep
            type: object
            description: Settings for the image import step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.import
                details:
                    type: object
                    required:
                        - image
                    properties:
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
        ImagesPruneStep:
            title: ImagePruneStep
            type: object
            description: Settings for the images prune step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - images.prune
                details:
                    type: object
                    required:
                        - source_ids
                    properties:
                        source_ids:
                            type: array
                            items:
                                $ref: "#/components/schemas/ID"
        ImageCreateImportStep:
            title: ImageCreateImportStep
            type: object
            description: A pipeline step for creating and importing an image in one go.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.create-import
                details:
                    type: object
                    required:
                        - source
                    properties:
                        name:
                            nullable: true
                            type: string
                        source:
                            $ref: "#/components/schemas/FluidIdentifier"
                        build:
                            type: object
                            description: Optional build-time options for when this image is built on pipeline run.
                            properties:
                                args:
                                    type: object
                                    description: Build args passed into the container image build process during pipeline run.
                                    nullable: true
                                    additionalProperties:
                                        type: string
                        override:
                            nullable: true
                            type: object
                            description: An override object to be used for a single image create request.
                            properties:
                                target:
                                    description: For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag.
                                    nullable: true
                                    type: string
                                targz_url:
                                    description: For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
                                    nullable: true
                                    type: string
        ContainerCreateStep:
            title: ContainerCreateStep
            type: object
            description: Settings for the create container step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.create
                details:
                    type: object
                    required:
                        - name
                        - environment
                        - image
                        - stateful
                        - config
                        - volumes
                    properties:
                        name:
                            type: string
                        identifier:
                            type: string
                            nullable: true
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
                        stateful:
                            type: boolean
                        annotations:
                            type: object
                            nullable: true
                            description: Additional information about a container
                            additionalProperties: {}
                        config:
                            $ref: "#/components/schemas/Config"
                        volumes:
                            type: array
                            items:
                                $ref: "#/components/schemas/ContainerVolume"
                        deployment:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Deployment"
        ContainerStartStep:
            title: ContainerStartStep
            type: object
            description: Settings for starting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.start
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerStopStep:
            title: ContainerStopStep
            type: object
            description: Settings for stopping a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.stop
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerDeleteStep:
            title: ContainerDeleteStep
            type: object
            description: Settings for deleting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.delete
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerReimageStep:
            title: ContainerReimageStep
            type: object
            description: Settings for reimaging a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.reimage
                details:
                    type: object
                    required:
                        - image
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
                        options:
                            type: object
                            required:
                                - allow_incompatible
                            properties:
                                allow_incompatible:
                                    type: boolean
        ContainerRestartStep:
            title: ContainerRestartStep
            type: object
            description: Settings for restarting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.restart
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentCreateStep:
            title: EnvironmentCreateStep
            type: object
            description: Settings for creating an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.create
                details:
                    type: object
                    required:
                        - name
                        - cluster
                        - features
                    properties:
                        name:
                            type: string
                        about:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/EnvironmentAbout"
                        cluster:
                            type: string
                        features:
                            $ref: "#/components/schemas/Features"
        EnvironmentStartStep:
            title: EnvironmentStartStep
            type: object
            description: Settings for starting an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.start
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentStopStep:
            title: EnvironmentStopStep
            type: object
            description: Settings for stopping an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.stop
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeleteStep:
            title: EnvironmentDeleteStep
            type: object
            description: Settings for deleting an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.delete
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeploymentStartStep:
            title: EnvironmentDeploymentStartStep
            type: object
            description: Start all containers with a specific deployment version/tag within an environment.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.start
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type: string
                            nullable: true
                        version:
                            type: string
                            nullable: true
        EnvironmentDeploymentStopStep:
            title: EnvironmentDeploymentStopStep
            type: object
            description: Stop all containers with a specific deployment version/tag within an environment.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.stop
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type: string
                            nullable: true
                        version:
                            type: string
                            nullable: true
        EnvironmentDeploymentsTagStep:
            title: EnvironmentDeploymentsTagStep
            type: object
            description: Settings for updating a deployment tag to another deployment version.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployments.tag
                details:
                    type: object
                    required:
                        - environment
                        - tag
                        - deployment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            $ref: "#/components/schemas/Identifier"
                        deployment:
                            type: object
                            required:
                                - version
                            properties:
                                version:
                                    $ref: "#/components/schemas/Version"
        EnvironmentDeploymentsPruneStep:
            title: EnvironmentDeploymentsPruneStep
            type: object
            description: Remove any containers that are part of a deployment that does NOT have a tag associated with it.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployments.prune
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeploymentHealthyWatchStep:
            title: EnvironmentDeploymentHealthyWatchStep
            type: object
            description: |
                Waits for a deployment to be considered 'healthy' before allowing the pipeline to continue.
                A deployement is considered 'healthy' when all instances of all containers that have had a state change in the last 15 minutes
                that have health checks defined, become healthy.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.healthy.watch
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type: string
                            nullable: true
                        version:
                            type: string
                            nullable: true
                        max_wait:
                            type: string
                            nullable: true
                            description: The maximum amount of time to wait for the deployment to become healthy before failing this step.
                            allOf:
                                - $ref: "#/components/schemas/Duration"
        StackBuildCreateStep:
            title: StackBuildCreateStep
            type: object
            description: Settings for creating a stack build in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.create
                details:
                    type: object
                    required:
                        - stack
                    properties:
                        stack:
                            $ref: "#/components/schemas/FluidIdentifier"
                        instructions:
                            type: object
                            nullable: true
                            description: Additional instructions used when generating this stack build.
                            properties:
                                git:
                                    type: object
                                    description: Git information specifics.
                                    required:
                                        - type
                                        - value
                                    properties:
                                        type:
                                            type: string
                                            description: The type of information the user is passing.
                                            enum:
                                                - branch
                                                - hash
                                                - tag
                                        value:
                                            type: string
                                            description: The actual value to be passed.
                                variables:
                                    type: object
                                    description: Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map.
                                    additionalProperties:
                                        type: string
                        about:
                            type: object
                            nullable: true
                            description: Information about the stack build.
                            required:
                                - version
                                - description
                            properties:
                                version:
                                    type: string
                                    description: A user defined version of the build.
                                description:
                                    type: string
                                    description: A user defined description for the build.
        StackBuildGenerateStep:
            title: StackBuildGenerateStep
            type: object
            description: Settings for the stack build generate step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.generate
                details:
                    type: object
                    required:
                        - build
                    properties:
                        build:
                            $ref: "#/components/schemas/FluidIdentifier"
        StackDeployContainersObject:
            title: StackDeployContainersObject
            type: object
            description: Options to control how a container behaves when a stack build is deployed.
            required:
                - reimage
                - reconfigure
            properties:
                reimage:
                    type: boolean
                    description: A boolean where true represents the container is to be reimaged.
                reconfigure:
                    type: boolean
                    description: A boolean where true represents the container is to be reconfigured.
        StackBuildDeploymentUpdates:
            title: StackBuildDeploymentUpdates
            type: object
            description: Optional update object used to specify specific params to update from the stack build.
            required:
                - containers
                - scoped_variables
            properties:
                containers:
                    type: object
                    description: A map of the container names to update within the environment.
                    additionalProperties:
                        $ref: "#/components/schemas/StackDeployContainersObject"
                    minProperties: 1
                scoped_variables:
                    nullable: true
                    type: object
                    description: An object that describes configuration options for scoped variables on stack build.
                    required:
                        - add_new
                        - replace_existing
                    properties:
                        add_new:
                            description: Add new scoped variables defined in the stack.
                            type: boolean
                        replace_existing:
                            description: Replace all scoped variables with those defined in the stack.
                            type: boolean
        StackBuildDeployStep:
            title: StackBuildDeployStep
            type: object
            description: Settings for deploying a stack build in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.deploy
                details:
                    type: object
                    required:
                        - environment
                        - build
                    properties:
                        build:
                            $ref: "#/components/schemas/FluidIdentifier"
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        update:
                            nullable: true
                            type: object
                            allOf:
                                - $ref: "#/components/schemas/StackBuildDeploymentUpdates"
                        deployment:
                            nullable: true
                            type: object
                            allOf:
                                - $ref: "#/components/schemas/Deployment"
        StackPruneStep:
            title: StackPruneStep
            type: object
            description: Settings for pruning a stack in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.prune
                details:
                    type: object
                    required:
                        - stack
                    properties:
                        stack:
                            $ref: "#/components/schemas/FluidIdentifier"
                        criteria:
                            nullable: true
                            type: object
                            properties:
                                expire:
                                    nullable: true
                                    $ref: "#/components/schemas/Duration"
        SleepStep:
            title: SleepStep
            type: object
            description: Settings for the sleep step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - sleep
                details:
                    type: object
                    properties:
                        duration:
                            description: Total duration to run this step for, before moving on to the next step.
                            $ref: "#/components/schemas/Duration"
        WebhookStepOptions:
            title: WebhookStepOptions
            description: Options for configuring webhook pipeline steps.
            type: object
            properties:
                max_attempts:
                    type: integer
                    nullable: true
                interval:
                    description: How long to wait between retries on wait.
                    type: string
                    nullable: true
                    allOf:
                        - $ref: "#/components/schemas/Duration"
                fail_on:
                    nullable: true
                    type: object
                    required:
                        - not
                    properties:
                        not:
                            type: boolean
                            description: If true, will fail on any codes NOT defined in the http_codes array.
                        http_codes:
                            type: array
                            nullable: true
                            description: A list of http response codes that will trigger a failure.
                            items:
                                type: integer
                retry_on:
                    nullable: true
                    type: object
                    required:
                        - not
                    properties:
                        not:
                            type: boolean
                            description: If true, will retry on any codes NOT defined in the http_codes array.
                        http_codes:
                            type: array
                            nullable: true
                            description: A list of http response codes that will trigger a retry.
                            items:
                                type: integer
        WebhookPostStep:
            title: WebhookPostStep
            description: |
                A pipeline step that will make a POST request to the specified endpoints. The webhook will post the full body of the resource referenced by the step.
                For example if you were to reference a step creating a container, you would receive that container object in the post body. 
                You may also specify a custom body instead.
            type: object
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - webhook.post
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
                            description: The url to submit a POST request to.
                        headers:
                            type: object
                            nullable: true
                            description: An optional map of headers to send with the request.
                            additionalProperties:
                                type: string
                        options:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/WebhookStepOptions"
                        body:
                            nullable: true
                            type: string
                            description: An optional POST body to send with the request. Cannot be used with `from``.
                        from:
                            type: string
                            nullable: true
                            description: Takes the output from a previous step and uses it as the body for the POST request. Cannot be used with `body`. String format is <stageIdentifier/stepIdentifier>
                            example: init/image-create
        WebhookGetStep:
            title: WebhookGetStep
            description: |
                A pipeline step that will make a GET request to the specified endpoint.
            type: object
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - webhook.get
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
                            description: The url to submit a POST request to.
                        headers:
                            type: object
                            nullable: true
                            description: An optional map of headers to send with the request.
                            additionalProperties:
                                type: string
                        options:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/WebhookStepOptions"
        PipelineSteps:
            title: PipelineStep
            description: A step for a pipeline stage.
            discriminator:
                propertyName: action
                mapping:
                    image.source.create: "#/components/schemas/ImageSourceCreateStep"
                    image.create: "#/components/schemas/ImageCreateStep"
                    image.import: "#/components/schemas/ImageImportStep"
                    images.prune: "#/components/schemas/ImagesPruneStep"
                    image.create-import: "#/components/schemas/ImageCreateImportStep"
                    container.create: "#/components/schemas/ContainerCreateStep"
                    container.start: "#/components/schemas/ContainerStartStep"
                    container.stop: "#/components/schemas/ContainerStopStep"
                    container.delete: "#/components/schemas/ContainerDeleteStep"
                    container.reimage: "#/components/schemas/ContainerReimageStep"
                    container.restart: "#/components/schemas/ContainerRestartStep"
                    environment.create: "#/components/schemas/EnvironmentCreateStep"
                    environment.start: "#/components/schemas/EnvironmentStartStep"
                    environment.stop: "#/components/schemas/EnvironmentStopStep"
                    environment.delete: "#/components/schemas/EnvironmentDeleteStep"
                    environment.deployment.start: "#/components/schemas/EnvironmentDeploymentStartStep"
                    environment.deployment.stop: "#/components/schemas/EnvironmentDeploymentStopStep"
                    environment.deployments.tag: "#/components/schemas/EnvironmentDeploymentsTagStep"
                    environment.deployments.prune: "#/components/schemas/EnvironmentDeploymentsPruneStep"
                    environment.deployment.healthy.watch: "#/components/schemas/EnvironmentDeploymentHealthyWatchStep"
                    stack.build.create: "#/components/schemas/StackBuildCreateStep"
                    stack.build.generate: "#/components/schemas/StackBuildGenerateStep"
                    stack.build.deploy: "#/components/schemas/StackBuildDeployStep"
                    stack.prune: "#/components/schemas/StackPruneStep"
                    sleep: "#/components/schemas/SleepStep"
                    webhook.post: "#/components/schemas/WebhookPostStep"
                    webhook.get: "#/components/schemas/WebhookGetStep"
            oneOf:
                - $ref: "#/components/schemas/ImageSourceCreateStep"
                - $ref: "#/components/schemas/ImageCreateStep"
                - $ref: "#/components/schemas/ImageImportStep"
                - $ref: "#/components/schemas/ImagesPruneStep"
                - $ref: "#/components/schemas/ImageCreateImportStep"
                - $ref: "#/components/schemas/ContainerCreateStep"
                - $ref: "#/components/schemas/ContainerStartStep"
                - $ref: "#/components/schemas/ContainerStopStep"
                - $ref: "#/components/schemas/ContainerDeleteStep"
                - $ref: "#/components/schemas/ContainerReimageStep"
                - $ref: "#/components/schemas/ContainerRestartStep"
                - $ref: "#/components/schemas/EnvironmentCreateStep"
                - $ref: "#/components/schemas/EnvironmentStartStep"
                - $ref: "#/components/schemas/EnvironmentStopStep"
                - $ref: "#/components/schemas/EnvironmentDeleteStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentStartStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentStopStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentsTagStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentsPruneStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentHealthyWatchStep"
                - $ref: "#/components/schemas/StackBuildCreateStep"
                - $ref: "#/components/schemas/StackBuildGenerateStep"
                - $ref: "#/components/schemas/StackBuildDeployStep"
                - $ref: "#/components/schemas/StackPruneStep"
                - $ref: "#/components/schemas/WebhookPostStep"
                - $ref: "#/components/schemas/WebhookGetStep"
                - $ref: "#/components/schemas/SleepStep"
        PipelineStage:
            title: PipelineStage
            type: object
            description: A stage for a given pipeline.
            required:
                - identifier
                - steps
            properties:
                identifier:
                    type: string
                    description: A stage identifier.
                steps:
                    type: array
                    description: An array of steps for the stage.
                    items:
                        $ref: "#/components/schemas/PipelineSteps"
                options:
                    type: object
                    description: Additonal options for the stage.
                    properties:
                        skip:
                            type: boolean
                            description: A boolean where true indicates the given stage should be skipped when the pipeline is run.
        PipelineState:
            title: PipelineState
            type: object
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pipeline.
                          type: string
                          enum:
                              - live
                              - acquiring
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Pipeline:
            title: Pipeline
            type: object
            description: A pipeline resource.
            required:
                - id
                - hub_id
                - name
                - creator
                - dynamic
                - disable
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                name:
                    type: string
                    description: A name for the pipeline.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                disable:
                    type: boolean
                    description: A boolean where true signifies the pipeline is disabled.
                dynamic:
                    type: boolean
                    description: Setting to true enables variable and other advanced logic support on this pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                stages:
                    description: An array of stages.
                    type: array
                    items:
                        $ref: "#/components/schemas/PipelineStage"
                events:
                    title: PipelineEvents
                    type: object
                    description: A collection of timestamps for each event in the pipeline's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_run
                    properties:
                        created:
                            description: The timestamp of when the pipeline was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the pipeline was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the pipeline was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_run:
                            description: The timestamp of when the pipeline was last run.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/PipelineState"
        TriggerKeyState:
            title: TriggerKeyState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the trigger key.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        TriggerKey:
            title: TriggerKey
            type: object
            description: A pipeline trigger key resource.
            required:
                - id
                - name
                - secret
                - creator
                - hub_id
                - pipeline_id
                - state
                - events
                - ips
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the trigger key.
                secret:
                    type: string
                    description: The secret used when calling the trigger key programmatically.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                pipeline_id:
                    type: string
                    description: The ID for the pipeline related to this trigger key.
                state:
                    $ref: "#/components/schemas/TriggerKeyState"
                events:
                    title: TriggerKeyEvents
                    type: object
                    description: A collection of timestamps for each event in the trigger key's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the trigger key was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the trigger key was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the trigger key was deleted.
                            $ref: "#/components/schemas/DateTime"
                ips:
                    description: An array of ips this trigger key is usable from.
                    type: array
                    items:
                        type: string
        AutoScaleGroupScale:
            title: AutoScaleGroupScale
            type: object
            properties:
                down:
                    title: AutoScaleGroupScaleDown
                    type: object
                    properties:
                        min_ttl:
                            description: The minimum TTL for the server once deployed through an autoscale event.
                            $ref: "#/components/schemas/Duration"
                        inactivity_period:
                            description: The amount of time between last instance deployed and when the server can begin to get deleted.
                            $ref: "#/components/schemas/Duration"
                        method:
                            type: string
                            enum:
                                - fifo
                                - lifo
                up:
                    title: AutoScaleGroupScaleUp
                    type: object
                    properties:
                        maximum:
                            type: integer
        AutoScaleGroupInfrastructure:
            title: AutoScaleGroupInfrastructure
            type: object
            required:
                - models
            properties:
                models:
                    type: array
                    items:
                        type: object
                        required:
                            - provider
                            - model_id
                            - priority
                            - locations
                        properties:
                            provider:
                                type: string
                                description: The integration identifier for infrastructure provider used.
                            integration_id:
                                $ref: "#/components/schemas/ID"
                                description: The ID of the integration associated with this auto-scale group infrastructure.
                            model_id:
                                type: string
                            priority:
                                type: integer
                            locations:
                                type: array
                                items:
                                    type: object
                                    required:
                                        - id
                                        - availability_zones
                                    properties:
                                        id:
                                            type: string
                                        availability_zones:
                                            type: array
                                            items:
                                                type: string
        AutoScaleGroup:
            title: AutoScaleGroup
            type: object
            required:
                - id
                - name
                - identifier
                - creator
                - hub_id
                - cluster
                - infrastructure
                - state
                - events
                - cache
            properties:
                id:
                    type: string
                name:
                    type: string
                identifier:
                    type: string
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    type: string
                cluster:
                    type: string
                scale:
                    $ref: "#/components/schemas/AutoScaleGroupScale"
                infrastructure:
                    $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
                state:
                    title: AutoScaleGroupState
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the auto-scale group.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    title: AutoScaleGroupEvents
                    type: object
                    description: A collection of timestamps for each event in the auto-scale group's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_sync
                    properties:
                        created:
                            description: The timestamp of when the auto-scale group was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the auto-scale group was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the auto-scale group was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_sync:
                            description: The timestamp of when the auto-scale group was last synced.
                            $ref: "#/components/schemas/DateTime"
        PipelineRunEvents:
            title: PipelineRunEvents
            type: object
            description: A collection of timestamps for each event in the pipeline run's lifetime.
            required:
                - started
                - queued
                - finished
            properties:
                started:
                    description: The timestamp of when the pipeline run was started.
                    $ref: "#/components/schemas/DateTime"
                queued:
                    description: The timestamp of when the pipeline run was queued.
                    $ref: "#/components/schemas/DateTime"
                finished:
                    description: The timestamp of when the pipeline run was finished.
                    $ref: "#/components/schemas/DateTime"
        RunState:
            title: PipelineRunState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pipeline run.
                          type: string
                          enum:
                              - new
                              - queued
                              - running
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        PipelineRun:
            title: PipelineRun
            type: object
            description: A pipeline run resource.
            required:
                - id
                - creator
                - hub_id
                - pipeline_id
                - stages
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                pipeline_id:
                    type: string
                    description: The ID for the pipeline this run belongs to.
                stages:
                    type: array
                    description: An array of pipeline stages.
                    items:
                        type: object
                        required:
                            - identifier
                            - steps
                            - events
                        properties:
                            identifier:
                                type: string
                                description: A stage identifier.
                            steps:
                                type: array
                                items:
                                    type: object
                                    required:
                                        - identifier
                                        - action
                                        - events
                                        - success
                                    properties:
                                        identifier:
                                            type: string
                                        action:
                                            type: string
                                            enum:
                                                - environment.create
                                                - environment.start
                                                - environment.stop
                                                - environment.delete
                                                - environment.deployments.prune
                                                - environment.deployments.tag
                                                - environment.deployment.start
                                                - environment.deployment.stop
                                                - environment.deployment.healthy.watch
                                                - image.source.create
                                                - image.create
                                                - image.import
                                                - images.prune
                                                - image.create-import
                                                - container.create
                                                - container.reimage
                                                - container.start
                                                - container.stop
                                                - container.restart
                                                - container.delete
                                                - stack.build.create
                                                - stack.build.deploy
                                                - stack.build.generate
                                                - stack.prune
                                                - sleep
                                                - webhook.post
                                                - webhook.get
                                        events:
                                            $ref: "#/components/schemas/PipelineRunEvents"
                                        success:
                                            type: boolean
                                        error:
                                            type: object
                                            nullable: true
                                            description: An error, if any, that has occurred for this step.
                                            required:
                                                - message
                                            properties:
                                                message:
                                                    type: string
                                                    description: Details about the error that has occurred.
                            events:
                                $ref: "#/components/schemas/PipelineRunEvents"
                state:
                    $ref: "#/components/schemas/RunState"
                events:
                    $ref: "#/components/schemas/PipelineRunEvents"
                variables:
                    type: object
                    description: A map of variable values used during pipeline run.
                    additionalProperties:
                        type: string
        ComponentsIncludes:
            title: ComponentIncludes
            type: object
            description: A resource thats assocaited with activity.
            additionalProperties:
                oneOf:
                    - $ref: "#/components/schemas/Container"
                    - $ref: "#/components/schemas/Instance"
                    - $ref: "#/components/schemas/Environment"
                    - $ref: "#/components/schemas/Image"
                    - $ref: "#/components/schemas/ImageSource"
                    - $ref: "#/components/schemas/Server"
                    - $ref: "#/components/schemas/Pool"
                    - $ref: "#/components/schemas/Integration"
                    - $ref: "#/components/schemas/Stack"
                    - $ref: "#/components/schemas/StackBuild"
                    - $ref: "#/components/schemas/Zone"
                    - $ref: "#/components/schemas/Record"
                    - $ref: "#/components/schemas/ApiKey"
                    - $ref: "#/components/schemas/Network"
                    - $ref: "#/components/schemas/HubMembership"
                    - $ref: "#/components/schemas/Pipeline"
                    - $ref: "#/components/schemas/TriggerKey"
                    - $ref: "#/components/schemas/ScopedVariable"
                    - $ref: "#/components/schemas/Hub"
                    - $ref: "#/components/schemas/Invoice"
                    - $ref: "#/components/schemas/Method"
                    - $ref: "#/components/schemas/AutoScaleGroup"
                    - $ref: "#/components/schemas/PipelineRun"
                    - $ref: "#/components/schemas/Role"
        ActivityIncludes:
            title: ActivityIncludes
            description: All includable resources linkable to the given records.
            type: object
            properties:
                users:
                    $ref: "#/components/schemas/CreatorInclude"
                components:
                    $ref: "#/components/schemas/ComponentsIncludes"
        Component:
            title: IndexComponent
            type: object
            description: Generic component format for describing resources for the search index
            required:
                - id
                - name
                - state
                - events
                - context_blobs
                - associations
            properties:
                id:
                    description: ID of the component
                    type: string
                name:
                    description: Name of the component
                    type: string
                identifier:
                    $ref: "#/components/schemas/Identifier"
                state:
                    description: State of the component
                    type: string
                events:
                    $ref: "#/components/schemas/Events"
                context_blobs:
                    description: related strings for fuzzy search
                    type: array
                    items:
                        type: string
                associations:
                    type: object
                    description: Component associations
                    properties:
                        container:
                            description: Associated container Id
                            type: string
                        environment:
                            description: Associated environment Id
                            type: string
                        image-source:
                            description: Associated image source Id
                            type: string
                        image:
                            description: Associated image Id
                            type: string
                        stack:
                            description: Associated stack Id
                            type: string
                        server:
                            description: Associated server Id
                            type: string
                        provider-location:
                            description: Associated provider location Id
                            type: string
        Index:
            title: Index
            type: object
            description: An index that enables search in the portal
            required:
                - generated
                - hub_id
                - containers
                - environments
                - image_sources
                - dns_zones
                - stacks
                - servers
            properties:
                generated:
                    description: The timestampof when the index was generated
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    description: Id describing the Hub
                    type: string
                containers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                environments:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                image_sources:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                dns_zones:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                stacks:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                servers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
        ImageIncludes:
            title: ImageIncludes
            description: All includable resources linkable to the given image.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                stacks:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                sources:
                    $ref: "#/components/schemas/ImageSourceIncludes"
                sources:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        BuildLog:
            title: ImageBuildLog
            description: A build log for a given image.
            type: object
            required:
                - id
                - image_id
                - hub_id
                - log
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                image_id:
                    type: string
                    description: The ID of the image the build log pertains to.
                log:
                    type: string
                    description: The log itself.
                events:
                    title: BuildLogEvents
                    type: object
                    description: A collection of timestamps for each event in the build log's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the build log was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the build log was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the build log was deleted.
                            $ref: "#/components/schemas/DateTime"
        SourceIncludes:
            title: SourceIncludes
            description: A resource associate with an image source.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        InfrastructureResourceSummary:
            title: InfrastructureResourceSummary
            type: object
            description: A summary of resource utilization/availability.
            required:
                - ram
                - cpu
            properties:
                ram:
                    type: object
                    description: Information about RAM Resources.
                    required:
                        - total_mb
                        - allocated_mb
                        - used_mb
                    properties:
                        total_mb:
                            type: integer
                            description: The total amount of RAM in MBsr.
                        allocated_mb:
                            type: integer
                            description: The total amount of allocated RAM in MBs.
                        used_mb:
                            type: integer
                            description: The total amount of used RAM in MBs.
                        provisioned_mb:
                            type: integer
                            description: The total amount of provisioned RAM in MBs.
                cpu:
                    type: object
                    description: Information about CPU resources.
                    required:
                        - cores
                        - shares
                        - shares_ratio
                    properties:
                        cores:
                            type: integer
                            description: The number of CPU cores.
                        shares:
                            type: object
                            description: Information about CPU shares.
                            required:
                                - allocated
                                - total
                            properties:
                                allocated:
                                    type: integer
                                    description: The number of shares allocated.
                                total:
                                    type: integer
                                    description: The total number of shares available.
                        share_ratio:
                            type: integer
                            description: The ratio of shares allocated to total shares.
        ClusterVersionServerCount:
            title: ClusterVersionServerCount
            description: A count of servers in a cluster with the given version of Cycle software
            type: object
            required:
                - agent
                - agent-spawner
                - compute
                - compute-spawner
            properties:
                agent:
                    type: object
                    additionalProperties:
                        type: number
                agent-spawner:
                    type: object
                    additionalProperties:
                        type: number
                compute:
                    type: object
                    additionalProperties:
                        type: number
                compute-spawner:
                    type: object
                    additionalProperties:
                        type: number
        InfrastructureSummary:
            title: InfrastructureSummary
            description: An infrastructure summary resource.
            type: object
            required:
                - hub_id
                - images
                - clusters
                - updated
                - servers
            properties:
                hub_id:
                    $ref: "#/components/schemas/HubID"
                servers:
                    type: number
                    description: The number of servers on the cluster
                images:
                    type: object
                    description: Statistics about image usage.
                    required:
                        - tier
                    properties:
                        tier:
                            type: object
                            description: Image tier information.
                            required:
                                - total_mb
                                - allocated_mb
                                - used_mb
                            properties:
                                total_mb:
                                    type: integer
                                    description: A value in MB representing the total MB of space on the infrastructure available for images.
                                allocated_mb:
                                    type: integer
                                    description: A value in MB representing the amount of allocated space for images.
                                used_mb:
                                    type: integer
                                    description: A value in MB representing the total MB of space images are taking up out of the total megabytes available.
                clusters:
                    type: object
                    description: Records pointing to information about clusters that make up this hubs infrastructure.
                    additionalProperties:
                        type: object
                        required:
                            - name
                            - resources
                            - servers
                            - instances
                            - healthy
                            - versions
                        properties:
                            name:
                                type: string
                                description: The name of the cluster
                            resources:
                                $ref: "#/components/schemas/InfrastructureResourceSummary"
                                description: Information about the aggregate resources of the cluster.
                            healthy:
                                type: boolean
                                description: Whether Cycle has determined this cluster to be healthy or not.
                            versions:
                                $ref: "#/components/schemas/ClusterVersionServerCount"
                            instances:
                                $ref: "#/components/schemas/StateCountSummary"
                            servers:
                                type: object
                                required:
                                    - count
                                    - providers
                                properties:
                                    count:
                                        type: number
                                    providers:
                                        type: object
                                        additionalProperties:
                                            type: object
                                            required:
                                                - count
                                            properties:
                                                count:
                                                    type: number
                                                locations:
                                                    type: object
                                                    nullable: true
                                                    additionalProperties:
                                                        type: number
                                                models:
                                                    type: object
                                                    nullable: true
                                                    additionalProperties:
                                                        type: number
                                                resources:
                                                    $ref: "#/components/schemas/InfrastructureResourceSummary"
                                    server_ids:
                                        type: array
                                        description: IDs of all servers in this cluster.
                                        items:
                                            $ref: "#/components/schemas/ID"
                updated:
                    description: A timestamp of when the infrastructure was last updated.
                    $ref: "#/components/schemas/DateTime"
        ServerModelsIncludes:
            title: ServerModelsIncludes
            description: A resource associated with a server models.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderServerModel"
        AutoScaleGroupIncludes:
            title: AutoScaleGroupIncludes
            description: All includable resource linkable to the given auto-scale group.
            type: object
            properties:
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                models:
                    $ref: "#/components/schemas/ServerModelsIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
        ServerStatsCpuUsageTelemetry:
            title: ServerStatsCpuUsageTelemetry
            type: object
            properties:
                user:
                    type: number
                    format: float
                nice:
                    type: number
                    format: float
                system:
                    type: number
                    format: float
                idle:
                    type: number
                    format: float
                iowait:
                    type: number
                    format: float
                irq:
                    type: number
                    format: float
                soft_irq:
                    type: number
                    format: float
                steal:
                    type: number
                    format: float
                guest:
                    type: number
                    format: float
                guest_nice:
                    type: number
                    format: float
        ServerStatsRamTelemetry:
            title: ServerStatsRamTelemetry
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: number
                    format: float
                    description: The available RAM on the server.
                free:
                    type: number
                    format: float
                    description: The free RAM on the server.
                total:
                    type: number
                    format: float
                    description: The total RAM on the server.
        ServerStatsTelemetry:
            title: ServerStatsTelemetry
            type: object
            description: Statistics about a given servers telemetery data.
            required:
                - time
                - load
                - ram
                - storage_base
                - storage_pool
            properties:
                time:
                    description: The timestamp for when the telemetery data was collected.
                    $ref: "#/components/schemas/DateTime"
                cpu_usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsageTelemetry"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRamTelemetry"
                storage_base:
                    type: object
                    description: Telemetry data for the base volume of a given server.
                    required:
                        - used
                        - free
                        - total
                    properties:
                        used:
                            type: integer
                            description: The amount of storage currently used in the base volume.
                        free:
                            type: integer
                            description: The amount of free space on the base volume.
                        total:
                            type: integer
                            description: The total amount of space on the base volume.
                storage_pool:
                    type: object
                    description: User data storage across all devices.
                    required:
                        - data_percent
                        - meta_percent
                        - total
                    properties:
                        data_percent:
                            type: number
                            description: The percentage of storage used by user data.
                        meta_percent:
                            type: number
                            description: The percentage of storage used by the file allocation stables, etc.
                        total:
                            type: number
                            description: The total amount of storage available.
        ReconfigureSharedFs:
            title: ReconfigureSharedFs
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - sharedfs.reconfigure
                contents:
                    type: object
                    properties:
                        mounts:
                            nullable: true
                            type: object
                            additionalProperties:
                                type: object
                                required:
                                    - type
                                    - options
                                    - source
                                properties:
                                    type:
                                        type: string
                                        description: String describing the server mount type.
                                    options:
                                        type: string
                                        description: Comma separated string describing the server mount options.
                                        example: key1=value1,key2=value2
                                    source:
                                        type: string
                                        description: String describing the server mount source.
                        directories:
                            nullable: true
                            type: object
                            description: An object describing directory identifiers with value {}.
                            additionalProperties: {}
        ReconfigureServer:
            title: ReconfigureServerAction
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - features.reconfigure
                contents:
                    type: object
                    description: Supplemental information needed to perform the action.
                    required:
                        - sftp
                        - base_volume_gb
                    properties:
                        sftp:
                            type: boolean
                            description: A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes.
                        base_volume_gb:
                            type: integer
                            description: A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server.
                            nullable: true
        RestartServer:
            title: RestartServerAction
            type: object
            description: A job that restarts the server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - restart
        RestartCompute:
            title: RestartComputeServiceAction
            type: object
            description: A job that restarts compute service on a given server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - compute.restart
        RestartComputeSpawner:
            title: RestartComputeSpawner
            type: object
            description: A job that restarts compute service on a given server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - compute.spawner.restart
        ServerTags:
            title: ServerTags
            description: Tags for a given server.
            type: object
            required:
                - data
            properties:
                data:
                    type: array
                    description: An array of server tags.
                    items:
                        type: string
        UsageDatum:
            title: ServerUsageDatum
            type: object
            description: Server usage data.
            required:
                - time
                - nodes
                - memory_gb
            properties:
                time:
                    description: A timestamp for when the usage data was collected.
                    $ref: "#/components/schemas/DateTime"
                nodes:
                    type: integer
                    description: The number of nodes the data is pulled from.
                memory_gb:
                    type: integer
                    description: A number in GB representing memory.
        PoolIncludes:
            title: PoolIncludes
            type: object
            description: Resources associated with an IP Pool.
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                servers:
                    $ref: "#/components/schemas/ServersIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
        DeploymentStrategy:
            title: DeploymentStrategy
            type: object
            description: Information about supported container deployment strategies.
            required:
                - name
                - disabled
                - description
            properties:
                name:
                    type: string
                    description: The human-friendly name of the deployment strategy.
                disabled:
                    type: boolean
                    description: A boolean where true signifies a strategy is either not yet or no longer available.
                description:
                    type: string
                    description: A description for the deployment strategy.
        TaskState:
            title: TaskState
            type: object
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                current:
                    description: The current state of the task.
                    type: string
                    enum:
                        - pending
                        - error
                        - running
                        - completed
        JobTask:
            title: JobTask
            type: object
            description: Information about a job task.
            required:
                - id
                - caption
                - header
                - events
                - error
                - steps
                - state
                - input
                - output
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                caption:
                    type: string
                    description: A short description of the task.
                header:
                    type: string
                    description: The API function called.
                events:
                    title: TaskEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the task was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the task was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the task was started.
                            $ref: "#/components/schemas/DateTime"
                steps:
                    description: An array of job task steps.
                    nullable: true
                    type: array
                    items:
                        $ref: "#/components/schemas/TaskStep"
                state:
                    $ref: "#/components/schemas/TaskState"
                input:
                    type: object
                    description: Input information used for the job tasks.
                    additionalProperties: {}
                output:
                    type: object
                    nullable: true
                    description: Output informaiton used for the job tasks.
                    additionalProperties:
                        type: string
                error:
                    type: object
                    nullable: true
                    description: An error object describing issues with the job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: An error message
        JobState:
            title: JobState
            type: object
            required:
                - current
                - error
            properties:
                current:
                    description: The current state of the job.
                    type: string
                    enum:
                        - new
                        - queued
                        - error
                        - scheduled
                        - expired
                        - running
                        - completed
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type: object
                    nullable: true
                    description: An error, if any, that has occurred for this job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
        Job:
            title: Job
            description: A job resource.
            type: object
            required:
                - id
                - queue
                - caption
                - events
                - schedule
                - expires
                - tasks
                - hash
                - limit_duplicates
                - creator
                - hub_id
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                queue:
                    type: string
                    description: A dash separated string showing the environment_id where the job is taking place.
                caption:
                    type: string
                    description: A short description of the job.
                events:
                    title: JobEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the job was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the job was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the job was started.
                            $ref: "#/components/schemas/DateTime"
                schedule:
                    description: A timestamp of when the job was scheduled.
                    $ref: "#/components/schemas/DateTime"
                tasks:
                    description: An array of job tasks.
                    type: array
                    items:
                        $ref: "#/components/schemas/JobTask"
                expires:
                    description: A timestamp for when the job expires.
                    $ref: "#/components/schemas/DateTime"
                hash:
                    type: string
                    description: A combination of the individual task details and job details.
                limit_duplicates:
                    type: boolean
                    description: A boolean where true represents the job is set to prevent duplicates of itself quickly after creation.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    $ref: "#/components/schemas/JobState"
        JobIncludes:
            title: JobIncludes
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        StackInclude:
            title: StackIncludes
            description: All includable resources linkable to the given stack.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        StackBuildAbout:
            title: StackBuildAbout
            type: object
            description: Information about the stack build.
            required:
                - version
                - description
            properties:
                version:
                    type: string
                    description: A user defined version of the build.
                description:
                    type: string
                    description: A user defined description for the build.
                git_commit:
                    $ref: "#/components/schemas/StackGitCommit"
        GenerateStackBuildAction:
            title: GenerateStackBuild
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The job to do.
                    enum:
                        - generate
        DeployStackBuildAction:
            title: DeployStackBuild
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action the job takes.
                    enum:
                        - deploy
                contents:
                    type: object
                    description: Additional information needed for the job.
                    required:
                        - environment_id
                    properties:
                        environment_id:
                            type: string
                            description: The ID for the environment this stack build will be deployed to.
                        deployment:
                            type: object
                            nullable: true
                            allOf:
                                - $ref: "#/components/schemas/Deployment"
                        update:
                            nullable: true
                            type: object
                            allOf:
                                - $ref: "#/components/schemas/StackBuildDeploymentUpdates"
        NetworkIncludes:
            title: NetworkIncludes
            description: All includable resource linkable to the given network.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
        PipelineIncludes:
            title: PipelineIncludes
            description: All includable resources linkable to the given pipeline.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                name:
                    type: string
                    description: A name value.
                components:
                    type: object
                    description: A record of resources that can be associated with the pipeline.
                    additionalProperties:
                        oneOf:
                            - $ref: "#/components/schemas/Container"
                            - $ref: "#/components/schemas/Environment"
                            - $ref: "#/components/schemas/Stack"
                            - $ref: "#/components/schemas/StackBuild"
                            - $ref: "#/components/schemas/Image"
                            - $ref: "#/components/schemas/ImageSource"
                components:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        SecurityIncident:
            title: SecurityIncident
            type: object
            description: Details about a security incident/event that occurred.
            required:
                - risk
                - surface
                - event
                - attack
                - count
            properties:
                risk:
                    type: string
                    description: The risk level of the security.
                    enum:
                        - info
                        - low
                        - medium
                        - high
                        - critical
                surface:
                    type: string
                    description: The vector of attack.
                    enum:
                        - network
                        - service
                        - fs
                        - api
                event:
                    type: string
                    description: How the platform handled the event.
                    enum:
                        - suggestion
                        - notice
                        - prevention
                        - detection
                        - reaction
                attack:
                    type: string
                    description: The type of attack detected.
                    enum:
                        - none
                        - auth-failure
                        - brute-force
                        - exploit-vulnerability
                        - social-engineer
                        - service-interruption
                        - access-elevation
                count:
                    type: integer
        SecurityReportSummary:
            title: SecurityReportSummary
            type: object
            description: A summary of the incidents tags accumulated over the report's range.
            required:
                - incidents
            properties:
                incidents:
                    type: array
                    items:
                        $ref: "#/components/schemas/SecurityIncident"
        SecuritySnapshotIncidentBreakdown:
            title: SecuritySnapshotIncidentBreakdown
            type: object
            description: A breakdown of a snapshot's incidents inside a security report.
            required:
                - surface
                - attack
            properties:
                surface:
                    type: object
                    properties:
                        network:
                            type: integer
                        service:
                            type: integer
                        fs:
                            type: integer
                        api:
                            type: integer
                attack:
                    type: object
                    properties:
                        none:
                            type: integer
                        auth-failure:
                            type: integer
                        brute-force:
                            type: integer
                        exploit-vulnerability:
                            type: integer
                        social-engineer:
                            type: integer
                        service-interruption:
                            type: integer
                        access-elevation:
                            type: integer
        SecurityReportSnapshot:
            title: SecurityReportSnapshot
            type: object
            description: A snapshot of security events for the given interval.
            required:
                - time
                - incidents
                - count
            properties:
                time:
                    $ref: "#/components/schemas/DateTime"
                incidents:
                    type: object
                    properties:
                        info:
                            $ref: "#/components/schemas/SecuritySnapshotIncidentBreakdown"
                        low:
                            $ref: "#/components/schemas/SecuritySnapshotIncidentBreakdown"
                        medium:
                            $ref: "#/components/schemas/SecuritySnapshotIncidentBreakdown"
                        high:
                            $ref: "#/components/schemas/SecuritySnapshotIncidentBreakdown"
                        critical:
                            $ref: "#/components/schemas/SecuritySnapshotIncidentBreakdown"
                count:
                    type: integer
        SecurityReport:
            title: SecurityReport
            type: object
            description: A report of all security events captured by the platform over a range of time.
            required:
                - hub_id
                - created
                - range
                - summary
                - snapshots
            properties:
                hub_id:
                    $ref: "#/components/schemas/HubID"
                created:
                    $ref: "#/components/schemas/DateTime"
                range:
                    $ref: "#/components/schemas/Range"
                    description: The period over which the report was generated.
                summary:
                    $ref: "#/components/schemas/SecurityReportSummary"
                snapshots:
                    description: The ID of the environment this instnace is in.
                    type: array
                    items:
                        $ref: "#/components/schemas/SecurityReportSnapshot"
    responses:
        DefaultError:
            description: General error response from the platform
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorEnvelope"
    parameters:
        MembershipIncludeParam:
            name: include
            in: query
            style: form
            required: false
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - senders
                        - hubs
                        - accounts
                        - roles
        SortParam:
            name: sort
            in: query
            style: form
            required: false
            description: An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
            schema:
                type: array
                items:
                    type: string
        FilterParam:
            name: filter
            in: query
            required: false
            schema:
                type: object
            style: deepObject
        PageParam:
            name: page
            in: query
            required: false
            description: In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2`
            explode: true
            style: deepObject
            schema:
                type: object
                properties:
                    number:
                        type: number
                        description: The page to jump to
                    size:
                        type: number
                        description: The number of resources returned per page.
        OrderIncludeParam:
            name: include
            in: query
            style: form
            required: false
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - promo_codes
        OptionParam:
            name: options
            in: query
            required: false
            description: The option field is a key-value object, where the key is the option, and the value is a boolean. For example, `?option[force]=true`
            schema:
                type: object
                additionalProperties:
                    type: string
            style: deepObject
