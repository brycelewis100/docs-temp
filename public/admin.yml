openapi: 3.1.0
info:
    license:
        name: CC-BY-3.0
        url: https://creativecommons.org/licenses/by/3.0/
    description: Cycle Admin API
    version: 1.0.0
    title: Cycle Admin API
    contact:
        email: support@cycle.io
servers:
    - description: Cycle Admin API
      url: https://admin-api.cycle.io:8901
security:
    - bearerAuth: []
tags:
    - name: Environments
      description: env tag
    - name: Sales
      description: sales tag
    - name: Leads
      description: leads tag
paths:
    /v1/accounts:
        get:
            operationId: getAccounts
            tags:
                - Accounts
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Accounts
            description: Requires the `accounts-view` parameter.
            responses:
                "200":
                    description: Returns a list of accounts.
                    content:
                        application/json:
                            schema:
                                title: AccountResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/accounts/{accountId}:
        get:
            operationId: getAccount
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - name: accountId
                  description: The ID of the account
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Account
            description: Requires the `accounts-view` capability.
            responses:
                "200":
                    description: Returns an account.
                    content:
                        application/json:
                            schema:
                                title: AccountResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAccount
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - name: accountId
                  description: The ID of the account
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update the account.
            description: Requires the `accounts-manage` capability.
            requestBody:
                description: Parameters for updating an account.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: object
                                    description: The name associated with the account.
                                    properties:
                                        first:
                                            type: string
                                            description: The first name.
                                        last:
                                            type: string
                                            description: The last name.
            responses:
                "200":
                    description: Returns an account.
                    content:
                        application/json:
                            schema:
                                title: AccountResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: removeAccount
            tags:
                - Accounts
            parameters:
                - name: accountId
                  description: The ID of the account
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Delete a given account
            description: Requires the `accounts-manage` capability.
            responses:
                "200":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/accounts/{accountId}/memberships:
        get:
            operationId: getAccountMemberships
            tags:
                - Accounts
            security:
                - bearerAuth: []
            parameters:
                - name: accountId
                  description: The ID of the account
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - hubs
            summary: List Account Memberships
            description: Requires the `accounts-view` capability.
            responses:
                "200":
                    description: Returns a list of membership resources.
                    content:
                        application/json:
                            schema:
                                title: ListAccountMembershipsResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements:
        get:
            operationId: getAnnouncements
            tags:
                - Announcements
            security:
                - bearerAuth: []
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Announcements
            description: Requires the `platform-announcements-view` capability.
            responses:
                "200":
                    description: Reeturns an announcement resource.
                    content:
                        application/json:
                            schema:
                                title: ListAnnouncementsReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createAnnouncement
            tags:
                - Announcements
            security:
                - bearerAuth: []
            parameters: []
            requestBody:
                description: Parameters for creating a new announcement.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - title
                                - description
                                - priority
                            properties:
                                title:
                                    type: string
                                    description: A description of the event being announced.
                                description:
                                    type: string
                                    description: A description of the announcement
                                affected_integrations:
                                    type: array
                                    items:
                                        type: string
                                priority:
                                    type: string
                                    description: The priority or severity of the announcement.
                                    enum:
                                        - notice
                                        - low
                                        - medium
                                        - high
                                        - severe
            summary: Create Announcement
            description: Requires the `platform-announcements-manage` capability.
            responses:
                "201":
                    description: Returns an announcement resource.
                    content:
                        application/json:
                            schema:
                                title: CreateAnnouncementReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements/{announcementId}:
        get:
            operationId: getAnnouncement
            tags:
                - Announcements
            security:
                - bearerAuth: []
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Announcement
            description: Requires the `platform-announcements-view` capability.
            responses:
                "200":
                    description: Returns an annoucement resource.
                    content:
                        application/json:
                            schema:
                                title: FetchAnnouncementResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAnnouncement
            tags:
                - Announcements
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update Announcement
            description: Requires the `platform-announcements-manage` capability.
            requestBody:
                description: Parameters for updating an announcement.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: A description of the event being announced.
                                description:
                                    type: string
                                    description: A description of the announcement
                                affected_integrations:
                                    type: array
                                    items:
                                        type: string
                                resolved:
                                    type: boolean
                                priority:
                                    type: string
                                    description: The priority or severity of the announcement.
                                    enum:
                                        - notice
                                        - low
                                        - medium
                                        - high
                                        - severe
            responses:
                "200":
                    description: Returns an annoucement resource.
                    content:
                        application/json:
                            schema:
                                title: UpdateAnnouncementResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: removeAnnouncement
            tags:
                - Announcements
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Remove Announcement
            description: Requires the `platform-announcements-manage` capability.
            responses:
                "200":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements/{announcementId}/updates:
        post:
            operationId: createAnnouncementUpdate
            tags:
                - Announcements
            security:
                - bearerAuth: []
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Create Announcement Update
            description: Requires the `platform-announcements-manage` capability.
            requestBody:
                description: Parameters for creating an update for an announcement.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - message
                            properties:
                                message:
                                    type: string
                                    description: A message to use for the update to the announcement.
            responses:
                "201":
                    description: Returns an annoucement resource.
                    content:
                        application/json:
                            schema:
                                title: CreateAnnouncementUpdateResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements/{announcementId}/updates/{updateId}:
        patch:
            operationId: updateAnnouncementUpdate
            tags:
                - Announcements
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
                - name: updateId
                  description: The ID of the update.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update Announcement Update
            description: Requires the `platform-announcements-manage` capability.
            requestBody:
                description: Parameters for patching an update for an announcement.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - message
                            properties:
                                message:
                                    type: string
                                    description: A message to use for the update to the announcement.
            responses:
                "200":
                    description: Returns an annoucement resource.
                    content:
                        application/json:
                            schema:
                                title: UpdateAnnouncementResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: removeAnnoucementUpdate
            tags:
                - Announcements
            parameters:
                - name: announcementId
                  description: The ID of the announcement
                  in: path
                  required: true
                  schema:
                      type: string
                - name: updateId
                  description: The ID of the update.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Delete Announcement Update
            description: Requires the `platform-announcements-manage` capability.
            responses:
                "200":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits:
        get:
            operationId: getBillingCredits
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Billing Credits
            description: Requires the `billing-credits-view` capability.
            responses:
                "200":
                    description: Returns a list of billing credit resources.
                    content:
                        application/json:
                            schema:
                                title: ListBillingCreditsResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createBillingCredits
            tags:
                - Billing
            parameters: []
            security:
                - bearerAuth: []
            summary: Create Billing Credits
            description: Requires the `billing-credits-manage` capability.
            requestBody:
                description: Parameters for creating a credit.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - description
                                - amount
                            properties:
                                hub_id:
                                    type: string
                                description:
                                    type: string
                                amount:
                                    type: integer
                                    description: The amount of the credit, in mills.
                                expires:
                                    description: A date, sometime in the future, when this credit should expire.
                                    $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns a billing credit resource.
                    content:
                        application/json:
                            schema:
                                title: CreateBillingCreditResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits/{creditId}:
        get:
            operationId: getBillingCredit
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - name: creditId
                  description: the ID of the credit
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Billing Credit
            description: Requires the `billing-credits-view` capability.
            responses:
                "200":
                    description: Returns a billing credit resource.
                    content:
                        application/json:
                            schema:
                                title: FetchBillingCreditResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices:
        get:
            operationId: getBillingInvoices
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domain
                              - domains
                              - ips
                              - due
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - hubs
            summary: List Invoices
            description: Requires the `billing-invoices-view` capability.
            responses:
                "200":
                    description: Returns a list of invoice resources.
                    content:
                        application/json:
                            schema:
                                title: ListBillingInvoicesResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Invoice"
                                    includes:
                                        $ref: "#/components/schemas/InvoiceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}:
        get:
            operationId: getBillingInvoice
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - name: invoiceId
                  description: The ID of the invoice
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domain
                              - domains
                              - ips
                              - due
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
            summary: Fetch Invoice
            description: Requires the `billing-invoices-view` capability.
            responses:
                "200":
                    description: Returns a invoice resource.
                    content:
                        application/json:
                            schema:
                                title: FetchBillingInvoiceResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Invoice"
                                    includes:
                                        $ref: "#/components/schemas/InvoiceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: patchBillingInvoice
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - name: invoiceId
                  description: The ID of the invoice
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update Billing Invoice
            description: Requires the `billing-invoices-manage` capability.
            responses:
                "200":
                    description: Returns a invoice resource.
                    content:
                        application/json:
                            schema:
                                title: UpdateBillingInvoiceResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Invoice"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}/tasks:
        post:
            tags:
                - Billing
            operationId: createBillingInvoiceJob
            parameters:
                - name: invoiceId
                  description: The ID of the invoice
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Create Invoice Job
            description: Requires the `billing-invoices-manage` capability.
            requestBody:
                description: Parameters for creating a new container job.
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: "#/components/schemas/BillingInvoiceTask"
                                - $ref: "#/components/schemas/CreditInvoiceTask"
                                - $ref: "#/components/schemas/RefundInvoiceTask"
                                - $ref: "#/components/schemas/ManualPaymentAddTask"
            responses:
                "200":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods:
        get:
            operationId: getBillingMethods
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Billing Methods
            description: Requires the `billing-methods-view` capability.
            responses:
                "200":
                    description: Returns a list of billing method resources.
                    content:
                        application/json:
                            schema:
                                title: ListBillingMethodsResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods/{methodId}:
        get:
            operationId: getBillingMethod
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - name: methodId
                  description: The ID for the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Billing Method
            description: Requires the `billing-methods-view` capability.
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                title: FetchBillingMethodResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateBillingMethod
            tags:
                - Billing
            security:
                - bearerAuth: []
            parameters:
                - name: methodId
                  description: The ID for the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update Billing Method
            description: Requires the `billing-methods-manage` capability.
            requestBody:
                description: Parameters for updating a billing method.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the billing method.
                                address:
                                    $ref: "#/components/schemas/Address"
                                primary:
                                    type: boolean
                                    description: A boolean where true represents the method being the primary billing method on file.
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                title: FetchBillingMethodResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/support:
        get:
            operationId: getBillingSupportPlans
            tags:
                - Billing
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Support Plans
            description: Doesn't require a specific capability to call.
            responses:
                "200":
                    description: Returns a billing support plan.
                    content:
                        application/json:
                            schema:
                                title: ListBillingSupportPlanReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/SupportPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/tiers:
        get:
            operationId: getTiers
            tags:
                - Billing
            summary: List Tiers
            description: Returns list of availiable tiers
            parameters: []
            responses:
                "200":
                    description: Returns a collection of tier resources.
                    content:
                        application/json:
                            schema:
                                title: ListTiersResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TierPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/employees:
        get:
            operationId: listEmployees
            tags:
                - Employees
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
            summary: List Employees
            description: Requires the `TODO ` capability.
            responses:
                "200":
                    description: Returns a list of employee resources.
                    content:
                        application/json:
                            schema:
                                title: ListEmployees
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Employee"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/employees/current:
        get:
            operationId: fetchEmployee
            tags:
                - Employees
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
            summary: Fetch Employee
            description: Requires the `TODO ` capability.
            responses:
                "200":
                    description: Returns an employee resource.
                    content:
                        application/json:
                            schema:
                                title: ListEmployees
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Employee"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/financials/revenue/growth:
        get:
            operationId: getGrowthFinancials
            tags:
                - Financials
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Growth Results
            description: Requires the `financials-view` capability.
            responses:
                "200":
                    description: Returns a list of growth results resources.
                    content:
                        application/json:
                            schema:
                                title: ListGrowthResults
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/GrowthResult"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/financials/revenue/hubs:
        get:
            operationId: getHubFinancials
            tags:
                - Financials
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - hubs
            summary: List Hub Results
            description: Requires the `financials-view` capability.
            responses:
                "200":
                    description: Returns a list of hub results resources.
                    content:
                        application/json:
                            schema:
                                title: ListHubResults
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/FinancialResult"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/financials/revenue/invoices:
        get:
            operationId: getInvoiceFinancials
            tags:
                - Financials
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Invoice Results
            description: Requires the `financials-view` capability.
            responses:
                "200":
                    description: Returns a list of invoice results resources.
                    content:
                        application/json:
                            schema:
                                title: ListInvoiceResults
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/FinancialResult"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/{integrationId}:
        get:
            operationId: getIntegration
            summary: Get Integration
            description: |
                Retrieves details of a single integration associated with the current hub.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the integration to retrieve.
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            responses:
                "200":
                    description: Details of the specified integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations:
        get:
            operationId: getIntegrations
            summary: List Integrations
            description: |
                Lists all integrations associated with the current Hub, with optional filtering.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/SortParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for. Supports filtering by state and a text search.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value` Filters integrations by their current state. For example, `filter[state]=active` would return only integrations in an active state.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` Performs a text search across relevant fields of the integrations. For example, `filter[search]=example` would return integrations that have "example" in any of the searchable fields
                          category:
                              type: string
                              description: |
                                  `filter[category]=value` Filters integrations by their category. For example, `filter[category]=infrastructure-provider` would return only integrations that are capable of provisioning infrastructure.
            responses:
                "200":
                    description: A list of integrations
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/available:
        get:
            operationId: getAvailableIntegrations
            summary: Get Available Integrations
            description: Returns a map of available integrations categorized by their type.
            tags:
                - Integrations
            responses:
                "200":
                    description: A map of categories to lists of integration definitions.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            image-builders:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            object-storage:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            tls-certificate-generation:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            infrastructure-provider:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            billing:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs:
        get:
            operationId: getHubs
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Hubs
            description: Requires the `hubs-view` capability.
            responses:
                "200":
                    description: Returns a collection of hub resources.
                    content:
                        application/json:
                            schema:
                                title: ListHubsResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/{hubId}:
        get:
            operationId: getHub
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: hubId
                  in: path
                  required: true
                  description: The ID of the Hub.
                  schema:
                      type: string
            summary: List Hubs
            description: Requires the `hubs-view` capability.
            responses:
                "200":
                    description: Returns a hub resource.
                    content:
                        application/json:
                            schema:
                                title: FetchHubResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/{hubId}/members:
        get:
            operationId: getHubMembers
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: hubId
                  description: The ID for the given hub.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Hub Members
            description: Requirest the `hub-members-view` capability.
            responses:
                "200":
                    description: Returns a list of hub member resources.
                    content:
                        application/json:
                            schema:
                                title: ListHubMembersResponse
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMember"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/{hubId}/notifications:
        get:
            operationId: getNotifications
            tags:
                - Hubs
            parameters:
                - name: hubId
                  description: The ID of the hub.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Hub Notification Pipeline Auth
            description: TODO
            responses:
                "200":
                    description: Returns a token.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        title: HubNotificationPipelineAuthResponse
                                        type: object
                                        required:
                                            - token
                                        properties:
                                            token:
                                                type: string
                                                description: A token used for connecting to the Hub notification pipeline websocket API.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/search/index:
        get:
            operationId: getSearchIndex
            tags:
                - Index
            security:
                - bearerAuth: []
            summary: Get Search Index
            description: Requires the view capability for each returned segment
            responses:
                "200":
                    description: Returns the index resources.
                    content:
                        application/json:
                            schema:
                                title: IndexResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Index"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/clusters:
        get:
            operationId: getClusters
            tags:
                - Clusters
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
            summary: List Clusters
            description: Requires the 'clusters-view' capability.
            responses:
                "200":
                    description: A collection of Clusters
                    content:
                        application/json:
                            schema:
                                title: ListClustersReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/clusters/{clusterId}:
        get:
            operationId: getCluster
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID for the cluser
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Cluster
            description: Requires the 'clusters-view' capability.
            responses:
                "200":
                    description: A single cluster resource.
                    content:
                        application/json:
                            schema:
                                title: FetchClusterReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateCluster
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID for the cluster
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Patch Cluster
            description: Requires the 'clusters-manage' capability.
            requestBody:
                description: Parameters for updating a cluster.
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: "#/components/schemas/UpdateOSBuild"
                                - $ref: "#/components/schemas/UpdatePlatformBuild"
            responses:
                "200":
                    description: Returns a cluster resource
                    content:
                        application/json:
                            schema:
                                title: ClusterUpdateReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/builds:
        get:
            operationId: getBuilds
            tags:
                - Builds
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
            summary: List Builds
            description: Requires the "clusters-view" capability.
            responses:
                "200":
                    description: A collection of Builds
                    content:
                        application/json:
                            schema:
                                title: ListBuildsReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Build"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/nodes:
        get:
            operationId: getNodes
            tags:
                - Nodes
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Nodes
            description: Requires the "nodes-view" capability
            responses:
                "200":
                    description: A collection of Nodes
                    content:
                        application/json:
                            schema:
                                title: ListNodesReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Node"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/nodes/{nodeId}:
        get:
            operationId: getNode
            tags:
                - Nodes
            parameters:
                - name: nodeId
                  description: The ID for the node
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Node
            description: Required the "nodes-view" capability
            responses:
                "200":
                    description: A single node resource.
                    content:
                        application/json:
                            schema:
                                title: FetchNodeReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Node"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/nodes/{nodeId}/telemetry:
        get:
            operationId: getNodeTelemetry
            tags:
                - Nodes
            parameters:
                - name: nodeId
                  description: The ID for the node
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Node Telemetry
            description: Requires the "nodes-view" capability
            responses:
                "200":
                    description: A list of telemetry records
                    content:
                        application/json:
                            schema:
                                title: FetchNodeTelemetryReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ServerStatsTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers:
        get:
            operationId: getServers
            tags:
                - Servers
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - locations
                              - models
                              - providers
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Servers
            description: Requires the 'client-servers-view' capability.
            responses:
                "200":
                    description: A collection of Servers
                    content:
                        application/json:
                            schema:
                                title: ListServersReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}:
        get:
            operationId: getServer
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the server
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Fetch Server
            description: Requires the 'client-servers-view' capability.
            responses:
                "200":
                    description: A single server resource
                    content:
                        application/json:
                            schema:
                                title: FetchServerReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteServer
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the server
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Delete Server
            description: Requires the 'client-servers-delete' capability.
            responses:
                "200":
                    description: Returns a server resource
                    content:
                        application/json:
                            schema:
                                title: ServerDeleteReturn
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/telemetry:
        get:
            operationId: getServerTelemetry
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the server
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Server Telemetry
            description: Requires the "client-servers-view" capability
            responses:
                "200":
                    description: A single server telemetry record.
                    content:
                        application/json:
                            schema:
                                title: ListServerTelemetryReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ServerStatsTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/services:
        get:
            operationId: getServices
            tags:
                - Services
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - nodes
                              - clusters
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Services
            description: Requires the 'services-view' capability.
            responses:
                "200":
                    description: A collection of Services
                    content:
                        application/json:
                            schema:
                                title: ListServicesReturn
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/InfrastructureService"
                                    includes:
                                        $ref: "#/components/schemas/InfrastructureServiceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs:
        get:
            operationId: getJobs
            summary: List Jobs
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search jobs for a value associated with a field on the given job(s).
                          hub:
                              type: string
                              description: |
                                  `filter[hub]=hub_id` search jobs mathing a given hub id.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                                    includes:
                                        $ref: "#/components/schemas/JobIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/{jobId}:
        get:
            operationId: getJob
            summary: Get Job
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: jobId
                  description: The ID for the given Job.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A Job resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/latest:
        get:
            operationId: getLatestJobs
            tags:
                - Jobs
            parameters: []
            summary: List Latest Jobs
            description: Requires the `apionly-jobs-view` permission.
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/reports/bizdev:
        get:
            operationId: getReports
            tags:
                - Reports
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Reports
            description: Requires the `reports-view` capability.
            responses:
                "200":
                    description: Returns a list of report results.
                    content:
                        application/json:
                            schema:
                                title: ListReports
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Report"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sales/leads:
        get:
            operationId: listLeads
            tags:
                - Sales
                - Leads
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - staging_accounts
            summary: List Reports
            description: Requires the `reports-view` capability.
            responses:
                "200":
                    description: Returns a list of leads.
                    content:
                        application/json:
                            schema:
                                title: LeadsList
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Lead"
                                    includes:
                                        $ref: "#/components/schemas/LeadIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sales/leads/{leadId}:
        get:
            operationId: getLead
            security:
                - bearerAuth: []
            tags:
                - Leads
            parameters:
                - name: leadId
                  description: The ID of the Lead
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - staging_accounts
            summary: Fetch Lead
            description: Requires the `reports-view` capability.
            responses:
                "200":
                    description: Returns an Lead.
                    content:
                        application/json:
                            schema:
                                title: LeadResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Lead"
                                    includes:
                                        $ref: "#/components/schemas/LeadIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: patchLead
            security:
                - bearerAuth: []
            tags:
                - Leads
            parameters:
                - name: leadId
                  description: The ID of the Lead
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Update Lead
            description: Requires the `reports-view` capability.
            requestBody:
                description: Parameters for updating an lead.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                demo_completed:
                                    type: boolean
                                finalized:
                                    $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns an Lead.
                    content:
                        application/json:
                            schema:
                                title: LeadResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Lead"
                default:
                    $ref: "#/components/responses/DefaultError"
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    parameters:
        SortParam:
            name: sort
            in: query
            style: form
            required: false
            description: An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
            schema:
                type: array
                items:
                    type: string
        FilterParam:
            name: filter
            in: query
            required: false
            schema:
                type: object
            style: deepObject
        PageParam:
            name: page
            in: query
            required: false
            description: In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2`
            explode: true
            style: deepObject
            schema:
                type: object
                properties:
                    number:
                        type: number
                        description: The page to jump to
                    size:
                        type: number
                        description: The number of resources returned per page.
    schemas:
        Capability:
            type: string
            description: A capability that a user or API key that represents what an API key or a user can do.
            enum:
                - api-keys-manage
                - apionly-jobs-view
                - apionly-notifications-listen
                - autoscale-groups-manage
                - autoscale-groups-view
                - billing-credits-view
                - billing-invoices-pay
                - billing-invoices-view
                - billing-methods-manage
                - billing-services-manage
                - billing-services-view
                - containers-backups-manage
                - containers-backups-view
                - containers-console
                - containers-deploy
                - containers-instances-migrate
                - containers-lock
                - containers-ssh
                - containers-manage
                - containers-view
                - containers-functions-trigger
                - containers-volumes-manage
                - containers-volumes-view
                - dns-certs-view
                - dns-manage
                - dns-view
                - environments-deployments-manage
                - environments-manage
                - environments-scopedvariables-manage
                - environments-scopedvariables-view
                - environments-services-manage
                - environments-view
                - environments-vpn
                - environments-vpn-manage
                - hubs-delete
                - hubs-integrations-manage
                - hubs-integrations-view
                - hubs-invites-manage
                - hubs-invites-send
                - hubs-members-manage
                - hubs-members-view
                - hubs-roles-manage
                - hubs-roles-view
                - hubs-usage-view
                - hubs-update
                - hubs-auditlog-view
                - images-manage
                - images-sources-manage
                - images-sources-view
                - images-view
                - ips-manage
                - servers-console
                - servers-decommission
                - servers-login
                - clusters-manage
                - clusters-view
                - servers-provision
                - servers-manage
                - servers-view
                - monitor-manage
                - monitor-view
                - pipelines-manage
                - pipelines-trigger
                - pipelines-view
                - sdn-networks-manage
                - sdn-networks-view
                - security-manage
                - security-view
                - stacks-builds-deploy
                - stacks-builds-manage
                - stacks-manage
                - stacks-view
                - virtual-machines-view
                - virtual-machines-manage
                - virtual-machines-deploy
                - virtual-machines-console
                - virtual-machines-lock
                - virtual-machines-ssh-keys-manage
        Error:
            title: Error
            description: |-
                The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
                There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
            type: object
            required:
                - status, code, title
            properties:
                status:
                    type: integer
                    description: The HTTP response code.
                    enum:
                        - 400
                        - 401
                        - 403
                        - 404
                        - 409
                        - 415
                        - 422
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                code:
                    type: string
                    description: A Cycle standard error code.
                    enum:
                        - 400.invalid-syntax
                        - 401.auth-invalid
                        - 401.auth-expired
                        - 401.no-cookie
                        - 401.unauthorized-application
                        - 403.mismatch
                        - 403.wrong-hub
                        - 403.not-ready
                        - 403.expired
                        - 403.restricted-portal
                        - 403.permissions
                        - 403.invalid-ip
                        - 403.invalid-state
                        - 403.not-approved
                        - 403.not-allowed
                        - 403.platform-disabled
                        - 403.2fa-required
                        - 403.2fa-failed
                        - 403.new-application-capabilities
                        - 403.tier-restricted
                        - 404.hub
                        - 404.hub.invitation
                        - 404.hub.integration
                        - 404.hub.role
                        - 404.sdn.network
                        - 404.environment
                        - 404.environment.scoped-variable
                        - 404.hub.api-key
                        - 404.uri
                        - 404.provider
                        - 404.stack
                        - 404.community.thread
                        - 404.community.thread.reply
                        - 404.survey
                        - 404.survey-response
                        - 404.notification
                        - 404.stack-build
                        - 404.image
                        - 404.image.source
                        - 404.image.build-log
                        - 404.job
                        - 404.billing.order
                        - 404.billing.service
                        - 404.billing.credit
                        - 404.billing.invoice
                        - 404.billing.tier
                        - 404.billing.support
                        - 404.billing.payment-method
                        - 404.billing.promo-code
                        - 404.node
                        - 404.infrastructure.location
                        - 404.infrastructure.ips.pool
                        - 404.infrastructure.provider
                        - 404.infrastructure.server
                        - 404.infrastructure.cluster
                        - 404.infrastructure.autoscale.group
                        - 404.infrastructure.model
                        - 404.monitoring.logs.analytics.rule
                        - 404.account
                        - 404.container
                        - 404.container.backup
                        - 404.vpn.account
                        - 404.instance
                        - 404.pipeline
                        - 404.pipeline.run
                        - 404.pipeline.key
                        - 404.dns.zone
                        - 404.dns.record
                        - 404.cluster
                        - 404.platform-build
                        - 404.cycleos-build
                        - 404.email-verification
                        - 404.hub.membership
                        - 404.announcement
                        - 404.ha-service.session
                        - 404.virtual-machine
                        - 404.virtual-machine.ssh-key
                        - 404.sales.lead
                        - 404.stack.build-log
                        - 409.duplicate-found
                        - 415.invalid-content-type
                        - 422.missing-argument
                        - 422.invalid-argument
                        - 422.invalid-input
                        - 422.max-exceeded
                        - 422.not-compatible
                        - 422.already-exists
                        - 429.rate-limiting
                        - 500.database
                        - 500.database-insert
                        - 500.database-update
                        - 500.database-remove
                        - 500.jobd
                        - 500.unknown
                        - 500.dev
                        - 500.email
                        - 503.not-ready
                        - 503.not-enabled
                        - 503.dependency-not-enabled
                        - 504.not-available
                title:
                    type: string
                    description: The main text describing the error.
                detail:
                    type: string
                    description: A more detailed description of the error.
                source:
                    type: string
                    description: A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
                extra:
                    type: object
                    description: Additional entries on the error object to provide extra details.
                    properties:
                        capability:
                            description: If the error occured because of a lack of permission (403), this will list the specific capability that the Role/API Key is missing.
                            $ref: "#/components/schemas/Capability"
        ErrorEnvelope:
            title: ErrorEnvelope
            type: object
            description: An error response.
            required:
                - error
                - data
            properties:
                error:
                    $ref: "#/components/schemas/Error"
                data:
                    type: "null"
        ID:
            title: ID
            type: string
            format: objectid
            description: A 24 character hex string used to identify a unique resource.
            examples:
                - 651586fca6078e98982dbd90
        DateTime:
            title: DateTime
            type: string
            format: date-time
            examples:
                - "2021-01-30T08:30:00Z"
        State:
            title: State
            description: Information regarding the current state of the resource.
            type: object
            required:
                - changed
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type: object
                    description: An error, if any, that has occurred for this resource.
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
                        time:
                            description: The timestamp of when the error was encountered.
                            $ref: "#/components/schemas/DateTime"
        AccountState:
            title: AccountState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the account.
                          type: string
                          enum:
                              - new
                              - live
                              - suspending
                              - purging
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Account:
            title: Account
            type: object
            description: An object representing information about the currently logged-in user.
            required:
                - id
                - name
                - email
                - allow_support_logins
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: object
                    description: The first and last name associated with the Account.
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the Account owner.
                        last:
                            type: string
                            description: The last name of the Account owner.
                email:
                    type: object
                    description: Information about the email address associated with the Account.
                    required:
                        - address
                        - verified
                        - added
                    properties:
                        address:
                            type: string
                            description: The email address.
                        verified:
                            type: boolean
                            description: If true, the email has been verified and the Account is active.
                        added:
                            description: The date the email was added to the Account
                            $ref: "#/components/schemas/DateTime"
                two_factor_auth:
                    type:
                        - object
                        - "null"
                    description: Two factor auth verification information.
                    required:
                        - verified
                    properties:
                        verified:
                            type: boolean
                            description: A boolean representing if the Account has verified with two-factor authentication.
                allow_support_login:
                    description: Indicates whether or not Cycle employees have authorization to log in to this Account in a support capacity.
                    type: boolean
                state:
                    $ref: "#/components/schemas/AccountState"
                events:
                    title: AccountEvents
                    type: object
                    description: A collection of timestamps for each event in the Account's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the Account was last accessed.
                            $ref: "#/components/schemas/DateTime"
        TaskStep:
            title: TaskStep
            type: object
            description: A step for a given job task.
            required:
                - caption
                - description
                - started
                - completed
            properties:
                caption:
                    type: string
                    description: A short description of the step.
                description:
                    type: string
                    description: A more verbose description.
                started:
                    description: A timestamp for when the step started.
                    $ref: "#/components/schemas/DateTime"
                completed:
                    description: A timestamp for when the step completed.
                    $ref: "#/components/schemas/DateTime"
        JobDescriptor:
            title: JobDescriptor
            description: A Job Descriptor is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action that was taken.
                job:
                    type: object
                    description: Contains some basic information about the job associated with this task.
                    required:
                        - id
                        - accepted
                        - queue
                        - schedule
                        - parallel
                        - tasks
                    properties:
                        id:
                            description: The ID of the job
                            type: string
                        accepted:
                            description: Describes if the job has been accepted
                            type: boolean
                        queue:
                            description: Describes the queue this job is a part of.
                            type: string
                        schedule:
                            $ref: "#/components/schemas/DateTime"
                        parallel:
                            type: object
                            required:
                                - tasks
                            properties:
                                sub_queue:
                                    type:
                                        - string
                                        - "null"
                                tasks:
                                    type: boolean
                        tasks:
                            type:
                                - array
                                - "null"
                            items:
                                title: NewTask
                                type: object
                                required:
                                    - caption
                                    - header
                                    - input
                                    - steps
                                properties:
                                    caption:
                                        type: string
                                        description: A short description of the task.
                                    header:
                                        type: string
                                        description: The API function called.
                                    steps:
                                        description: An array of job task steps.
                                        type:
                                            - array
                                            - "null"
                                        items:
                                            $ref: "#/components/schemas/TaskStep"
                                    input:
                                        type: object
                                        description: Input information used for the job tasks.
                                        additionalProperties: {}
        HubID:
            title: HubID
            type: string
            description: The unique ID of the Hub this resource was created in.
            examples:
                - 651586fca6078e98982dbd90
        MembershipState:
            title: MembershipState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the membership.
                          type: string
                          enum:
                              - pending
                              - accepted
                              - declined
                              - revoked
                              - deleted
                - $ref: "#/components/schemas/State"
        Invitation:
            title: HubMembershipInvitation
            type: object
            description: Information about a hub membership invitation.
            required:
                - sender
                - recipient
                - events
            properties:
                sender:
                    type: object
                    description: Information about the origin account of the invitation.
                    required:
                        - id
                        - type
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        type:
                            type: string
                            description: The account type.
                recipient:
                    type: string
                    description: The email address for the invitations recipient.
                events:
                    title: InvitationEvents
                    type: object
                    description: A collection of timestamps for each event in the invitation's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - accepted
                        - declined
                        - revoked
                    properties:
                        created:
                            description: The timestamp of when the invitation was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the invitation was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the invitation was deleted.
                            $ref: "#/components/schemas/DateTime"
                        accepted:
                            description: The timestamp of when the invitation was accepted.
                            $ref: "#/components/schemas/DateTime"
                        declined:
                            description: The timestamp of when the invitation was declined.
                            $ref: "#/components/schemas/DateTime"
                        revoked:
                            description: The timestamp of when the invitation was revoked.
                            $ref: "#/components/schemas/DateTime"
        HubMembership:
            title: HubMembership
            type: object
            description: A membership resource that is scoped to an individual hub.
            required:
                - id
                - hub_id
                - role_id
                - events
                - state
                - invitation
                - permissions
                - prefereneces
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                account_id:
                    type: string
                    description: An ID for the account associated with the given membership.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                events:
                    title: MembershipEvents
                    type: object
                    description: A collection of timestamps for each event in the membership's lifetime.
                    required:
                        - joined
                    properties:
                        created:
                            description: The timestamp of when the membership was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the membership was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the membership was deleted.
                            $ref: "#/components/schemas/DateTime"
                        joined:
                            description: The timestamp of when the membership was accepted.
                            $ref: "#/components/schemas/DateTime"
                role_id:
                    definition: The ID of the Role assigned to this Hub Membership.
                    $ref: "#/components/schemas/ID"
                preferences:
                    type: object
                    title: HubMembershipPreferences
                    description: Preference information set by the user for the membership.
                    required:
                        - portal
                        - email
                    properties:
                        portal:
                            type: object
                            required:
                                - notifications
                            properties:
                                notifications:
                                    type: object
                                    required:
                                        - jobs
                                    properties:
                                        jobs:
                                            type: object
                                            required:
                                                - apikey_alerts
                                            properties:
                                                apikey_alerts:
                                                    type: boolean
                        email:
                            type: object
                            required:
                                - notifications
                            properties:
                                notificaitons:
                                    type: object
                                    required:
                                        - server
                                    properties:
                                        server:
                                            type: object
                                            required:
                                                - new
                                                - offline
                                            properties:
                                                new:
                                                    type:
                                                        - boolean
                                                        - "null"
                                                offline:
                                                    type:
                                                        - boolean
                                                        - "null"
                state:
                    $ref: "#/components/schemas/MembershipState"
                invitation:
                    $ref: "#/components/schemas/Invitation"
                cycle:
                    type: object
                    description: If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts do not consume a "membership" for a given hub.
                    required:
                        - employee_id
                    properties:
                        employee_id:
                            type: string
                            description: The ID of the employee this membership is associated with.
        Events:
            title: Events
            description: Describes the date and time at which certain events occurred in the lifetime of this resource.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/DateTime"
        PublicAccount:
            title: PublicAccount
            description: Publicly available information about an account
            type: object
            required:
                - name
                - email
                - id
            properties:
                name:
                    title: AccountName
                    description: The first and last name of an account owner
                    type: object
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the account owner
                        last:
                            type: string
                            description: The last name of the account owner
                email:
                    title: AccountEmail
                    description: Email information for an account
                    type: object
                    required:
                        - address
                    properties:
                        address:
                            type: string
                            description: The email address associated with the account.
                id:
                    title: AccountId
                    description: Id information for an account
                    type: string
                events:
                    allOf:
                        - $ref: "#/components/schemas/Events"
                        - properties:
                              last_login:
                                  $ref: "#/components/schemas/DateTime"
        Identifier:
            title: Identifier
            type: string
            description: |
                A human-readable identifier used to refer to a resource, where using the official ID may be inconvenient.
                The identifier is automatically tokenized from the name/relevant field of the resource if one is not provided. For example, a container named "My Container" will
                have the identifier of `my-container` and is automatically created by the platform.

                The identifier does not have to be unique.
        CreatorScope:
            title: CreatorScope
            description: The creator scope is embedded in resource objects to describe who created them
            type: object
            required:
                - id
                - type
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                type:
                    type: string
                    enum:
                        - account
                        - environment
                        - platform
                        - platform-pipeline
                        - employee
                        - api-key
                        - visitor
        HubEvents:
            title: HubEvents
            type: object
            description: A collection of timestamps for each event in the hub's lifetime.
            required:
                - created
                - updated
                - deleted
            properties:
                created:
                    description: The timestamp of when the hub was created.
                    $ref: "#/components/schemas/DateTime"
                updated:
                    description: The timestamp of when the hub was updated.
                    $ref: "#/components/schemas/DateTime"
                deleted:
                    description: The timestamp of when the hub was deleted.
                    $ref: "#/components/schemas/DateTime"
                converted:
                    description: The timestamp of when the hub had the first converted.
                    $ref: "#/components/schemas/DateTime"
                first_order:
                    description: The timestamp of when the hub had the first provider added.
                    $ref: "#/components/schemas/DateTime"
                first_provider:
                    description: The timestamp of when the hub had the first provider added.
                    $ref: "#/components/schemas/DateTime"
                first_server:
                    description: The timestamp of when the hub had the first_server deployed.
                    $ref: "#/components/schemas/DateTime"
                first_environment:
                    description: The timestamp of when the hub had the first environment deployed.
                    $ref: "#/components/schemas/DateTime"
                first_image:
                    description: The timestamp of when the hub had the first image deployed.
                    $ref: "#/components/schemas/DateTime"
                first_container:
                    description: The timestamp of when the hub had the first container deployed.
                    $ref: "#/components/schemas/DateTime"
        HubState:
            title: HubState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the hub.
                          type: string
                          enum:
                              - new
                              - configuring
                              - live
                              - inactive
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        HubSecurity:
            title: HubSecurity
            type: object
            description: Security options for a hub.
            properties:
                force_2fa:
                    type: boolean
                    description: When true, any API call for this hub from an account that does not have two-factor auth enabled will fail with a 403 error.
            required:
                - force_2fa
        HubWebhooks:
            title: HubWebhooks
            type: object
            description: Hub related webhooks. When supplied, the given webhook will be called with a payload any time one of these events occurs.
            required:
                - server_deployed
                - server_deleted
            properties:
                server_deployed:
                    type:
                        - string
                        - "null"
                    description: A webhook that is called any time a server is deployed to this hub. The payload will be a `Server` object.
                server_deleted:
                    type:
                        - string
                        - "null"
                    description: A webhook that is called any time a server in this hub is deleted. The payload will be a `Server` object.
        Term:
            title: BillingTerm
            type: object
            description: Information about a billing term.
            required:
                - start
                - end
                - renew
            properties:
                start:
                    description: A timestamp describing the start of a billing term.
                    $ref: "#/components/schemas/DateTime"
                end:
                    description: A timestamp describing the end of a billing term.
                    $ref: "#/components/schemas/DateTime"
                renew:
                    description: The term renewal period.
                    oneOf:
                        - type: string
                          enum:
                              - once
                              - monthly
                              - yearly
                        - type: "null"
        HubBillingProfile:
            title: HubBillingProfile
            type: object
            description: A billing profile for a given hub.
            required:
                - term
                - plans
                - pause_invoices
                - emails
            properties:
                term:
                    $ref: "#/components/schemas/Term"
                allow_prepaid:
                    type: boolean
                    description: A boolean where true represents this account being approved to use a prepaid card for billing transactions.
                pause_invoices:
                    type: boolean
                    description: A boolean where true represents invoices have been paused on this hub for one reason or another.
                disable:
                    type: boolean
                    description: A boolean where true means this billing is disabled on this hub.
                plans:
                    type: object
                    description: Information about the plan associated with this hub.
                    required:
                        - tier_id
                        - support_id
                    properties:
                        tier_id:
                            type:
                                - string
                                - "null"
                            description: An ID referencing the pricing tier applied to this hub.
                        support_id:
                            type:
                                - string
                                - "null"
                            description: An ID referencing the support plan applied to this hub.
                emails:
                    type:
                        - array
                        - "null"
                    items:
                        type: string
                    description: An array of email addresses to whom the billing invoices will be sent to. If left empty, they will be sent to the owner of this hub.
        HubMeta:
            title: HubsMeta
            type: object
            description: A list of meta fields that can be applied to a hub.
            properties:
                membership:
                    $ref: "#/components/schemas/HubMembership"
        Hub:
            title: Hub
            description: A hub resource.
            type: object
            required:
                - id
                - identifier
                - name
                - creator
                - events
                - state
                - security
                - integrations
                - webhooks
                - billing
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this hub.
                name:
                    type: string
                    description: A name for the hub.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    $ref: "#/components/schemas/HubEvents"
                state:
                    $ref: "#/components/schemas/HubState"
                security:
                    $ref: "#/components/schemas/HubSecurity"
                webhooks:
                    $ref: "#/components/schemas/HubWebhooks"
                billing:
                    anyOf:
                        - $ref: "#/components/schemas/HubBillingProfile"
                        - type: "null"
                meta:
                    $ref: "#/components/schemas/HubMeta"
        RoleMeta:
            title: RoleMeta
            type: object
            description: A list of meta fields that can be applied to a role.
            properties:
                counts:
                    type: object
                    required:
                        - members
                        - api_keys
                    properties:
                        members:
                            type: integer
                        api_keys:
                            type: integer
        Role:
            title: Role
            type: object
            description: A Role is a custom combination of platform-level capabilities, allowing for fully customizable role-based access controls across the platform.
            required:
                - id
                - root
                - rank
                - identifier
                - creator
                - capabilities
                - hub_id
                - state
                - events
            properties:
                id:
                    type: string
                name:
                    type:
                        - string
                        - "null"
                root:
                    description: The Role marked as root has full moderation control over all Roles.
                    type: boolean
                default:
                    description: A reference to the original identifier of the default Role this Role was built from.  A value of null means it is a fully custom Role.
                    anyOf:
                        - $ref: "#/components/schemas/Identifier"
                        - type: "null"
                rank:
                    description: An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10.
                    type: integer
                identifier:
                    $ref: "#/components/schemas/Identifier"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                capabilities:
                    type: object
                    description: The list of platform level capabilities assigned to this Role.
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                            description: If true, the Role has all capabilities.
                        specific:
                            type: array
                            items:
                                $ref: "#/components/schemas/Capability"
                extra:
                    type: object
                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                    additionalProperties:
                        type: string
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the Role.
                                  type: string
                                  enum:
                                      - live
                        - $ref: "#/components/schemas/State"
                events:
                    title: RoleEvents
                    type: object
                    description: Timestamps for each event in the Role's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the Role source was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the Role source was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the Role source was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/RoleMeta"
        HubMembershipIncludes:
            title: HubMembershipsIncludes
            type: object
            description: A resource that is associated with a hub membership.
            properties:
                senders:
                    type: object
                    description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
                    properties:
                        accounts:
                            type: object
                            description: A record with an ID mapped to a public account.
                            additionalProperties:
                                $ref: "#/components/schemas/PublicAccount"
                accounts:
                    type: object
                    description: A record with an ID mapped to a public account.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                hubs:
                    type: object
                    description: A record with an ID mapped to a hub resource.
                    additionalProperties:
                        $ref: "#/components/schemas/Hub"
                roles:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        AnnouncementUpdate:
            title: AnnoucementUpdate
            type: object
            description: An update to an Announcement.
            required:
                - id
                - message
                - creator
                - time
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                message:
                    type: string
                    description: The text describing the update to the announcement.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                time:
                    $ref: "#/components/schemas/DateTime"
                    description: A timestamp of when the update took place.
        Announcement:
            title: Announcement
            type: object
            description: An announcement from the Cycle team.
            required:
                - id
                - title
                - description
                - updates
                - priority
                - events
                - creator
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                title:
                    type: string
                    description: A description of the event being announced.
                description:
                    type: string
                    description: A description of the announcement
                updates:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnnouncementUpdate"
                affected_integrations:
                    type: array
                    items:
                        type: string
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                priority:
                    type: string
                    description: The priority or severity of the announcement.
                    enum:
                        - notice
                        - low
                        - medium
                        - high
                        - severe
                events:
                    title: AnnouncementEvents
                    type: object
                    description: A collection of timestamps for each event in the announcement's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - resolved
                    properties:
                        created:
                            description: The timestamp of when the announcement was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the announcement was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the announcement was deleted.
                            $ref: "#/components/schemas/DateTime"
                        resolved:
                            description: The timestamp of when the announcement was resolved.
                            $ref: "#/components/schemas/DateTime"
        Credit:
            title: BillingCredit.yml
            type: object
            description: Information about a billing credit.
            required:
                - id
                - hub_id
                - description
                - creator
                - account_id
                - amount
                - amount_remaining
                - expires
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                description:
                    type: string
                    description: Some extra information about the billing credit.
                account_id:
                    type: string
                    description: The account the credit was issued to.
                amount:
                    type: integer
                    description: The amount of credit.
                amount_remaining:
                    type: integer
                    description: The amount of the credit that remains after being applied to invoices.
                expires:
                    type:
                        - object
                        - "null"
                    description: Information on when the billing credit expires.
                    properties:
                        date:
                            description: A timestamp of when the billing credit expires.
                            $ref: "#/components/schemas/DateTime"
                events:
                    title: BillingCreditEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the credit.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - expired
                        - $ref: "#/components/schemas/State"
        BillingSummary:
            title: BillingSummary
            type: object
            description: A billing summary.
            required:
                - service_id
                - title
                - type
                - term
                - price
                - discount
            properties:
                service_id:
                    type: string
                    description: The ID of the billing service, the summary pertains to.
                title:
                    type: string
                    description: The billing summary title.
                type:
                    type: string
                    description: The plan type.
                    enum:
                        - tier
                        - support
                term:
                    $ref: "#/components/schemas/Term"
                price:
                    type: number
                    description: 1/10th of a cent (mills).
                discount:
                    type: number
                    description: 1/10th of a cent (mills).
        PaymentGateway:
            title: PaymentGateway
            type: string
            description: The type of payment gateway used.
            enum:
                - stripe
        Refund:
            title: BillingRefund
            type: object
            description: A billing refund.
            required:
                - id
                - time
                - description
                - amount
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment refund.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        PaymentResult:
            title: PaymentResult
            type: object
            description: A billing payment result.
            required:
                - status
                - error
            properties:
                status:
                    type: string
                    description: The status of a payment.
                    enum:
                        - success
                        - processing
                        - cancelled
                        - error
                error:
                    type: string
                    description: A description of the error that took place when processing the payment.
        Payment:
            title: BillingPayment
            type: object
            description: A billing payment.
            required:
                - id
                - time
                - description
                - amount
                - amount_refunded
                - refunds
                - result
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                amount_refunded:
                    type: integer
                    description: 1/10th of a cent.
                refunds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Refund"
                method_id:
                    type: string
                    description: The ID associated with the billing method used.
                result:
                    $ref: "#/components/schemas/PaymentResult"
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        InvoiceCredit:
            title: BillingInvoiceCredit
            type: object
            description: A billing credit for a specific invoice.
            required:
                - id
                - associated_credit
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                associated_credit:
                    type: object
                    description: Credit associated with an invoice.
                    required:
                        - id
                        - amount
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        amount:
                            type: integer
                            description: The amount of the credit.
                time:
                    description: A timestamp for when the invoice credit was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the invoice credit.
                amount:
                    type: integer
                    description: The amount of credit for the invoice.
        LateFee:
            title: LateFee
            type: object
            description: A late fee, applied to an invoice.
            required:
                - id
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp of when the late fee was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the late fee.
                amount:
                    type: integer
                    description: 1/10th of a cent.
        InvoiceState:
            title: InvoiceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the invoice.
                          type: string
                          enum:
                              - new
                              - billing
                              - billed
                              - processing
                              - partially-paid
                              - awaiting-funds
                              - paid
                              - refunding
                              - refunded
                              - crediting
                              - credited
                              - voiding
                              - voided
                              - uncollectible
                - $ref: "#/components/schemas/State"
        InvoiceMeta:
            title: InvoiceMeta
            type: object
            description: A list of meta fields that can be applied to a invoice.
            properties:
                due:
                    type: integer
                    description: The amount due for a given invoice.
        Invoice:
            title: BillingInvoice
            type: object
            description: Information about a billing invoice.
            required:
                - id
                - hub_id
                - approved
                - charges
                - events
                - failed_payment_attempts
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                approved:
                    type: boolean
                    description: A boolean where true represents the invoice is approved for collection.
                services:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/BillingSummary"
                payments:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/Payment"
                credits:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/InvoiceCredit"
                late_fees:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LateFee"
                charges:
                    type: integer
                    description: The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice.
                due:
                    description: A timestamp of when the invoice is due to be paid.
                    $ref: "#/components/schemas/DateTime"
                overdue:
                    description: A timestamp of when the invoice is overdue.
                    $ref: "#/components/schemas/DateTime"
                failed_payment_attempts:
                    type: integer
                    description: The number of failed payment attempts for the invoice.
                events:
                    title: BillingOrderEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - billed
                        - paid
                        - credited
                        - voided
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                        billed:
                            description: The timestamp of when the billing order billed.
                            $ref: "#/components/schemas/DateTime"
                        paid:
                            description: The timestamp of when the billing order paid.
                            $ref: "#/components/schemas/DateTime"
                        payment_attempt:
                            description: The timestamp of when the billing order payment was attempted.
                            $ref: "#/components/schemas/DateTime"
                        credited:
                            description: The timestamp of when the billing order credited.
                            $ref: "#/components/schemas/DateTime"
                        voided:
                            description: The timestamp of when the billing order voided.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/InvoiceState"
                meta:
                    $ref: "#/components/schemas/InvoiceMeta"
        HubIncludes:
            title: HubIncludes
            type: object
            description: A resource that is associated with a hub.
            additionalProperties:
                $ref: "#/components/schemas/Hub"
        InvoiceIncludes:
            title: InvoiceIncludes
            description: All includable resources linkable to the given invoice.
            type: object
            properties:
                hubs:
                    $ref: "#/components/schemas/HubIncludes"
        BillingInvoiceTask:
            title: VoidBillingInvoiceTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - void
                        - pay
                    description: The name of the action to perform.
        CreditInvoiceTask:
            title: CreditBillingInvoiceTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - credit
                contents:
                    type: object
                    description: The contents that will assist the platform in creating and completing the job.
                    properties:
                        description:
                            type: string
                            description: The description of the credit.
        RefundInvoiceTask:
            title: RefundBillingInvoiceTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - refund
                contents:
                    type: object
                    description: The contents that will assist the platform in creating and completing the job.
                    properties:
                        amount:
                            type: integer
                            description: The amount to be refunded.
                        description:
                            type: string
                            description: The description of the refund.
        ManualPaymentAddTask:
            title: ManualPaymentAddTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - payment.add
                contents:
                    type: object
                    description: The contents that will assist the platform in creating and completing the job.
                    properties:
                        amount:
                            type: integer
                            description: The amount to be refunded.
                        description:
                            type: string
                            description: The description of the refund.
        Address:
            title: BillingMethodAddress
            description: Address information for a given billing method.
            type: object
            required:
                - country
                - zip
            properties:
                country:
                    type: string
                    description: The country this billing method is associated with.
                zip:
                    type: string
                    description: The zip code this billing method is associated with.
        StripeCreditCard:
            title: StripeCreditCard
            type: object
            description: A payment method that utilizes a credit card via Stripe.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - stripe-credit-card
                details:
                    type: object
                    required:
                        - name
                        - brand
                        - expiration
                        - last_4
                    properties:
                        name:
                            type: string
                            description: The name on the credit card.
                        brand:
                            type: string
                            description: The brand of card.
                        expiration:
                            type: object
                            required:
                                - month
                                - year
                            properties:
                                month:
                                    type: integer
                                    description: The month the billing method expires.
                                year:
                                    type: integer
                                    description: The year the billing method expires.
                        last_4:
                            type: string
                            description: The last 4 digits of the card.
        StripeUsBankAcct:
            title: StripeUsBankAcct
            description: A payment method that utilizes a US bank account via Stripe.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - stripe-us-bank-acct
                details:
                    type: object
                    required:
                        - name
                        - last_4
                    properties:
                        name:
                            type: string
                            description: The name of the owner of the bank account.
                        last_4:
                            type: string
                            description: The last 4 numbers of the bank account number.
        MethodSource:
            title: MethodSource
            description: The underlying source (credit card, bank account, etc) used by a payment method.
            discriminator:
                propertyName: type
                mapping:
                    stripe-credit-card: "#/components/schemas/StripeCreditCard"
                    stripe-us-bank-acct: "#/components/schemas/StripeUsBankAcct"
            oneOf:
                - $ref: "#/components/schemas/StripeCreditCard"
                - $ref: "#/components/schemas/StripeUsBankAcct"
        Mandate:
            title: Mandate
            description: Information about the creator of a payment method for compliance purposes.
            type: object
            required:
                - accepted
                - ip
                - user_agent
                - email
            properties:
                accepted:
                    description: The date when the mandate was accepted
                    $ref: "#/components/schemas/DateTime"
                ip:
                    type: string
                    description: The IP address at the time the mandate was accepted.
                user_agent:
                    type: string
                    description: The user agent of the browser when the mandate was accepted.
                email:
                    type: string
                    description: The email associated with the account that accepted the mandate
        Method:
            title: BillingMethod
            type: object
            description: Information about a billing method, usable to pay invoices.
            required:
                - id
                - name
                - primary
                - address
                - creator
                - source
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the billing method.
                primary:
                    type: boolean
                    description: A boolean where true represents this billing method is set to primary for a given hub.
                address:
                    $ref: "#/components/schemas/Address"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                source:
                    $ref: "#/components/schemas/MethodSource"
                mandate:
                    $ref: "#/components/schemas/Mandate"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - pending-verification
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    title: CreditCardEvents
                    type: object
                    description: A collection of timestamps for each event in the credit card's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the credit card was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the credit card was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the credit card was deleted.
                            $ref: "#/components/schemas/DateTime"
        BillingAmount:
            title: BillingAmount
            type: object
            description: An object holding information about term and amount that relates to a specific billing component.
            required:
                - mills
                - term
            properties:
                mills:
                    type: integer
                    description: 1/10th of a cent.
                term:
                    type: string
                    description: The length of the term.
                    enum:
                        - once
                        - monthly
                        - yearly
        SupportPlanFeatures:
            title: SupportPlanFeatures
            type: object
            description: Information about billing support plan features.
            required:
                - engineering_support
                - uptime_sla
                - guaranteed_response_time
            properties:
                engineering_support:
                    type: boolean
                    description: A boolean where true indicates the contract includes support for engineering.
                uptime_sla:
                    type: boolean
                    description: A boolean where true represents the contract has an uptime SLA agreement.
                guaranteed_response_time:
                    type:
                        - string
                        - "null"
                    description: The time in which this support contract guarantees response time.
        SupportPlan:
            title: SupportPlan
            type: object
            description: Information about a billing support plan.
            required:
                - name
                - price
                - description
                - features
                - contract
                - default
            properties:
                name:
                    type: string
                    description: The name of the support plan.
                price:
                    $ref: "#/components/schemas/BillingAmount"
                description:
                    type: string
                    description: Information about the billing support plan that describes the plan.
                features:
                    $ref: "#/components/schemas/SupportPlanFeatures"
                contract:
                    type: boolean
                    description: A boolean where true represents the plan is a long term contract, not just month to month.
                default:
                    type: boolean
                    description: This returns true if it shows up.
        BillingServers:
            title: BillingServers
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of servers included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard server limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of servers exceeding the included server count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingMembers:
            title: BillingMembers
            type: object
            description: An object holding information about members included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of members included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard member limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of members exceeding the included member count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingRam:
            title: BillingRam
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingImageStorage:
            title: BillingImageStorage
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingBuilds:
            title: BillingBuilds
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - parallel
                - cpu_cores
                - ram_gb
                - max_daily_builds
            properties:
                parallel:
                    type: number
                cpu_cores:
                    type: number
                    description: The number of CPU Cores availiable for builds
                ram_gb:
                    type: number
                    description: The amount of RAM availiable for builds
                max_daily_builds:
                    type:
                        - integer
                        - "null"
                    description: The maximum number of builds processed per day
        TierPlan:
            title: TierPlan
            type: object
            description: A TierPlan object describes the attributes of a subscription tier
            required:
                - id
                - name
                - code
                - generation
                - usable
                - price
                - servers
                - members
                - max_nodes
                - max_members
                - advanced_features
                - max_daily_api_requests
                - ram
                - image_storage
                - builds
                - hidden
                - description
            properties:
                id:
                    type: string
                name:
                    type: string
                code:
                    type: string
                generation:
                    type: integer
                usable:
                    type: boolean
                price:
                    $ref: "#/components/schemas/BillingAmount"
                servers:
                    $ref: "#/components/schemas/BillingServers"
                members:
                    $ref: "#/components/schemas/BillingMembers"
                max_nodes:
                    type:
                        - integer
                        - "null"
                max_members:
                    type:
                        - integer
                        - "null"
                advanced_features:
                    type: object
                    required:
                        - gpu
                        - ial
                        - autoscale
                        - deployments
                        - geodns
                        - provider_multi_account
                    properties:
                        gpu:
                            type: boolean
                        ial:
                            type: boolean
                        deployments:
                            type: boolean
                        autoscale:
                            type: boolean
                        geodns:
                            type: boolean
                        provider_multi_account:
                            type: boolean
                max_daily_api_requests:
                    type:
                        - integer
                        - "null"
                ram:
                    $ref: "#/components/schemas/BillingRam"
                image_storage:
                    $ref: "#/components/schemas/BillingImageStorage"
                builds:
                    $ref: "#/components/schemas/BillingBuilds"
                hidden:
                    type: boolean
                hubs:
                    description: An array of hub IDs with access to the tier.
                    oneOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/Identifier"
                        - type: "null"
                description:
                    type: string
        EmployeeCapabilities:
            title: EmployeeCapabilities
            type: string
            description: Capabilities of a employee, given by role.
            enum:
                - hubs-view
                - hub-members-view
                - client-servers-view
                - client-servers-delete
                - client-servers-restart
                - billing-invoices-view
                - billing-invoices-manage
                - billing-methods-view
                - billing-methods-manage
                - billing-credits-view
                - billing-credits-manage
                - environments-manage
                - environments-view
                - containers-manage
                - containers-view
                - images-manage
                - images-view
                - dns-view
                - dns-manage
                - accounts-view
                - accounts-manage
                - financials-view
                - reports-view
                - nodes-view
                - nodes-restart
                - services-view
                - clusters-view
                - clusters-manage
                - platform-changelog-view
                - platform-changelog-manage
                - platform-announcements-view
                - platform-announcements-manage
        EmployeeMeta:
            title: EmployeeMeta
            type: object
            description: A list of meta fields that can be applied to a container.
            properties:
                capabilities:
                    $ref: "#/components/schemas/EmployeeCapabilities"
        Employee:
            title: Employee
            description: An employee resource.
            type: object
            required:
                - id
                - username
                - name
                - email
                - active
                - access
                - events
                - state
                - role
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                username:
                    type: string
                    description: The employees username.
                name:
                    type: object
                    description: The employee's name
                    properties:
                        first:
                            type: string
                        last:
                            type: string
                email:
                    type: object
                    properties:
                        address:
                            type: string
                            description: The email address associated with the employee.
                active:
                    type: boolean
                    description: A boolean where true represents the employee is actively employed.
                access:
                    type: object
                    properties:
                        ssh:
                            type: boolean
                            description: A boolean where true represents the employee's permission to SSH into server(s).
                events:
                    title: EmployeeEvents
                    type: object
                    description: A collection of timestamps for each event in the employee's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the employee was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the employee was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the employee was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the employee was last_login.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the employee.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - suspending
                                      - purging
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                role:
                    type: string
                    description: The employees role.
                    enum:
                        - executive
                        - developer-director
                        - developer-team
                        - marketing-director
                        - marketing-team
                        - sales-director
                        - sales-team
                        - support-director
                        - support-team
                        - billing-director
                        - billing-team
                        - investor
                        - default
                meta:
                    $ref: "#/components/schemas/EmployeeMeta"
        GrowthResult:
            title: GrowthResult
            type: object
            description: Information about growth as it pertains to financials.
            required:
                - id
                - previous_billed
                - recent_billed
                - previous_payments
                - recent_payments
                - growth_billed
                - growth_payments
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                previous_billed:
                    type: integer
                    description: The amount previously billed to the customer.
                recent_billed:
                    type: integer
                    description: The amount recently billed to the customer.
                previous_payments:
                    type: integer
                    description: The amount the customer has payed in the past.
                recent_payments:
                    type: integer
                    description: The amount the customer paid recently.
                growth_billed:
                    type: integer
                    description: todo
                growth_payments:
                    type: integer
                    description: todo
        FinancialResult:
            title: FinancialResult
            type: object
            description: Internal financials invoices.
            required:
                - date
                - invoices
                - billied
                - payments
                - credits
                - late_fees
                - voided
            properties:
                date:
                    description: A timestamp for the invoice.
                    $ref: "#/components/schemas/DateTime"
                invoices:
                    type: integer
                    description: The number of invoice
                billed:
                    type: integer
                    description: The amount billed.
                payments:
                    type: integer
                    description: The payments made.
                credits:
                    type: integer
                    description: The credits applied to the invoice.
                late_fees:
                    type: integer
                    description: Late fees applied to the invoice.
                voided:
                    type: integer
                    description: TODO
        IntegrationAuth:
            title: IntegrationAuth
            type: object
            properties:
                region:
                    type:
                        - string
                        - "null"
                    description: The region associated with the Integration.
                namespace:
                    type:
                        - string
                        - "null"
                    description: The namespace associated with the Integration.
                api_key:
                    type:
                        - string
                        - "null"
                    description: API key for accessing the Integration.
                key_id:
                    type:
                        - string
                        - "null"
                    description: Key ID for accessing the Integration.
                secret:
                    type:
                        - string
                        - "null"
                    description: Secret for accessing the Integration.
                subscription_id:
                    type:
                        - string
                        - "null"
                    description: Subscription ID for the Integration.
                client_id:
                    type:
                        - string
                        - "null"
                    description: Client ID for the Integration.
                base64_config:
                    type:
                        - string
                        - "null"
                    description: Base64 encoded configuration for the Integration.
        IntegrationState:
            title: IntegrationState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the integration.
                          type: string
                          enum:
                              - new
                              - verifying
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        IntegrationAdvancedOptionBoolean:
            title: IntegrationAdvancedOptionBoolean
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - bool
                default:
                    type:
                        - boolean
                        - "null"
        IntegrationAdvancedOptionInt:
            title: IntegrationAdvancedOptionInt
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - int
                default:
                    type:
                        - integer
                        - "null"
        IntegrationAdvancedOptionString:
            title: IntegrationAdvancedOptionString
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - string
                default:
                    type:
                        - string
                        - "null"
        IntegrationDefinition:
            title: IntegrationDefinition
            description: Describes an integration for a Cycle Hub that can be enabled by the Hub owner.
            type: object
            required:
                - vendor
                - name
                - supports_verification
                - supports_multiple
                - required_fields
                - url
                - public
                - usable
                - editable
            properties:
                vendor:
                    type: string
                name:
                    type: string
                supports_verification:
                    type: boolean
                supports_multiple:
                    type: boolean
                features:
                    type:
                        - array
                        - "null"
                    description: A list of additional features supported by this Integration.
                    items:
                        type: string
                extends:
                    type:
                        - array
                        - "null"
                    description: A list of functionality that this integration extends. i.e. ["backups"]
                    items:
                        type: string
                extended_configuration:
                    type:
                        - object
                        - "null"
                    description: Additional configuration options that are available when using this Integration. These describe additional functionality that Cycle may utilize.
                    properties:
                        options:
                            type:
                                - array
                                - "null"
                            items:
                                type: object
                                discriminator:
                                    propertyName: type
                                    mapping:
                                        bool: "#/components/schemas/IntegrationAdvancedOptionBoolean"
                                        int: "#/components/schemas/IntegrationAdvancedOptionInt"
                                        string: "#/components/schemas/IntegrationAdvancedOptionString"
                                oneOf:
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionBoolean"
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionInt"
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionString"
                fields:
                    type: object
                    properties:
                        extra:
                            type:
                                - object
                                - "null"
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type:
                                            - string
                                            - "null"
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                        auth:
                            type:
                                - object
                                - "null"
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type:
                                            - string
                                            - "null"
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                url:
                    type: string
                    format: uri
                public:
                    type: boolean
                usable:
                    type: boolean
                editable:
                    type: boolean
                    description: If true, the Integration can be edited. Otherwise, to make a change it will need to be deleted and recreated.
        IntegrationMeta:
            title: IntegrationMeta
            type: object
            description: Additional fields that can be requested for an Integration on fetch.
            properties:
                definition:
                    $ref: "#/components/schemas/IntegrationDefinition"
                    description: The full Integration definition associated with this Integration.
        Integration:
            title: Integration
            type: object
            required:
                - id
                - identifier
                - name
                - vendor
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: Name of the integration.
                vendor:
                    type: string
                    description: Which vendor this integration is associated with.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                auth:
                    description: Authentication information for the integration, can be null.
                    anyOf:
                        - $ref: "#/components/schemas/IntegrationAuth"
                        - type: "null"
                extra:
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: string
                    description: Additional key-value pairs associated with the integration.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/ID"
                    description: Identifier of the hub associated with the integration.
                state:
                    $ref: "#/components/schemas/IntegrationState"
                events:
                    title: IntegrationEvents
                    type: object
                    description: A collection of timestamps for each event in the integration's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the integration was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the integration was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the integration was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    anyOf:
                        - $ref: "#/components/schemas/IntegrationMeta"
                        - type: "null"
        HubMemberMeta:
            title: HubMemberMeta
            type: object
            description: A list of meta fields that can be applied to a Hub Member.
            properties:
                capabilities:
                    $ref: "#/components/schemas/EmployeeCapabilities"
        HubMember:
            title: Hub Member
            description: A member of a given hub.
            type: object
            required:
                - id
                - name
                - membership_id
                - role
                - joined
                - events
                - email
                - allow_support_login
            properties:
                id:
                    type: string
                    description: An ID for the account.
                membership_id:
                    type: string
                    description: An ID for the member.
                name:
                    type: object
                    description: The first and last name associated with the account.
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the account owner.
                        last:
                            type: string
                            description: The last name of the account owner.
                email:
                    type: object
                    properties:
                        address:
                            type: string
                            description: The email address associated with the hub member.
                        verified:
                            type: boolean
                            description: Describes if the member has verified their email
                events:
                    type: object
                    description: A collection of timestamps for each event in the hub member's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the hub member was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the hub member was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the hub member was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the hub member was last_login.
                            $ref: "#/components/schemas/DateTime"
                role:
                    type: number
                    description: The hub members role.
                joined:
                    description: A timestamp of when the member joined the hub.
                    $ref: "#/components/schemas/DateTime"
                allow_support_login:
                    type: boolean
                    description: Describes if account allows support impersonate access
                meta:
                    $ref: "#/components/schemas/HubMemberMeta"
        Component:
            title: IndexComponent
            type: object
            description: Generic component format for describing resources for the search index
            required:
                - id
                - name
                - state
                - events
                - context_blobs
                - associations
            properties:
                id:
                    description: ID of the component
                    type: string
                name:
                    description: Name of the component
                    type: string
                state:
                    description: State of the component
                    type: string
                events:
                    $ref: "#/components/schemas/Events"
                context_blobs:
                    description: related strings for fuzzy search
                    type: array
                    items:
                        type: string
                associations:
                    type:
                        - object
                        - "null"
                    description: Component associations
                    additionalProperties:
                        type: string
        Index:
            title: Index
            type: object
            description: An index that enables search in the portal
            required:
                - generated
                - hubs
                - accounts
                - servers
            properties:
                generated:
                    description: The timestamp of when the index was generated
                    $ref: "#/components/schemas/DateTime"
                hubs:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                accounts:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                servers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
        Builds:
            title: Builds
            type: object
            description: Information about a given clusters builds
            required:
                - platform_id
                - cycleos_id
            properties:
                platform_id:
                    type: string
                    description: The id of the platform associated with the build
                cycleos_id:
                    type: string
                    description: The id of the cycle os
        Endpoints:
            title: Endpoints
            type: object
            description: Object containing relevand endpoint URLs
            required:
                - nexus_api
                - compute_proxy
                - bus
            properties:
                nexus_api:
                    type: string
                    description: A string containing the nexus api endpoint url
                compute_proxy:
                    type: string
                    description: A string containing the compute proxy endpoint url
                bus:
                    type: string
                    description: A string containing the bus endpoint url
        Certificate:
            title: Certificate
            type: object
            description: Inforamtion related to the certificate for a cluster
            required:
                - domain
                - san
                - wildcard
            properties:
                domain:
                    description: The domain of a clusters certificate.
                    type: string
                san:
                    description: An array of SAN strings for a clusters certificate.
                    type: array
                    items:
                        type: string
                wildcard:
                    description: A boolean representing the wildcard for a clusters certificate.
                    type: boolean
        Options:
            title: Options
            type: object
            description: Options related to a cluster
            required:
                - disable_new_hubs
                - disable_marketing
                - prod_use
            properties:
                disable_new_hubs:
                    description: Boolean where true represents new hubs disabled.
                    type: boolean
                disable_marketing:
                    description: Boolean where true represents marketing disabled.
                    type: boolean
                public_api_throttle_limit:
                    description: A number representing the throttle limit for the public api.
                    type: number
                prod_use:
                    description: Boolean where true means cluster is for production.
                    type: boolean
        Cluster:
            title: Cluster
            type: object
            description: A cluster resource
            required:
                - id
                - name
                - short_name
                - aliases
                - builds
                - api_keys
                - endpoints
                - certificates
                - options
            properties:
                id:
                    type: string
                    description: The id of the cluster
                name:
                    type: string
                    description: A name for the cluster.
                short_name:
                    type: string
                    description: A short name for the cluster.
                aliases:
                    type: array
                    items:
                        type: string
                    description: An array of cluster aliases.
                builds:
                    $ref: "#/components/schemas/Builds"
                api_keys:
                    type: object
                    description: An object containing api keys for the cluster.
                    additionalProperties:
                        type: string
                endpoints:
                    $ref: "#/components/schemas/Endpoints"
                certificates:
                    type: array
                    description: An Array of certificates for the cluster.
                    items:
                        $ref: "#/components/schemas/Certificate"
                options:
                    $ref: "#/components/schemas/Options"
        UpdateOSBuild:
            type: object
            required:
                - platform_build_id
                - cycleos_build_id
            properties:
                platform_build_id:
                    type:
                        - string
                        - "null"
                    description: Must be null if submitting the OS build ID Schema.  Cannot update both at the same time.
                cycleos_build_id:
                    type: string
                    description: The CycleOS build ID to update to.
        UpdatePlatformBuild:
            type: object
            required:
                - platform_build_id
                - cycleos_build_id
            properties:
                platform_build_id:
                    type: string
                    description: The updated platform build ID.
                cycleos_build_id:
                    type:
                        - string
                        - "null"
                    description: Must be null if submitting the platform build ID Schema.  Cannot update both at the same time.
        BuildsOs:
            title: BuildsOs
            type: object
            description: Object containing OS driver information
            required:
                - drivers
            properties:
                drivers:
                    type: object
                    description: An object containing drivers for the os
                    additionalProperties:
                        type: string
        Build:
            title: Build
            type: object
            description: A Build Resource
            required:
                - id
                - time
                - repo
                - tags
                - version
                - restart_compute
                - restart_compute_services
                - restart_nexus
                - debug
                - success
            properties:
                id:
                    type: string
                    description: The id of the build
                time:
                    $ref: "#/components/schemas/DateTime"
                repo:
                    type: string
                    description: String representing the repository of the build
                tags:
                    type: string
                    description: String representing the tags for the build
                boot_type:
                    type:
                        - string
                        - "null"
                    description: String representing the boot type of the build
                version:
                    type: string
                    description: String representing the version of the build
                restart_compute:
                    type: boolean
                    description: Boolean where true means restart compute enabled
                restart_compute_services:
                    type: boolean
                    description: Boolean where true means restart compute services enabled
                restart_nexus:
                    type: boolean
                    description: Boolean where true means restart nexus enabled
                os:
                    oneOf:
                        - $ref: "#/components/schemas/BuildsOs"
                        - type: "null"
                debug:
                    type: boolean
                    description: Boolean where true means debug enabled
                success:
                    type: boolean
                    description: Boolean where true means success
                error:
                    type:
                        - object
                        - "null"
                    description: An object describing a given activity error.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: The error message.
        NodeProvider:
            title: Provider
            type: object
            description: A provider resource as it relates to a node
            required:
                - identifier
                - location
                - initial_ips
            properties:
                identifier:
                    type: string
                location:
                    type: string
                    description: A string describing the location of a provider
                server:
                    type: string
                    description: A string describing the server
                initial_ips:
                    type: array
                    items:
                        type: string
                    description: An array of strings describing the initial IPs
        NodeHub:
            title: Hub
            type: object
            description: Object describing a nodes hub
            required:
                - id
                - provider
                - server_id
            properties:
                id:
                    type: string
                    description: The id of the hub
                provider:
                    $ref: "#/components/schemas/NodeProvider"
                server_id:
                    type: string
                    description: The id of the server
        ServerStatsNetwork:
            title: ServerStatsNetwork
            type: object
            description: Statistics about the networks on a given server.
            required:
                - external_ipv4
                - external_ipv6
            properties:
                interfaces:
                    type: object
                    description: Network interfaces for a given server.
                    additionalProperties:
                        type: object
                        description: Network interface.
                        properties:
                            interface:
                                type: string
                                description: The interface name.
                            flags:
                                type: string
                                description: Flags for the given interface.
                            mtu:
                                type: integer
                                description: The maximum transmission unit for the interface.
                            mac_addr:
                                type: string
                                description: The mac address for the interface.
                            addrs:
                                description: An array of IP addresses associated with the interface.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                external_ipv4:
                    type: string
                    description: The public IPv4 address used to connect to this server.
                external_ipv6:
                    type: string
                    description: The public IPv6 address used to connect to this server.
        ServerStatsUptime:
            title: ServerStatsUptime
            type: object
            description: Statistics describing the uptime of a given server.
            properties:
                seconds:
                    type: number
                    description: The amount in seconds the server has been up (resets on restart).
                cpu_idle:
                    type: number
                    description: CPU idle time.
        ServerStatsCpuUsage:
            title: ServerStatsCpuUsage
            type: object
            properties:
                user:
                    type: integer
                nice:
                    type: integer
                system:
                    type: integer
                idle:
                    type: integer
                iowait:
                    type: integer
                irq:
                    type: integer
                soft_irq:
                    type: integer
                steal:
                    type: integer
                guest:
                    type: integer
                guest_nice:
                    type: integer
        ServerStatsCpu:
            title: ServerStatsCpu
            type: object
            description: Statistics about the CPU resources on a server.
            properties:
                cores:
                    type: integer
                    description: The number of CPU's or vCPU's for a given server.
                processors:
                    description: An array of processor information objects.
                    type: array
                    items:
                        type: object
                        description: Processor information.
                        properties:
                            model:
                                type: string
                                description: The model of the processor.
                            speed:
                                type: number
                                format: float
                                description: The speed of the processor.
                usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsage"
        ServerStatsLoad:
            title: ServerStatsLoad
            type: object
            description: Statistics about the current load on the server.
            required:
                - avg1m
                - avg5m
                - avg15m
            properties:
                avg1m:
                    type: number
                    format: float
                    description: The 1 minute load average.
                avg5m:
                    type: number
                    format: float
                    description: The 5 minute load average.
                avg15m:
                    type: number
                    format: float
                    description: the 15 minute load average.
        ServerStatsRam:
            title: ServerStatsRam
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: integer
                    description: The available RAM on the server.
                free:
                    type: integer
                    description: The free RAM on the server.
                total:
                    type: integer
                    description: The total RAM on the server.
        ServerStatsStorage:
            title: ServerStatsStorage
            type: object
            description: Statistics about storage for a given server.
            required:
                - volume_groups
                - mounts
            properties:
                volume_groups:
                    description: An array of volume group objects.
                    type: object
                    additionalProperties:
                        type: object
                        description: Volume group
                        required:
                            - name
                            - size
                            - volumes
                        properties:
                            name:
                                type: string
                                description: A name for the volume group.
                            size:
                                type: integer
                                description: A number representing the aggregate group volume size in megabytes.
                            volumes:
                                description: The actual volumes.
                                type: object
                                additionalProperties:
                                    type: object
                                    required:
                                        - name
                                        - size
                                        - data_percent
                                        - meta_percent
                                        - pool
                                    properties:
                                        name:
                                            type: string
                                            description: The name of the volume.
                                        size:
                                            type: integer
                                            description: The size in megabytes of the volume.
                                        data_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by data.
                                        meta_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by meta data.
                                        pool:
                                            type: string
                                            description: The name of the volume pool this volume is associated with.
                mounts:
                    type: object
                    description: Records that show information about mounted filesystems where the key is the path to the mount.
                    additionalProperties:
                        title: MountedFS
                        type: object
                        description: Mounted filesystem information.
                        required:
                            - type
                            - total
                            - free
                            - used
                        properties:
                            device:
                                type: string
                                description: The device assocaited with the mount.
                            type:
                                type: string
                                description: The type of filesystem in use by the mount.
                            mountpoint:
                                type: string
                                description: The path the mount is associated with.
                            total:
                                type: integer
                                description: The total amount of storage in KB available at this mount.
                            free:
                                type: integer
                                description: The amount of uninitialized storage in KB.
                            used:
                                type: integer
                                description: The amount of storage being used in KB.
        ServerStatsOS:
            title: ServerStatsOS
            type: object
            description: Statistics about the operating system installed on the server (CycleOS).
            properties:
                release:
                    type: string
                    description: The currently installed release version of the OS.
                kernel:
                    type: string
                    description: The currently installed kernel version.
                hostname:
                    type: string
                    description: The hostname as set by the given server's OS.
        ServerStatsVersions:
            title: ServerStatsVersions
            type: object
            description: Information about the versions of Cycle services on a given server.
            required:
                - services
            properties:
                services:
                    description: A list of records about Cycle services.
                    type: object
                    additionalProperties:
                        type: string
        NodeMetaStats:
            title: NodeMetaStats
            type: object
            description: Statistics that pertain to a specific node.
            required:
                - network
                - uptime
                - cpu
                - load
                - ram
                - storage
                - os
                - versions
            properties:
                network:
                    $ref: "#/components/schemas/ServerStatsNetwork"
                uptime:
                    $ref: "#/components/schemas/ServerStatsUptime"
                cpu:
                    $ref: "#/components/schemas/ServerStatsCpu"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRam"
                storage:
                    $ref: "#/components/schemas/ServerStatsStorage"
                os:
                    $ref: "#/components/schemas/ServerStatsOS"
                versions:
                    $ref: "#/components/schemas/ServerStatsVersions"
        NodeState:
            title: NodeState
            allOf:
                - required:
                      - current
                      - changed
                  properties:
                      current:
                          description: The current state of the node.
                          type: string
                          enum:
                              - new
                              - offline
                              - authorizing
                              - online
                              - decommissioned
                      changed:
                          $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/schemas/State"
        Node:
            title: Node
            type: object
            description: A Node resource
            required:
                - id
                - approved
                - hostname
                - cluster_id
                - drivers
                - services
                - events
                - state
            properties:
                id:
                    type: string
                    description: The id of the node
                approved:
                    type: boolean
                hostname:
                    type: string
                cluster_id:
                    type: string
                    description: The id of the cluster
                hub:
                    $ref: "#/components/schemas/NodeHub"
                drivers:
                    type: array
                    items:
                        type: string
                events:
                    allOf:
                        - $ref: "#/components/schemas/Events"
                        - properties:
                              checkin:
                                  $ref: "#/components/schemas/DateTime"
                              authorized:
                                  $ref: "#/components/schemas/DateTime"
                              shutdown:
                                  $ref: "#/components/schemas/DateTime"
                stats:
                    $ref: "#/components/schemas/NodeMetaStats"
                state:
                    $ref: "#/components/schemas/NodeState"
                services:
                    type: object
                    additionalProperties:
                        type: boolean
                last_os_pull:
                    type: object
                    required:
                        - time
                        - build_id
                    properties:
                        time:
                            $ref: "#/components/schemas/DateTime"
                        build_id:
                            type: string
        ServerStatsCpuUsageTelemetry:
            title: ServerStatsCpuUsageTelemetry
            type: object
            properties:
                user:
                    type: number
                    format: float
                nice:
                    type: number
                    format: float
                system:
                    type: number
                    format: float
                idle:
                    type: number
                    format: float
                iowait:
                    type: number
                    format: float
                irq:
                    type: number
                    format: float
                soft_irq:
                    type: number
                    format: float
                steal:
                    type: number
                    format: float
                guest:
                    type: number
                    format: float
                guest_nice:
                    type: number
                    format: float
        ServerStatsRamTelemetry:
            title: ServerStatsRamTelemetry
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: number
                    format: float
                    description: The available RAM on the server.
                free:
                    type: number
                    format: float
                    description: The free RAM on the server.
                total:
                    type: number
                    format: float
                    description: The total RAM on the server.
        ServerStatsTelemetry:
            title: ServerStatsTelemetry
            type: object
            description: Statistics about a given servers telemetery data.
            required:
                - time
                - load
                - ram
                - storage_base
                - storage_pool
            properties:
                time:
                    description: The timestamp for when the telemetery data was collected.
                    $ref: "#/components/schemas/DateTime"
                cpu_usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsageTelemetry"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRamTelemetry"
                storage_base:
                    type: object
                    description: Telemetry data for the base volume of a given server.
                    required:
                        - used
                        - free
                        - total
                    properties:
                        used:
                            type: integer
                            description: The amount of storage currently used in the base volume.
                        free:
                            type: integer
                            description: The amount of free space on the base volume.
                        total:
                            type: integer
                            description: The total amount of space on the base volume.
                storage_pool:
                    type: object
                    description: User data storage across all devices.
                    required:
                        - data_percent
                        - meta_percent
                        - total
                    properties:
                        data_percent:
                            type: number
                            description: The percentage of storage used by user data.
                        meta_percent:
                            type: number
                            description: The percentage of storage used by the file allocation stables, etc.
                        total:
                            type: number
                            description: The total amount of storage available.
        ServerSharedFileSystems:
            title: ServerSharedFileSystems
            type: object
            properties:
                mounts:
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: object
                        required:
                            - type
                            - options
                            - source
                        properties:
                            type:
                                type: string
                                description: String describing the server mount type.
                            options:
                                type: string
                                description: Comma separated string describing the server mount options.
                                examples:
                                    - key1=value1,key2=value2
                            source:
                                type: string
                                description: String describing the server mount source.
                directories:
                    type:
                        - object
                        - "null"
                    description: An object describing directory identifiers with value {}.
                    additionalProperties: {}
        ServerProvider:
            title: ServerProvider
            type: object
            description: A resource regarding the provider a given server is deployed from.
            required:
                - vendor
                - integration_id
                - model
                - location
                - server
            properties:
                vendor:
                    type: string
                    description: The vendor for the provider this server is deployed from.
                integration_id:
                    $ref: "#/components/schemas/ID"
                model:
                    type: string
                    description: The model of the server that is deployed.
                zone:
                    type:
                        - string
                        - "null"
                    description: The zone of the server that is deployed, if defined.
                location:
                    type: string
                    description: A location where the server is deployed.
                server:
                    type: string
                    description: A provider specific identifier for the server.
                init_ips:
                    description: The IP's assigned to this server during provisioning.
                    type: array
                    items:
                        type: string
                mac_addr:
                    type: string
                    description: The mac address for the server.
                extra:
                    type: object
                    additionalProperties: true
                provision_options:
                    type: object
                    properties:
                        encrypt_storage:
                            type: boolean
                        storage_size:
                            type: number
                        reservation_id:
                            type: string
        ServerFeatures:
            title: ServerFeatures
            type: object
            description: A set of features a given server can have and their information.
            required:
                - sftp
            properties:
                sftp:
                    type: boolean
                    description: A boolean where true means the server accepts incoming SFTP connections through the remote volume integration.
                base_volume_gb:
                    type:
                        - integer
                        - "null"
                    description: The size of the base volume (where Cycle stores container images on this server).
                gateway:
                    type:
                        - object
                        - "null"
                    description: Configuration options for running gateway services on this server.
                    properties:
                        type:
                            type: string
                            description: The type of gateway service that can be run on this server.
                            enum:
                                - bgp
                                - static
                    required:
                        - type
        ServerConstraints:
            title: ServerConstraints
            type: object
            description: Constraints to apply to the server.
            required:
                - tags
                - allow
            properties:
                tags:
                    description: A list of server tags to put on the given server.
                    type: array
                    items:
                        type: string
                allow:
                    type: object
                    description: Settings for the server, things that are or are not allowed.
                    required:
                        - pool
                        - services
                        - overcommit
                    properties:
                        pool:
                            type: boolean
                            description: A boolean where true means - allow containers with no tags specified to be deployed to this server.
                        services:
                            type: boolean
                            description: A boolean where true means - allow service containers to be deployed to this container.
                        overcommit:
                            type: boolean
                            description: A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server.
        ServerState:
            title: ServerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the server.
                          type: string
                          enum:
                              - new
                              - provisioning
                              - configuring
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StateCountSummary:
            title: ResourceCountSummary
            type: object
            description: A summary of resources by state
            required:
                - state
                - total
                - available
            properties:
                state:
                    title: CountsByState
                    type: object
                    description: A count of this resource, grouped by state.
                    additionalProperties:
                        type: integer
                total:
                    type: integer
                    description: The total number of this resource
                available:
                    type: integer
                    description: The total number of this resource available, less any deleted ones.
            example:
                state:
                    new: 0
                    starting: 0
                    running: 5
                    stopping: 0
                    deleting: 0
                    deleted: 0
                total: 5
                available: 5
        ServerMeta:
            title: ServerMeta
            type: object
            description: A list of meta fields that can be applied to a server.
            properties:
                node:
                    type: object
                    description: Infrormation about the status of the server.
                    required:
                        - last_checkin
                        - drivers
                        - state
                        - stats
                        - healthy
                        - online
                    properties:
                        last_checkin:
                            description: The last time this server checked in with the platform.
                            $ref: "#/components/schemas/DateTime"
                        drivers:
                            description: An array a drivers associated with the given server.
                            type: array
                            items:
                                type: string
                        state:
                            $ref: "#/components/schemas/NodeState"
                        stats:
                            $ref: "#/components/schemas/NodeMetaStats"
                        healthy:
                            type: boolean
                            description: A boolean where true means the platform is reporting the server as healthy.
                        online:
                            type: boolean
                            description: A boolean where true means the server is online and reachable by the platform.
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                allocations:
                    type: object
                    required:
                        - cpu_shares
                        - ram
                    properties:
                        cpu_shares:
                            type: object
                            required:
                                - total
                                - allocatable
                                - allocated
                            properties:
                                total:
                                    type: integer
                                allocatable:
                                    type: integer
                                allocated:
                                    type: integer
                        ram:
                            type: object
                            required:
                                - total_mb
                                - allocatable_mb
                                - allocated_mb
                            properties:
                                total_mb:
                                    type: integer
                                allocatable_mb:
                                    type: integer
                                allocated_mb:
                                    type: integer
        Server:
            title: Server
            x-ogen-name: InfraServer
            type: object
            description: The server resource, referring to servers that have been deployed to a Cycle hub.
            required:
                - id
                - hub_id
                - location_id
                - model_id
                - node_id
                - shared_file_systems
                - hostname
                - creator
                - provider
                - cluster
                - features
                - constraints
                - ephemeral
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                location_id:
                    type: string
                    description: An identifier for the location this server is deployed to.
                model_id:
                    type: string
                    description: An identifier for the model of server that is deployed.
                node_id:
                    type: string
                    description: An identifier for the node.
                shared_file_systems:
                    $ref: "#/components/schemas/ServerSharedFileSystems"
                hostname:
                    type: string
                    description: The server hostname.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                provider:
                    $ref: "#/components/schemas/ServerProvider"
                cluster:
                    type: string
                    description: The cluster the given server is deployed to.
                features:
                    $ref: "#/components/schemas/ServerFeatures"
                constraints:
                    $ref: "#/components/schemas/ServerConstraints"
                autoscale:
                    type:
                        - object
                        - "null"
                    required:
                        - group_id
                    properties:
                        group_id:
                            $ref: "#/components/schemas/ID"
                ephemeral:
                    type: boolean
                    description: Set to true when a server is created as part of an auto-scale event.
                evacuate:
                    type:
                        - object
                        - "null"
                    description: Details about a server's evacuation status. When an evacuation is in progress, no new container instances will be permitted on the server.
                    required:
                        - started
                    properties:
                        started:
                            description: The time when this server began evacuating instances.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/ServerState"
                events:
                    title: ServerEvents
                    type: object
                    description: A collection of timestamps for each event in the server's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - latest_instance
                        - provisioning
                    properties:
                        created:
                            description: The timestamp of when the server was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the server was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the server was deleted.
                            $ref: "#/components/schemas/DateTime"
                        latest_instance:
                            description: The timestamp of when the latest instance was deployed to this server.
                            $ref: "#/components/schemas/DateTime"
                        provisioning:
                            type: object
                            description: Information about the provisioning of the server.
                            required:
                                - started
                                - failed
                                - completed
                            properties:
                                started:
                                    description: A timestamp of when the server started provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                failed:
                                    description: A timestamp of when the server failed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                completed:
                                    description: A timestamp of when the server completed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ServerMeta"
        ProviderLocationGeography:
            title: ProviderLocationGeography
            type: object
            description: Geographic information about a provider location.
            required:
                - latitude
                - longitude
                - city
                - state
                - country
                - region
            properties:
                latitude:
                    type: integer
                    description: The latitude of the given provider datacenter.
                longitude:
                    type: integer
                    description: The longitude of the given provider datacenter.
                city:
                    type: string
                    description: The city the datacenter resides in.
                state:
                    type: string
                    description: The state the datacenter resides in.
                country:
                    type: string
                    description: The country the datacenter resides in.
                region:
                    type: string
                    description: The region the datacenter resides in.
        ProviderLocationDetails:
            title: LocationProvider
            type: object
            description: Information about the locaiton of the provider.
            required:
                - identifier
                - location
                - code
            properties:
                identifier:
                    type: string
                    description: An identifier for the given provider
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: The ID of the provider integration associated with this location.
                location:
                    type: string
                    description: A location name returned from the provider.
                code:
                    type: string
                    description: A location code returned from the provider.
                availability_zones:
                    type: array
                    items:
                        type: string
        ProviderLocation:
            title: ProviderLocation
            type: object
            description: Location information for a given provider.
            required:
                - id
                - name
                - provider
                - compatible
                - features
                - abbreviation
                - annotations
            properties:
                id:
                    type: string
                name:
                    type: string
                    description: A name for the location.
                geographic:
                    anyOf:
                        - $ref: "#/components/schemas/ProviderLocationGeography"
                        - type: "null"
                provider:
                    $ref: "#/components/schemas/ProviderLocationDetails"
                compatible:
                    type: boolean
                    description: A boolean where true means the locaiton is supported by the platform.
                features:
                    type: object
                    description: Additional information about available and supported features of the provider location.
                    required:
                        - available
                        - supported
                    properties:
                        available:
                            description: Available features for the provider location.
                            type: array
                            items:
                                type: string
                        supported:
                            description: Supported features for the provider location.
                            type: array
                            items:
                                type: string
                abbreviation:
                    type: string
                    description: An abbreviation for the given provider locaiton.
                annotations:
                    type: object
                    description: Additional information about the given provider locaiton.
                    additionalProperties: {}
        LocationsIncludes:
            title: LocationIncludes
            description: A resource that is associated with a provider location.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderLocation"
        ACL:
            title: ACL
            description: An access control list. Defines which roles have which permissions on specific resources.
            type: object
            properties:
                roles:
                    type: object
                    additionalProperties:
                        type: object
                        title: ACLEntry
                        description: Permissions for an ACL entry.
                        required:
                            - view
                            - modify
                            - manage
                        properties:
                            view:
                                type: boolean
                                description: Can the user see / use this resource?
                            modify:
                                type: boolean
                                description: Can the user edit the state / name / identifier of this resource?
                            manage:
                                type: boolean
                                description: Can the user delete / update ACLs for this resource?
        ClusterState:
            title: ClusterState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the cluster.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Cluster-2:
            title: Cluster
            type: object
            description: Clusters are groups of servers that allow physical separation of resources.
            required:
                - id
                - identifier
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    type: string
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this cluster.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/ClusterState"
                events:
                    title: ClusterEvents
                    type: object
                    description: A collection of timestamps for each event in the cluster's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the cluster was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the cluster was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the cluster was deleted.
                            $ref: "#/components/schemas/DateTime"
        CPUSpec:
            title: CPUServerSpec
            type: object
            description: Information about the CPU for a given server.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of CPUs.
                cores:
                    type: integer
                    description: The number of cores.
                threads:
                    type: integer
                    description: The number of threads.
                type:
                    type: string
                    description: The type of the CPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the CPU is shared.
                extra:
                    type: object
                    description: Extra information about the CPU if there is any.
                    additionalProperties:
                        type: string
        GPUSpec:
            title: GPUServerSpec
            type: object
            description: Information about a given servers GPU resources.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of GPUs.
                cores:
                    type: integer
                    description: The number of cores.
                vram_gb:
                    type: integer
                    description: The amount of virtaul RAM for the GPU.
                type:
                    type: string
                    description: The type of the GPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the GPU is shared.
                extra:
                    type: object
                    description: Extra information about the GPU if there is any.
                    additionalProperties:
                        type: string
        MemorySpec:
            title: MemoryServerSpec
            type: object
            description: Information about the memory resources of a given server.
            required:
                - size_gb
                - type
                - extra
            properties:
                size_gb:
                    type: integer
                    description: A number that represents the memory resources in GB.
                type:
                    type: string
                    description: The type of the memory resources.
                extra:
                    type: object
                    description: Extra inforamtion about the memory resources.
                    additionalProperties:
                        type: string
        StorageSpec:
            title: StorageServerSpec
            type: object
            description: Information about the storage resources for a given server.
            required:
                - count
                - size_gb
                - type
                - extra
            properties:
                count:
                    type: integer
                    description: The number of storage devices for a given server.
                size_gb:
                    type: integer
                    description: The total amount of storage on a given server, in GB.
                type:
                    type: string
                    description: The type of the storage device(s).
                extra:
                    type: object
                    description: Extra information about the storage resources for a given server.
                    additionalProperties:
                        type: string
        NetworkSpec:
            title: NetworkServerSpec
            type: object
            description: Information about the network resources for a given server.
            required:
                - count
                - scope
                - throughput
                - type
            properties:
                count:
                    type: integer
                    description: The number of network resources for a given server.
                scope:
                    type: string
                    description: The scope of the interfaces.
                    enum:
                        - public
                        - private
                        - shared
                throughput:
                    type: integer
                    description: The network throughput in MB(per second).
                type:
                    type: string
                    description: The type of the NIC.
        FeaturesSpec:
            title: FeaturesServerSpec
            type: object
            required:
                - raid
            description: The spec for server features.
            properties:
                raid:
                    type:
                        - string
                        - "null"
                    description: The type of RAID supported, if any.
                hypervisor:
                    description: Indicates if the model supports virtual machines.
                    type:
                        - boolean
                        - "null"
                extra:
                    type:
                        - object
                        - "null"
                    description: Provider specific features, allowing for additional, unspecified properties. This is an open map for any key-value pairs, accommodating various types of values.
                    additionalProperties: true
        ServerSpecs:
            title: ServerSpecs
            description: Specs for a given server
            type: object
            required:
                - cpu
                - gpu
                - memory
                - storage
                - network
                - features
            properties:
                cpu:
                    $ref: "#/components/schemas/CPUSpec"
                gpu:
                    $ref: "#/components/schemas/GPUSpec"
                memory:
                    $ref: "#/components/schemas/MemorySpec"
                storage:
                    type: array
                    items:
                        $ref: "#/components/schemas/StorageSpec"
                network:
                    type: array
                    items:
                        $ref: "#/components/schemas/NetworkSpec"
                features:
                    $ref: "#/components/schemas/FeaturesSpec"
        ProviderServerSpec:
            title: ProviderServerSpec
            type: object
            description: Higher level information about a providers server.
            required:
                - identifier
                - category
                - model
                - locations
            properties:
                identifier:
                    type: string
                    description: A provider identifier
                integration_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                category:
                    type: string
                    description: A category for the server.
                class:
                    type: string
                    description: A class for the server.
                model:
                    type: string
                    description: The model of the server.
                locations:
                    description: A list of location ID's this server is available.
                    type: array
                    items:
                        type: string
                availability_zones:
                    type: object
                    additionalProperties:
                        type: array
                        items:
                            type: string
        ProviderServerModel:
            title: ProviderServerModel
            type: object
            description: A server from a provider.
            required:
                - id
                - name
                - description
                - specs
                - provider
                - price
                - compatible
                - low_resource
                - location_ids
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the server.
                description:
                    type: string
                    description: A description of the server.
                specs:
                    $ref: "#/components/schemas/ServerSpecs"
                provider:
                    $ref: "#/components/schemas/ProviderServerSpec"
                price:
                    $ref: "#/components/schemas/BillingAmount"
                compatible:
                    type: boolean
                    description: A boolean where true signifies this server is compatible with the platform.
                low_resource:
                    type: boolean
                    description: A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads.
                location_ids:
                    description: An array of location IDs where this server type is available.
                    type: array
                    items:
                        type: string
        ServerModelIncludes:
            title: ServerModelIncludes
            description: A resources that assocaited with a provider server.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderServerModel"
        IntegrationsIncludes:
            title: IntegrationsIncludes
            description: A resource that is associated with an integration.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Integration"
        ServerIncludes:
            title: ServerIncludes
            type: object
            description: A resource associated with a server.
            properties:
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
                clusters:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Cluster-2"
                models:
                    $ref: "#/components/schemas/ServerModelIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
        InfrastructureService:
            title: Infrastructure Service
            type: object
            description: A service resource.
            required:
                - id
                - node_id
                - name
                - cluster_id
                - checkin
                - active
                - uuid
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                node_id:
                    type: string
                    description: An ID for a node the service lives on.
                name:
                    type: string
                    description: The name of the service.
                    enum:
                        - factory
                        - compute
                        - compute-proxy
                        - public-api
                        - admin-api
                        - admin-portal
                        - auth
                        - portal
                        - console
                        - manager
                        - updater
                        - telemetry
                        - dns
                        - nexus
                cluster_id:
                    type: string
                    description: The ID of the cluster this service lives on.
                checkin:
                    description: A timestamp of the last time the service checked in.
                    $ref: "#/components/schemas/DateTime"
                primary:
                    description: A timestamp.
                    $ref: "#/components/schemas/DateTime"
                active:
                    type: boolean
                    description: A boolean where true represents the service is actively running.
                uuid:
                    type: string
                    description: The UUID of the service.
                ips:
                    type: object
                    description: An object holidng information about the IP's for a given service.
                    required:
                        - vpn
                        - public_ipv4
                        - public_ipv6
                    properties:
                        vpn:
                            type:
                                - string
                                - "null"
                            description: VPN IP for the service.
                        public_ipv4:
                            type:
                                - string
                                - "null"
                            description: The public IPv4 address for the service.
                        public_ipv6:
                            type:
                                - string
                                - "null"
                            description: The public IPv6 address for the service.
        NodeIncludes:
            title: InfrastructureNodeIncludes
            description: A resource associated with a infrastructure node.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Node"
        ClusterIncludes:
            title: ClusterIncludes
            description: A resource associated with a cluster.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Cluster"
        InfrastructureServiceIncludes:
            title: InfrastructureServiceIncludes
            type: object
            description: A resource associated with a Service.
            properties:
                nodes:
                    $ref: "#/components/schemas/NodeIncludes"
                cluster:
                    $ref: "#/components/schemas/ClusterIncludes"
        TaskState:
            title: TaskState
            type: object
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                current:
                    description: The current state of the task.
                    type: string
                    enum:
                        - pending
                        - error
                        - running
                        - completed
        JobTask:
            title: JobTask
            type: object
            description: Information about a job task.
            required:
                - id
                - caption
                - header
                - events
                - error
                - steps
                - state
                - input
                - output
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                caption:
                    type: string
                    description: A short description of the task.
                header:
                    type: string
                    description: The API function called.
                events:
                    title: TaskEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the task was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the task was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the task was started.
                            $ref: "#/components/schemas/DateTime"
                steps:
                    description: An array of job task steps.
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/TaskStep"
                state:
                    $ref: "#/components/schemas/TaskState"
                input:
                    type: object
                    description: Input information used for the job tasks.
                    additionalProperties: {}
                output:
                    type:
                        - object
                        - "null"
                    description: Output informaiton used for the job tasks.
                    additionalProperties:
                        type: string
                error:
                    type:
                        - object
                        - "null"
                    description: An error object describing issues with the job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: An error message
        JobState:
            title: JobState
            type: object
            required:
                - current
                - error
            properties:
                current:
                    description: The current state of the job.
                    type: string
                    enum:
                        - new
                        - queued
                        - error
                        - scheduled
                        - expired
                        - running
                        - completed
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type:
                        - object
                        - "null"
                    description: An error, if any, that has occurred for this job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
        Job:
            title: Job
            description: A job resource.
            type: object
            required:
                - id
                - queue
                - caption
                - events
                - schedule
                - expires
                - tasks
                - hash
                - limit_duplicates
                - creator
                - hub_id
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                queue:
                    type: string
                    description: A dash separated string showing the environment_id where the job is taking place.
                caption:
                    type: string
                    description: A short description of the job.
                events:
                    title: JobEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the job was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the job was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the job was started.
                            $ref: "#/components/schemas/DateTime"
                schedule:
                    description: A timestamp of when the job was scheduled.
                    $ref: "#/components/schemas/DateTime"
                tasks:
                    description: An array of job tasks.
                    type: array
                    items:
                        $ref: "#/components/schemas/JobTask"
                expires:
                    description: A timestamp for when the job expires.
                    $ref: "#/components/schemas/DateTime"
                hash:
                    type: string
                    description: A combination of the individual task details and job details.
                limit_duplicates:
                    type: boolean
                    description: A boolean where true represents the job is set to prevent duplicates of itself quickly after creation.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    $ref: "#/components/schemas/JobState"
        EnvironmentAbout:
            title: EnvironmentAbout
            type: object
            description: Contains details regarding the environment.
            required:
                - description
                - favorite
            properties:
                description:
                    type: string
                    description: A custom description for this environment.
                favorite:
                    type: boolean
                    description: If true, this environment has been marked as a favorite.
        EnvironmentState:
            title: EnvironmentState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the environment.
                          type: string
                          enum:
                              - new
                              - live
                              - cloning
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        EnvironmentFeatures:
            title: EnvironmentFeatures
            type: object
            description: An object representing specialized features configured for this environment.
            required:
                - legacy_networking
            properties:
                legacy_networking:
                    description: Whether or not legacy networking mode is enabled on this environment.
                    type: boolean
                monitoring:
                    description: The level of monitoring to enable for this environment. There is a cost associated with higher levels of monitoring.
                    type:
                        - object
                        - "null"
                    required:
                        - tier
                    properties:
                        tier:
                            type: string
                            enum:
                                - limited
                                - standard
                                - premium
                                - enterprise
        HaProxyConfigSet:
            title: HAProxyConfigSet
            type: object
            required:
                - frontend
                - backend
            properties:
                frontend:
                    type: object
                    description: Settings that describe how incoming traffic to the load balancer is handled.
                    required:
                        - mode
                        - max_connections
                        - timeouts
                    properties:
                        mode:
                            type: string
                            description: |-
                                The type of traffic expected by the load balancer for this port. Can be either: 
                                 - tcp: Traffic is forwarded without any parsing or additional manipulation. 
                                 - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
                            enum:
                                - tcp
                                - http
                        max_connections:
                            type:
                                - integer
                                - "null"
                            description: The number of simultaneous connections that can be processed at a time.
                        timeouts:
                            type:
                                - object
                                - "null"
                            description: Various options for handling timeouts when communicating with the client.
                            required:
                                - client_secs
                                - client_fin_ms
                                - http_keep_alive_ms
                                - http_request_ms
                            properties:
                                client_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                                client_fin_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                                http_keep_alive_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                                http_request_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                backend:
                    type: object
                    description: Settings related to how the load balancer routes connections to container instances.
                    required:
                        - balance
                        - timeouts
                    properties:
                        balance:
                            type: string
                            description: |-
                                How connections are balanced across your container instances. Can be one of the following: 
                                 - `roundrobin`: Each container instance is used in turns. 
                                 - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
                                 - `leastconn`: Routes traffic to the instance with the least number of active connections. 
                                 - `first`: Routes traffic to the first available instance. 
                                 - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
                            enum:
                                - roundrobin
                                - static-rr
                                - leastconn
                                - first
                                - source
                        timeouts:
                            type:
                                - object
                                - "null"
                            description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
                            required:
                                - server_secs
                                - server_fin_ms
                                - connect_ms
                                - queue_ms
                                - tunnel_secs
                            properties:
                                server_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.
                                server_fin_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.
                                connect_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.
                                queue_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
                                tunnel_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.
        HaProxyConfig:
            title: HaProxyConfig
            type: object
            description: Describes settings that are passed to HAProxy within the load balancer.
            required:
                - default
                - ports
            properties:
                default:
                    description: Settings that are applied to any port that is not overridden in the following ports section.
                    $ref: "#/components/schemas/HaProxyConfigSet"
                ports:
                    description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/HaProxyConfigSet"
        HaProxyLbType:
            title: HaProxyLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - haproxy
                details:
                    anyOf:
                        - $ref: "#/components/schemas/HaProxyConfig"
                        - type: "null"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type:
                        - boolean
                        - "null"
        WafConfig:
            title: WafConfig
            type: object
            description: Additional configuration options for the web application firewall.
            required:
                - rules
            properties:
                rules:
                    type: array
                    items:
                        type: object
                        required:
                            - description
                            - skip
                            - type
                            - match
                            - conditions
                        properties:
                            description:
                                description: Some information about the rule.
                                type: string
                            skip:
                                description: A boolean that indicates if the rule should be active or skipped.
                                type: boolean
                            type:
                                description: A string that describes if the role should allow or deny traffic based on the conditions.
                                type: string
                                enum:
                                    - allow
                                    - deny
                            match:
                                description: A string that describes if both attributes need to be true (match all) or if only one of the conditions needs to be true (match any).
                                type: string
                                enum:
                                    - any
                                    - all
                            conditions:
                                description: An array of the specific conditions for the rule.
                                type: array
                                items:
                                    type: object
                                    required:
                                        - type
                                        - operator
                                        - value
                                    properties:
                                        type:
                                            description: A string that describes the match type for the condition.
                                            type: string
                                            enum:
                                                - ip-match
                                                - geo-match
                                                - url-match
                                                - method-match
                                                - header-match
                                        operator:
                                            description: A string that indicates the range of values relative to the value property.
                                            type: string
                                            enum:
                                                - "=="
                                                - "!="
                                                - ">"
                                                - <
                                                - ">="
                                                - <=
                                        value:
                                            description: The value corresponding to the condition type.
                                            examples:
                                                - 0.0.0.0/0
                                            type: string
        Duration:
            title: Duration
            type: string
            description: A string signifying a duration of time. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h", "d", "w", "y".
            examples:
                - 72h45m2s
        TcpTransportConfig:
            title: TcpTransportConfig
            description: Additional configuration options for the TCP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    required:
                        - connections
                        - telemetry
                    properties:
                        connections:
                            type: object
                            additionalProperties: {}
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled on the load balancer.
                            additionalProperties: {}
        HttpTransportConfig:
            title: HttpTransportConfig
            description: Additional configuration options for the HTTP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    required:
                        - connections
                        - telemetry
                    properties:
                        connections:
                            type: object
                            required:
                                - max_idle_conns_per_connection
                            description: Defines extra configuration options connections to the load balancer
                            properties:
                                max_idle_conns_per_connection:
                                    type:
                                        - integer
                                        - "null"
                                    description: Maximum number of simultaneous connections (via http/2) per connection.
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled.
                            properties:
                                max_trackable_urls:
                                    description: Determines how many URLs the load balancer will track at one time. Defaults to 150.
                                    type:
                                        - integer
                                        - "null"
                                track_invalid_requests:
                                    description: Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false.
                                    type:
                                        - boolean
                                        - "null"
                                ignore_paths:
                                    description: An array of paths to exclude from tracking.
                                    type:
                                        - array
                                        - "null"
                                    items:
                                        type: string
        UdpTransportConfig:
            title: UdpTransportConfig
            description: Additional configuration options for the UDP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    type: object
                    required:
                        - telemetry
                    properties:
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled on the load balancer.
                            additionalProperties: {}
        HybridIdentifier:
            title: HybridIdentifier
            type: string
            description: Either a resource ID (objectid - i.e. 651586fca6078e98982dbd90) or a resource Identifier (human-readable)
            examples:
                - my-image-source
        TcpRouterConfig:
            title: TcpRouterConfig
            description: Additional configuration options for TCP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    additionalProperties: {}
        UdpRouterConfig:
            title: UdpRouterConfig
            description: Additional configuration options for UDP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    type: object
                    additionalProperties: {}
        HttpRouterConfig:
            title: HttpRouterConfig
            description: Additional configuration options for HTTP mode routers.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    properties:
                        redirect:
                            type:
                                - object
                                - "null"
                            required:
                                - auto_https_redirect
                                - remove_www
                            description: Defines a built-in redirect for HTTP mode routers
                            properties:
                                auto_https_redirect:
                                    type: boolean
                                    description: If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router.
                                remove_www:
                                    description: If true, any request comes in with "www" prefix will be permanently redirected to the same path without www.
                                    type: boolean
                                port:
                                    type:
                                        - integer
                                        - "null"
                                    description: The port to redirect traffic to.
                                scheme:
                                    type:
                                        - string
                                        - "null"
                                    description: The scheme to redirect to. (i.e. `https`)
                                url:
                                    type:
                                        - string
                                        - "null"
                                    description: A specific URL to redirect to.
                        forward:
                            type:
                                - object
                                - "null"
                            properties:
                                scheme:
                                    type:
                                        - string
                                        - "null"
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    type:
                                        - object
                                        - "null"
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            type:
                                                - array
                                                - "null"
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                                url:
                                    type: string
                                    description: |
                                        The URL to forward the request to.

                                        Given a path match of `^/example/(.*)$`, a route such as `/example/wow.jpg` would be forwarded as /wow.jpg.
                                    examples:
                                        - /$$1
                        proxy:
                            type:
                                - object
                                - "null"
                            properties:
                                domain:
                                    type:
                                        - string
                                        - "null"
                                    description: The domain that this router will proxy.
                                url:
                                    description: The full URL that this router will proxy.
                                    type:
                                        - string
                                        - "null"
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    type:
                                        - object
                                        - "null"
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            type:
                                                - array
                                                - "null"
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                        caching:
                            type:
                                - object
                                - "null"
                            properties:
                                files:
                                    type:
                                        - array
                                        - "null"
                                    items:
                                        type: object
                                        required:
                                            - match
                                            - ttl
                                        properties:
                                            match:
                                                description: Regex string that describes the files to cache.
                                                examples:
                                                    - (.*)\.(js|jpg|css|png|svg)$
                                                type: string
                                            ttl:
                                                description: Time string that describes the time to live.
                                                $ref: "#/components/schemas/Duration"
        V1LbConfigRouter:
            title: V1LbRouterConfig
            description: A specific router configuration that describes how traffic matching the rule is handled.
            type: object
            required:
                - match
                - mode
                - config
            properties:
                match:
                    type: object
                    description: The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then this match acts as a wildcard and will match all.
                    required:
                        - domains
                        - internal_ports
                    properties:
                        domains:
                            description: The specific domains to match against.
                            oneOf:
                                - type: array
                                  items:
                                      type: string
                                - type: "null"
                        internal_ports:
                            description: The specific ports to match against.
                            oneOf:
                                - type: array
                                  items:
                                      type: integer
                                - type: "null"
                        path:
                            type:
                                - string
                                - "null"
                        containers:
                            type:
                                - object
                                - "null"
                            description: Match traffic destined (or not destined) for a particular container.
                            properties:
                                include:
                                    description: Match any traffic that would be routed to one of these containers.
                                    oneOf:
                                        - type: array
                                          items:
                                              $ref: "#/components/schemas/HybridIdentifier"
                                        - type: "null"
                                exclude:
                                    description: Match any traffic that would NOT be routed to one of these containers.
                                    oneOf:
                                        - type: array
                                          items:
                                              $ref: "#/components/schemas/HybridIdentifier"
                                        - type: "null"
                mode:
                    type: string
                    description: |
                        How to route the traffic to the destination.
                        `random`: Pick a valid destination at random.
                        `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
                    enum:
                        - random
                        - round-robin
                config:
                    type: object
                    required:
                        - sticky_sessions
                        - destination_retries
                        - timeouts
                    properties:
                        sticky_sessions:
                            type: boolean
                            description: If a request comes in from the same origin, ensure it hits the same destination.
                        destination_retries:
                            type: integer
                            description: If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error.
                        destination_prioritization:
                            default: null
                            oneOf:
                                - type: string
                                  description: |
                                      Hints to the load balancer how to prioritize traffic to instances.
                                      **random**: Chooses a random instance. **latency**: Prioritizes lower latency instances.
                                  enum:
                                      - latency
                                      - random
                                - type: "null"
                        tls:
                            type:
                                - object
                                - "null"
                            description: TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled.
                            properties:
                                server_name:
                                    type:
                                        - string
                                        - "null"
                                    description: |
                                        [Advanced] Change the domain the controller listens on.
                                allow_insecure:
                                    type:
                                        - boolean
                                        - "null"
                                    description: If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use.
                                client_cert_auth:
                                    description: A PEM encoded string of certificates.
                                    type:
                                        - string
                                        - "null"
                                client_auth:
                                    description: |
                                        Defines how to validate the connecting TLS certificate.
                                        `none`: Do not require a TLS certificate to be sent
                                        `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                                        `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                                        `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                                    oneOf:
                                        - type: string
                                          enum:
                                              - none
                                              - request
                                              - require
                                              - require-verify
                                        - type: "null"
                        timeouts:
                            type: object
                            description: Defines how the length of various sorts of timeouts when communicating with the destination.
                            required:
                                - destination_connection
                            properties:
                                destination_connection:
                                    $ref: "#/components/schemas/Duration"
                                    description: The duration the load balancer will wait before timing out while attempting to connect to the destination.
                        extension:
                            anyOf:
                                - type: "null"
                                - type: object
                                  description: Additional configuration options specific to the selected mode (tcp/http).
                                  discriminator:
                                      propertyName: type
                                      mapping:
                                          tcp: "#/components/schemas/TcpRouterConfig"
                                          udp: "#/components/schemas/UdpRouterConfig"
                                          http: "#/components/schemas/HttpRouterConfig"
                                  oneOf:
                                      - $ref: "#/components/schemas/TcpRouterConfig"
                                      - $ref: "#/components/schemas/HttpRouterConfig"
                                      - $ref: "#/components/schemas/UdpRouterConfig"
        V1LbController:
            title: V1LbController
            type: object
            required:
                - identifier
                - port
            properties:
                identifier:
                    type: string
                    description: A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents.
                port:
                    type: integer
                    description: The port inbound trafic is accepted on.
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/WafConfig"
                        - type: "null"
                transport:
                    title: V1LbControllerTransport
                    description: Defines how traffic comes in to the load balancer, and how the load balancer handles it.
                    oneOf:
                        - type: "null"
                        - type: object
                          required:
                              - mode
                              - config
                              - routers
                              - disable
                          properties:
                              disable:
                                  type: boolean
                                  description: When true, this controller is disabled and will not be used.
                              mode:
                                  type: string
                                  description: The kind of traffic (http/tcp/udp) that will be sent to the load balancer.
                                  enum:
                                      - tcp
                                      - udp
                                      - http
                              config:
                                  type: object
                                  description: Defines how the transport for this controller operates.
                                  required:
                                      - performance
                                      - ingress
                                      - timeouts
                                      - verbosity
                                  properties:
                                      performance:
                                          type: boolean
                                          description: |
                                              Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                                              You will not see per-request breakdowns or URL logging if performance mode is enabled.
                                      ingress:
                                          type: object
                                          description: Defines how traffic gets into the load balancer.
                                          properties:
                                              tls:
                                                  type:
                                                      - object
                                                      - "null"
                                                  required:
                                                      - enable
                                                  properties:
                                                      enable:
                                                          type: boolean
                                                          description: Enables or disables TLS.
                                      timeouts:
                                          type: object
                                          description: Defines settings for various types of timeouts.
                                          required:
                                              - idle
                                          properties:
                                              idle:
                                                  description: The total amount of time a connection can be idle before being killed.
                                                  $ref: "#/components/schemas/Duration"
                                      verbosity:
                                          type: string
                                          description: Verbosity describes the level of logging detail for the controller
                                          enum:
                                              - low
                                              - normal
                                              - high
                                              - debug
                                      extension:
                                          type: object
                                          description: Extended configurations for the specified transport mode (http/tcp)
                                          discriminator:
                                              propertyName: type
                                              mapping:
                                                  tcp: "#/components/schemas/TcpTransportConfig"
                                                  http: "#/components/schemas/HttpTransportConfig"
                                                  udp: "#/components/schemas/UdpTransportConfig"
                                          oneOf:
                                              - $ref: "#/components/schemas/TcpTransportConfig"
                                              - $ref: "#/components/schemas/HttpTransportConfig"
                                              - $ref: "#/components/schemas/UdpTransportConfig"
                              routers:
                                  type: array
                                  description: Defines where traffic is sent. Many can be defined per controller.
                                  items:
                                      $ref: "#/components/schemas/V1LbConfigRouter"
        V1LbConfig:
            title: V1LbConfig
            type: object
            required:
                - controllers
            properties:
                controllers:
                    type: array
                    description: A configuration for a specific port.
                    items:
                        $ref: "#/components/schemas/V1LbController"
                controller_template:
                    anyOf:
                        - $ref: "#/components/schemas/V1LbController"
                        - type: "null"
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/WafConfig"
                        - type: "null"
        V1LbType:
            title: V1LbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - v1
                details:
                    $ref: "#/components/schemas/V1LbConfig"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type:
                        - boolean
                        - "null"
        DefaultLbType:
            title: DefaultLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - default
                details:
                    oneOf:
                        - $ref: "#/components/schemas/HaProxyConfig"
                        - $ref: "#/components/schemas/V1LbConfig"
                        - type: "null"
        LoadBalancerConfig:
            title: LoadBalancerConfig
            type: object
            description: The config object for the loadbalancer service.
            discriminator:
                propertyName: type
                mapping:
                    haproxy: "#/components/schemas/HaProxyLbType"
                    v1: "#/components/schemas/V1LbType"
                    default: "#/components/schemas/DefaultLbType"
            oneOf:
                - $ref: "#/components/schemas/V1LbType"
                - $ref: "#/components/schemas/HaProxyLbType"
                - $ref: "#/components/schemas/DefaultLbType"
        LoadBalancerEnvironmentService:
            title: LoadBalancerEnvironmentService
            type: object
            description: Information about the environments loadbalancer service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the loadbalancer service is enabled.
                container_id:
                    type:
                        - string
                        - "null"
                    description: The ID of the loadbalancer service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    anyOf:
                        - $ref: "#/components/schemas/LoadBalancerConfig"
                        - type: "null"
        DiscoveryConfig:
            title: DiscoveryConfig
            type: object
            description: The config object for the discovery service.
            properties:
                empty_set_delay:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                hosts:
                    type:
                        - object
                        - "null"
                    description: A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom /etc/resolv.conf file that works environment wide.
                    additionalProperties:
                        type: object
                        properties:
                            ipv4:
                                description: The IPv4 address the discovery server should return to any container instance requesting this hostname.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                            ipv6:
                                description: The IPv6 address the discovery server should return to any container instance requesting this hostname.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                custom_resolvers:
                    description: A list of custom DNS resolver strings.  Can specifify domains or ips.
                    type: array
                    items:
                        type: string
        DiscoveryEnvironmentService:
            title: DiscoveryEnvironmentService
            type: object
            description: Information about the environments discovery service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the discovery service is enabled.
                container_id:
                    type: string
                    description: The ID of the discovery service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment discovery service.
                config:
                    description: The config object for the discovery service.
                    anyOf:
                        - $ref: "#/components/schemas/DiscoveryConfig"
                        - type: "null"
        VpnEnvironmentService:
            title: VpnEnvironmentService
            type: object
            description: Information about the environments vpn service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the VPN service is enabled.
                container_id:
                    type: string
                    description: The ID of the VPN service container
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    type:
                        - object
                        - "null"
                    description: The config object for the VPN service.
                    required:
                        - allow_internet
                        - auth
                    properties:
                        allow_internet:
                            type: boolean
                            description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                        auth:
                            type: object
                            description: Auth configuration for the VPN.
                            required:
                                - webhook
                                - cycle_accounts
                            properties:
                                webhook:
                                    type:
                                        - string
                                        - "null"
                                    description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                                cycle_accounts:
                                    type: boolean
                                    description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                                vpn_accounts:
                                    type: boolean
                                    description: If true, allows the custom VPN accounts to log in to the VPN.
        SchedulerAccessKey:
            title: SchedulerAccessKey
            description: Custom authorization keys for the scheduler service.
            type: object
            required:
                - name
                - secret
            properties:
                name:
                    type: string
                    description: The name given to this access key
                secret:
                    type: string
                    description: The access key secret. This should be submitted with requests to a publicly accessible scheduler service.
                ips:
                    type: array
                    description: Whitelisted IPs that are allowed to make requests to the scheduler service.
                    items:
                        type: string
        SchedulerConfig:
            title: SchedulerConfig
            description: Configuration options for the scheduler Environment service.
            type: object
            required:
                - public
            properties:
                public:
                    type: boolean
                    description: |
                        If true, this scheduler will be accessible over the public internet. It will enable a LINKED record to be pointed to the scheduler container, and inbound requests to trigger function containers.
                access_keys:
                    type: array
                    items:
                        $ref: "#/components/schemas/SchedulerAccessKey"
        SchedulerEnvironmentService:
            title: SchedulerEnvironmentService
            type: object
            description: Information about the environments scheduler service. The scheduler is used by containers with a function deployment strategy to route requests to the correct instances.
            required:
                - enable
                - container_id
                - high_availablity
            properties:
                enable:
                    type: boolean
                    description: Whether or not the scheduler service is enabled.
                container_id:
                    type:
                        - string
                        - "null"
                    description: The ID of the scheduler service container.
                high_availability:
                    type: boolean
                    description: A boolean representing if the scheduler service container is set to high availability. mode or not. As of Jan 2024, this will always be false because HA is not availiable for the scheduler service.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment scheduler service.
                config:
                    anyOf:
                        - $ref: "#/components/schemas/SchedulerConfig"
                        - type: "null"
        GatewayEnvironmentService:
            title: GatewayEnvironmentService
            type: object
            description: Information about the environments gateway service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the gateway service is enabled.
                container_id:
                    type: string
                    description: The ID of the gateway service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment gateway service.
        EnvironmentServices:
            title: EnvironmentServices
            type: object
            description: Service containers run by this environment and their configurations.
            required:
                - loadbalancer
            properties:
                loadbalancer:
                    anyOf:
                        - $ref: "#/components/schemas/LoadBalancerEnvironmentService"
                        - type: "null"
                discovery:
                    anyOf:
                        - $ref: "#/components/schemas/DiscoveryEnvironmentService"
                        - type: "null"
                vpn:
                    anyOf:
                        - $ref: "#/components/schemas/VpnEnvironmentService"
                        - type: "null"
                scheduler:
                    anyOf:
                        - $ref: "#/components/schemas/SchedulerEnvironmentService"
                        - type: "null"
                gateway:
                    anyOf:
                        - $ref: "#/components/schemas/GatewayEnvironmentService"
                        - type: "null"
        IPNet:
            title: IPNet
            type: object
            required:
                - ip
                - cidr
            properties:
                ip:
                    type: string
                    description: The IP address.
                    examples:
                        - fd00::21:0:0:0
                cidr:
                    type: string
                    description: The CIDR notation, describing the range of IP addresses.
                    examples:
                        - fd00::21:0:0:0/96
        LegacyNetwork:
            title: LegacyNetwork
            type: object
            description: Legacy network information for an environment.
            required:
                - subnet
            properties:
                subnet:
                    type: integer
                    description: The IPv4 subnet id.
                ipv4:
                    description: IPv4 information available from environments using legacy networking.
                    anyOf:
                        - $ref: "#/components/schemas/IPNet"
                        - type: "null"
        PrivateNetwork:
            title: PrivateNetwork
            type: object
            required:
                - vxlan_tag
                - subnet
                - ipv6
                - legacy
            properties:
                vxlan_tag:
                    type: integer
                    description: The vxlan tag added to each packet to help identify the network.
                subnet:
                    type: string
                    description: The subnet ID.
                ipv6:
                    allOf:
                        - description: The IPv6 interface.
                        - $ref: "#/components/schemas/IPNet"
                legacy:
                    anyOf:
                        - $ref: "#/components/schemas/LegacyNetwork"
                        - type: "null"
        Version:
            title: Version
            type: string
            description: |
                Version can be any string, but if it begins with a "v", semantic version will be enforced. A [Semantic Version](https://semver.org/) string. Follows the format vMAJOR.MINOR.PATCH-build.
            examples:
                - v1.2.3-dev
        EnvironmentDeploymentTags:
            title: EnvironmentDeploymentTags
            type: object
            description: |
                A map of custom tags to deployment versions. Allows for defining a custom, persistent tag with a changing version number. 
                For example, `dev -> v1.2.3-dev`. This is useful when dealing with DNS LINKED records, where you always want dev.example.com to point to the 
                `dev` version of your app within an environment, where you can continuously deploy and update it without needing to change the record. It is 
                even more useful when you have multiple LINKED records, and you update i.e. `prod`` tag to point to a new version, all records using the `prod` tag
                are switched at once.
            additionalProperties:
                $ref: "#/components/schemas/Version"
        ContainerState:
            title: ContainerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                      desired:
                          description: The desired state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ContainerImageSummary:
            title: ContainerImageSummary
            description: The Id of the image and information on if it is a service.
            type: object
            required:
                - id
                - service
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                service:
                    anyOf:
                        - type: string
                          description: If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
                          enum:
                              - discovery
                              - loadbalancer
                              - vpn
                        - type: "null"
        ContainerEnvironmentSummary:
            title: ContainerEnvironmentSummary
            description: A summary of supplemental environment and network information specific to a container.
            type: object
            required:
                - id
                - cluster
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                container_subnet:
                    type:
                        - string
                        - "null"
                    description: The private network subnet ID for this container and its instances.
                ipv6:
                    anyOf:
                        - $ref: "#/components/schemas/IPNet"
                        - type: "null"
                legacy:
                    anyOf:
                        - $ref: "#/components/schemas/LegacyNetwork"
                        - type: "null"
        EnvironmentMeta:
            title: EnvironmentMeta
            type: object
            description: A list of meta fields that can be applied to this environment.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                containers:
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - name
                            - state
                            - image
                            - environment
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            name:
                                type: string
                                description: A user defined name for the container resource.
                            state:
                                $ref: "#/components/schemas/ContainerState"
                            image:
                                $ref: "#/components/schemas/ContainerImageSummary"
                            environment:
                                $ref: "#/components/schemas/ContainerEnvironmentSummary"
        Environment:
            title: Environment
            type: object
            description: Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://cycle.io/docs/platform/introduction-to-environments).
            required:
                - id
                - identifier
                - name
                - cluster
                - about
                - creator
                - hub_id
                - state
                - events
                - features
                - services
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this environment.
                name:
                    type: string
                    description: A user defined name for the environment resource.
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                about:
                    $ref: "#/components/schemas/EnvironmentAbout"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    $ref: "#/components/schemas/EnvironmentState"
                events:
                    title: EnvironmentEvents
                    type: object
                    description: A collection of timestamps for each event in the environment's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the environment was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the environment was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the environment was deleted.
                            $ref: "#/components/schemas/DateTime"
                features:
                    $ref: "#/components/schemas/EnvironmentFeatures"
                services:
                    $ref: "#/components/schemas/EnvironmentServices"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                private_network:
                    anyOf:
                        - $ref: "#/components/schemas/PrivateNetwork"
                        - type: "null"
                deployments:
                    type:
                        - object
                        - "null"
                    description: |
                        A map of custom tags to deployment versions.
                    required:
                        - tags
                    properties:
                        tags:
                            $ref: "#/components/schemas/EnvironmentDeploymentTags"
                meta:
                    $ref: "#/components/schemas/EnvironmentMeta"
        Permissions:
            title: Permissions
            description: Permissions information for an API Key
            type: object
            required:
                - all_environments
                - environments
            properties:
                all_environments:
                    type: boolean
                    description: A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments
                environments:
                    title: EnvironmentPermission
                    type: array
                    description: An environment ID and a boolean representing management configuration for an API key
                    items:
                        type: object
                        required:
                            - id
                            - manage
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            manage:
                                type: boolean
                                description: A boolean, where true represents the API keys ability to make changes to the environment components
        ApiKeyCreator:
            title: ApiKeyCreator
            description: An extended resource that has information on a Cycle hub API key
            type: object
            required:
                - id
                - name
                - creator
                - hub_id
                - permissions
                - capabilities
                - ips
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the API key
                hub_id:
                    $ref: "#/components/schemas/ID"
                secret:
                    type: string
                    description: The API key secret
                permissions:
                    $ref: "#/components/schemas/Permissions"
                capabilities:
                    type: object
                    description: The API key capabilities list
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                        specific:
                            type: array
                            items:
                                type: string
                ips:
                    type:
                        - array
                        - "null"
                    items:
                        type: string
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    $ref: "#/components/schemas/Events"
        CreatorInclude:
            title: CreatorInclude
            description: An identity that created a resource.
            type: object
            properties:
                accounts:
                    type: object
                    description: Included creators that are public accounts, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                employees:
                    type: object
                    description: Included creators that are employees of Cycle, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                visitors:
                    type: object
                    description: Included creators that are not Cycle accounts, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                environments:
                    type: object
                    description: Included creators that are Cycle environments (usually automatically created resources), keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Environment"
                api_keys:
                    type: object
                    description: Included creators that are Cycle API Keys, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ApiKeyCreator"
        JobIncludes:
            title: JobIncludes
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        DailyServiceStats:
            title: DailyServiceStats
            type: object
            description: Statistics about services for a given day.
            required:
                - conversions
            properties:
                conversions:
                    type: integer
                    description: The number of account creations for the day.
        DailyAccountStats:
            title: DailyAccountStats
            type: object
            description: Statistics about accounts for a day.
            required:
                - logins
                - signups
            properties:
                logins:
                    type: integer
                    description: The number of logins for the day.
                signups:
                    type: integer
                    description: The number of signups for the day.
        DailyInfrastructureStats:
            title: DailyInfrastructureStats
            type: object
            description: Infrastructure statistics from a given day.
            required:
                - deployed
                - decommissioned
            properties:
                deployed:
                    type: integer
                    description: The number of servers deployed.
                decommissioned:
                    type: integer
                    description: The number of servers decommissioned.
        Daily:
            title: DailyReport
            type: object
            description: A report that would summarize daily metrics.
            required:
                - services
                - accounts
                - infrastructure
            properties:
                services:
                    $ref: "#/components/schemas/DailyServiceStats"
                accounts:
                    $ref: "#/components/schemas/DailyAccountStats"
                infrastructure:
                    $ref: "#/components/schemas/DailyInfrastructureStats"
        ServicesSnapshot:
            title: ServicesSnapshot
            type: object
            description: A snapshot of current services information.
            required:
                - tiers
                - support
            properties:
                tiers:
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - name
                            - subscribers
                            - revenue
                        properties:
                            id:
                                type: string
                                description: The ID for the tier.
                            name:
                                type: string
                                description: The name of the tier.
                            subscribers:
                                type: integer
                                description: The number of active subscribers to the given tier.
                            revenue:
                                type: integer
                                description: The amount of revenue generated by the tier.
                support:
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - name
                            - subscribers
                            - revenue
                        properties:
                            id:
                                type: string
                                description: The ID for the support.
                            name:
                                type: string
                                description: The name of the support.
                            subscribers:
                                type: integer
                                description: The number of active subscribers to the given support.
                            revenue:
                                type: integer
                                description: The amount of revenue generated by the support.
        AccountsSnapshot:
            title: AccountsSnapshot
            type: object
            description: A snapshot of accounts deatils.
            required:
                - total
            properties:
                total:
                    type: integer
                    description: The number of existing accounts.
        InfrastructureSnapshot:
            title: InfrastructureSnapshot
            type: object
            description: A snapshot of existing infrastructure.
            required:
                - servers
                - ram_total_gb
                - models
                - providers
            properties:
                servers:
                    type: integer
                    description: the number of servers.
                ram_total_gb:
                    type: integer
                    description: The total amount of RAM licensed.
                models:
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - count
                            - ram
                        properties:
                            id:
                                type: string
                                description: The ID of the model.
                            count:
                                type: integer
                                description: TODO
                            ram:
                                type: integer
                                description: The amount of ram this model has.
                providers:
                    type: array
                    items:
                        type: object
                        required:
                            - identifier
                            - count
                        properties:
                            identifier:
                                type: string
                                description: The identifier for the provider.
                            count:
                                type: integer
                                description: TODO
        DailySnapshot:
            title: DailySnapshot
            description: Account, service, and infrastructure snapshots.
            type: object
            required:
                - services
                - accounts
                - infrastructure
            properties:
                services:
                    $ref: "#/components/schemas/ServicesSnapshot"
                accounts:
                    $ref: "#/components/schemas/AccountsSnapshot"
                infrastructure:
                    $ref: "#/components/schemas/InfrastructureSnapshot"
        Report:
            title: Report
            type: object
            description: A report that would summarize metrics.
            required:
                - id
                - created
                - daily
                - snapshot
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                created:
                    description: The timestamp for when the report was created.
                    $ref: "#/components/schemas/DateTime"
                daily:
                    $ref: "#/components/schemas/Daily"
                snapshot:
                    $ref: "#/components/schemas/DailySnapshot"
        LeadOrganization:
            title: LeadOrganization
            type: object
            description: The organization a new lead is associated with.
            required:
                - name
                - size
                - industry
            properties:
                name:
                    type: string
                size:
                    type: integer
                industry:
                    type: string
        LeadIndividual:
            title: LeadIndividual
            type: object
            description: Details about a new lead.
            required:
                - role
                - phone
            properties:
                role:
                    type: string
                phone:
                    type: integer
        LeadQualifiers:
            title: LeadQualifiers
            type: object
            description: Information used to determine if a lead is qualified or not.
            required:
                - uses
                - num_developers
                - num_devops
                - goals
            properties:
                uses:
                    type: object
                    required:
                        - containers
                        - cloud
                        - on_prem
                        - vms
                        - bare_metal
                        - providers
                    properties:
                        containers:
                            type: boolean
                        cloud:
                            type: boolean
                        on_prem:
                            type: boolean
                        vms:
                            type: boolean
                        bare_metal:
                            type: boolean
                        providers:
                            type: array
                            items:
                                type: string
                num_developers:
                    type:
                        - integer
                        - "null"
                num_devops:
                    type:
                        - integer
                        - "null"
                goals:
                    type: array
                    items:
                        type: string
        Lead:
            title: Lead
            type: object
            description: Perhaps a new Cycle customer!
            required:
                - id
                - staging_account_id
                - account_id
                - organization
                - individual
                - qualifiers
                - preferred_demo_time
                - notes
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                staging_account_id:
                    $ref: "#/components/schemas/ID"
                account_id:
                    oneOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                organization:
                    oneOf:
                        - $ref: "#/components/schemas/LeadOrganization"
                        - type: "null"
                individual:
                    oneOf:
                        - $ref: "#/components/schemas/LeadIndividual"
                        - type: "null"
                qualifiers:
                    oneOf:
                        - $ref: "#/components/schemas/LeadQualifiers"
                        - type: "null"
                preferred_demo_time:
                    oneOf:
                        - $ref: "#/components/schemas/DateTime"
                        - type: "null"
                notes:
                    type: object
                    additionalProperties:
                        type: string
                events:
                    title: LeadEvents
                    type: object
                    description: A collection of timestamps for each event in the lead's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - demo_completed
                    properties:
                        created:
                            description: The timestamp of when the lead was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the lead was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the lead was deleted.
                            $ref: "#/components/schemas/DateTime"
                        demo_completed:
                            description: The timestamp of when the demo was seen.
                            $ref: "#/components/schemas/DateTime"
        StagingAccount:
            title: StagingAccount
            type: object
            description: A resource that represents a staging account
            required:
                - id
                - name
                - email
                - events
                - state
                - password
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: object
                    description: The first and last name associated with the account.
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the account owner.
                        last:
                            type: string
                            description: The last name of the account owner.
                email:
                    type: object
                    description: Information about the email address associated with the account.
                    required:
                        - address
                        - verified
                        - added
                    properties:
                        address:
                            type: string
                            description: The email address.
                        verified:
                            type: boolean
                            description: If true, the email has been verified and the account is active.
                        added:
                            description: The date the email was added to the account
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the account.
                                  type: string
                                  enum:
                                      - new
                                      - live
                        - $ref: "#/components/schemas/State"
                events:
                    title: AccountEvents
                    type: object
                    description: A collection of timestamps for each event in the account's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the account was last accessed.
                            $ref: "#/components/schemas/DateTime"
        LeadIncludes:
            title: LeadIncludes
            type: object
            description: A resource that is associated with a hub membershp.
            properties:
                staging_accounts:
                    type: object
                    description: A record with an ID mapped to a staging account.
                    additionalProperties:
                        $ref: "#/components/schemas/StagingAccount"
    responses:
        DefaultError:
            description: General error response from the platform
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorEnvelope"
