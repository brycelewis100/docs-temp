openapi: 3.1.0
info:
    license:
        name: Apache-2.0
        url: http://www.apache.org/licenses/LICENSE-2.0
    x-logo:
        url: https://static.cycle.io/icons/logo/logo-white.svg
    description: |
        The Cycle Platform API is a [REST-based](http://en.wikipedia.org/wiki/Representational_state_transfer), resource-oriented API
        designed to be easy to use and understand. Using this API, you are able to fully interact with the Cycle Platform. 

        All API responses return JSON, including errors. There is also support for cross-origin resource sharing, so this API can be used
        in a client-side web application as well.

        ## Auth Basics 
        Every API request much have an accompanying API key in the Authorization header. For more information on generating an API key head over to the [Portal Docs](https://cycle.io/docs/portal/managing-an-api-key-and-settings#creating-an-api-key). 

        Your API key should never be made publicly available, published to a public repository, or used on a client side
        web app. If you would like to use the API from a web app, you should create a thin-client service that acts as a passthrough for
        your API requests.

        ## The Root Document
        Every response follows the same structure, known as the root document. The main data structure, known as a
        resource, is nested under a data field. If you request a collection of resources, the
        data field will be an array of those resources. If you request a single resource, the data field will be
        equal to that resource.

        If there is an error, the error field will be present, and the data field will be present and null.

        The root resource. If fetching a collection, this will be an array of resource objects.

        Includes fields - the key will be the name of the included item passed. All values of include fields
        will be a full resource structure. (i.e. including environments will embed full environment objects by ID)

        Meta Fields - the key will be equal to the name of the meta field provided. Values of meta
        fields will vary based on the resource. These values are injected into the data object(s).

        ## Scope
        In order to fetch resources that are part of a hub (containers, environments, etc.), you will need to pass an
        X-Hub-ID header. When fetching collections of resources, this will limit the response to contain only resources from
        the specified hub. Most requests require this header.

        ## Queries
        When trying to gather more complete or specific data you can use query parameters to supplement the normal return (metas,
        includes) and you can also add specificity to the format and the order (sort, filter). It's worth understanding that
        sort & filter should only be used on collections.

        **Sort** - An array of sort values. To sort descending, put a `-`n front of the value, i.e. `-id`.

        **Include** - An array of include values. Included resources will show up under the root document's `include` field, with the key being the id
        of the included resource. In the case of applying an include to a collection of resources, if two resources share the same
        include, it will only appear once in the return.

        **Meta** - An array of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a
        collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to
        individual resources, and may appear in the root document. These will be clearly labeled.

        **Filter** - The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
    version: 1.0.0
    title: Cycle Platform API
    contact:
        email: support@cycle.io
servers:
    - description: Cycle Platform API
      url: https://api.cycle.io
security:
    - bearerAuth: []
      hubAuth: []
tags:
    - name: Accounts
      description: Endpoints related to managing your account on Cycle.
    - name: Memberships
      description: Endpoints related to account hub memberships, such as sending invitations to hubs or listing the hubs your account is a member of.
    - name: Two-Factor Auth
      description: Endpoints related to setting up two-factor authorization on a Cycle account.
    - name: Announcements
      description: Endpoints for reading announcements posted by the Cycle team.
    - name: Credits
      description: Endpoints related to credits applied to a hub.
    - name: Invoices
      description: Endpoints related to hub invoices, including the ability to pay an invoice.
    - name: Methods
      description: Endpoints related to managing payment methods associated with a hubs.
    - name: Orders
      description: Endpoints related to orders placed on a hub.
    - name: Plans
      description: Endpoints for fetching the available billing plans for a hub.
    - name: Services
      description: Endpoints related to the active services used by a hub.
    - name: Containers
      description: Endpoints related to managing containers, such as starting/stopping/reconfiguring and telemetry.
    - name: Instances
      description: Endpoints related to managing a container's instances, including connecting to the console and credentials for SSH.
    - name: Backups
      description: Endpoints related to managing container backups.
    - name: Zones
      description: Endpoints related to DNS zones.
    - name: Records
      description: Endpoints related to managing DNS zone records.
    - name: TLS
      description: Endpoints related to TLS certificate generation.
    - name: Environments
      description: Endpoints related to managing an environment.
    - name: Deployments
      description: Endpoints related to environment deployments.
    - name: Scoped Variables
      description: Endpoints related to managing an environment's scoped variables.
    - name: Services/Discovery
      description: Endpoints related to managing an environment's discovery service.
    - name: Services/Load Balancer
      description: Endpoints related to managing an environment's load balancer service.
    - name: Services/Scheduler
      description: Endpoints related to managing an envrionment's scheduler service.
    - name: Services/VPN
      description: Endpoints related to managing an environment's VPN service.
    - name: Hubs
      description: Endpoints related to managing hubs on Cycle.
    - name: API Keys
      description: Endpoints related to managing a hub's API keys.
    - name: Integrations
      description: Endpoints related to managing a hub's integrations.
    - name: Hub Members
      x-displayName: Members
      description: Endpoints related to managing members of the current hub.
    - name: Hub Notifications
      x-displayName: Notifications
      description: Endpoints related to receiving hub notifications.
    - name: Roles
      description: Endpoints related to managing a hub's role based access controls.
    - name: Images
      description: Endpoints related to managing container images.
    - name: Image Sources
      description: Endpoints related to managing image sources.
    - name: Infrastructure
      description: Endpoints related to managing physical/virtual infrastructure on Cycle.
    - name: Auto-Scale Groups
      description: Endpoints for managing groups of infrastructure that can be used for auto-scaling.
    - name: Clusters
      description: Endpoints related to managing infrastructure clusters.
    - name: Providers
      description: Endpoints related to providers configured for a hub.
    - name: Servers
      description: Endpoints related to managing servers on Cycle.
    - name: IPs
      description: Endpoints for managing IP allocations.
    - name: Jobs
      description: Endpoints related to managing long-running tasks, known as jobs, on Cycle.
    - name: Monitoring
      description: Endpoints related to gathered metrics for building dashboards, charts, and graphs.
    - name: Pipelines
      description: Endpoints related to pipelines, used for integrating with CI/CD solutions and automating deployments or other tasks.
    - name: Trigger Keys
      description: Endpoints for managing the trigger keys used to kick off a pipeline run.
    - name: Networks
      description: Endpoints for managing software-defined networks, for linking multiple environments together.
    - name: Search
      description: Endpoints related to search functionality on a hub.
    - name: Stacks
      description: Endpoints for managing Cycle stacks.
    - name: Stack Builds
      description: Endpoints for managing builds of a Cycle stack, including deploying a stack build to an environment.
    - name: Virtual Machines
      description: Endpoints for managing virtual machines.
    - name: Utility
      description: Extra utility endpoints that aren't related to a specific resource.
paths:
    /v1/account:
        get:
            operationId: getAccount
            summary: Get Account
            description: Gets the Account associated with the authenticated bearer token.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            responses:
                "200":
                    description: Returns the Account.
                    content:
                        application/json:
                            schema:
                                title: AccountResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAccount
            tags:
                - Accounts
            summary: Update Account
            description: Updates the Account.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: object
                                    description: The new name on the Account.
                                    properties:
                                        first:
                                            type: string
                                        last:
                                            type: string
                                allow_support_login:
                                    type: boolean
                                    description: If true, Cycle employees will have the ability, upon consent, to access the account for support purposes. This access will be logged.
            responses:
                "200":
                    description: Returns the updated Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAccount
            tags:
                - Accounts
            summary: Delete Account
            description: Puts the Account into a `deleted` state. This will fail if the Account is the current `OWNER` of an active Hub.
            responses:
                "202":
                    description: Returns a job descriptor with information about the status of the Account deletion.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/logins:
        get:
            operationId: getAccountLogins
            summary: Get Account Logins
            description: Lists logins associated with a given account.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of login records associated with this Account.
                    content:
                        application/json:
                            schema:
                                title: AccountLoginsResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            oneOf:
                                                - $ref: "#/components/schemas/AccountEmployeeLogin"
                                                - $ref: "#/components/schemas/AccountPasswordLogin"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/password:
        patch:
            operationId: changePassword
            summary: Change Password
            description: Change the password on the Account. Requires the current password of the Account to be submitted.
            security:
                - bearerAuth: []
            tags:
                - Accounts
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - current
                                - new
                            properties:
                                current:
                                    type: string
                                    description: Current Password
                                new:
                                    type: string
                                    description: New Password
                                    minLength: 8
            responses:
                "200":
                    description: Returns an Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/reset-password:
        post:
            operationId: resetPassword
            summary: Reset Password
            description: Initiate a password reset for the Account. A confirmation email will be sent to the email associated with the Account, and the token in the email must be passed in a second call to this endpoint.
            tags:
                - Accounts
            requestBody:
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: object
                                  required:
                                      - email
                                  properties:
                                      email:
                                          type: object
                                          required:
                                              - address
                                          properties:
                                              address:
                                                  type: string
                                - type: object
                                  required:
                                      - token
                                      - password
                                  properties:
                                      token:
                                          type: string
                                      password:
                                          type: string
            responses:
                "200":
                    description: Returns a simple object containing a success boolean.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - success
                                        properties:
                                            success:
                                                type: boolean
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/invites:
        get:
            operationId: getAccountInvites
            summary: List Account Invites
            description: Lists the pending Hub Memberships (also known as Invites) associated with the Account.
            security:
                - bearerAuth: []
            tags:
                - Memberships
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - $ref: "#/components/parameters/MembershipIncludeParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of pending Hub Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/AccountMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/invites/{inviteId}:
        patch:
            operationId: updateAccountInvite
            summary: Accept or Reject an Invite
            description: Accept/reject a pending Invite to join a Hub.
            security:
                - bearerAuth: []
            tags:
                - Memberships
            parameters:
                - name: inviteId
                  description: The ID of the given Invite.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/MembershipIncludeParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                accept:
                                    type: boolean
                                    description: If true, the Invite will be accepted and the associated Account will join the Hub.
                                decline:
                                    type: boolean
                                    description: If true, the Invite will be declined and the associated Account will NOT join the Hub.
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/AccountMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/memberships:
        get:
            operationId: getAccountMemberships
            summary: Get Account Memberships
            description: Lists the Hub Memberships for a given account.
            security:
                - bearerAuth: []
            tags:
                - Memberships
            parameters:
                - $ref: "#/components/parameters/MembershipIncludeParam"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Memberships associated with the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/setup:
        get:
            operationId: getTwoFactorAuthSetup
            summary: Get Two-Factor Auth Setup
            description: Gets the barcode and secret required for setting up two-factor authentication for the Account.
            tags:
                - Two-Factor Auth
            parameters: []
            responses:
                "200":
                    description: Returns necessary information for configuring two-factor auth for the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthSetup"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: enableTwoFactorAuth
            summary: Enable Two-Factor Auth
            description: Enables two-factor auth for the Account. Retrieve the token from an authenticator app using the secret from `getTwoFactorAuthSetup`.
            tags:
                - Accounts
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - token
                            properties:
                                token:
                                    type: string
                                    description: The token used to authenticate the two-factor setup.
            responses:
                "200":
                    description: Returns the recovery codes needed in case two-factor auth is no longer possible.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthRecovery"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/disable:
        post:
            operationId: disableTwoFactorAuth
            summary: Disable Two-Factor Auth
            description: Disables two-factor auth for the account.
            tags:
                - Two-Factor Auth
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - token
                            properties:
                                token:
                                    type: string
                                    description: A valid existing two-factor auth token, for verification.
            responses:
                "200":
                    description: Returns the Account.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Account"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/account/2fa/recover:
        post:
            operationId: recoverTwoFactorAuth
            summary: Recover Two-Factor Auth
            description: Returns a new two-factor auth setup to reset the Account's two-factor auth.
            tags:
                - Two-Factor Auth
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                                - recovery_codes
                            properties:
                                email:
                                    type: string
                                    description: The user's email
                                password:
                                    type: string
                                recovery_codes:
                                    type: array
                                    items:
                                        type: string
                                token:
                                    type: string
            responses:
                "200":
                    description: Returns details for setting up two-factor auth.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TwoFactorAuthSetup"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/announcements:
        get:
            operationId: getAnnouncements
            summary: Get Announcements
            description: Lists any important updates posted by the Cycle team.
            security:
                - bearerAuth: []
            tags:
                - Announcements
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          resolved:
                              description: Get only Announcements that have been resolved, or only those that have not.
                              type: string
                              enum:
                                  - "true"
                                  - "false"
                          range:
                              description: The start date from when to fetch the Announcements
                              type: string
                              enum:
                                  - hour
                                  - day
                                  - week
                                  - month
                                  - year
            responses:
                "200":
                    description: List of announcements.
                    content:
                        application/json:
                            schema:
                                title: AnnouncementsListResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Announcement"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits:
        get:
            operationId: getCredits
            summary: List Billing Credits
            description: |
                Lists the Billing Credits associated with the current Hub.

                Requires the `billing-credits-view` capability.
            tags:
                - Credits
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the credit's current state.
                          search:
                              type: string
                              description: Use a text-based search to filter the credits.
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of credit resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/credits/{creditsId}:
        get:
            operationId: getCredit
            summary: Get Billing Credit
            description: Requires the `billing-credits-view` capability.
            tags:
                - Credits
            parameters:
                - name: creditsId
                  description: The ID for a given credit.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a credit resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Credit"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices:
        get:
            operationId: getInvoices
            summary: List Billing Invoices
            description: |
                List the Invoices assoicated with the Hub.  

                Requires the `billing-invoices-view` capability.
            tags:
                - Invoices
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for the specified text on supported fields.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the invoice's current state.
                          range-start:
                              description: The start date from when to pull the invoices
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the invoices
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns a list of Invoices.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Invoice"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}:
        get:
            operationId: getInvoice
            summary: Get Billing Invoice
            description: Requires the `billing-invoices-view` capability.
            tags:
                - Invoices
            parameters:
                - name: invoiceId
                  description: The ID of the invoice.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
            responses:
                "200":
                    description: Returns an invoice resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Invoice"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/invoices/{invoiceId}/tasks:
        post:
            operationId: createInvoiceJob
            summary: Create Invoice Job
            description: |
                Creates a new job for an Invoice. Generally used to make a payment on an invoice.

                Requires the `billing-invoices-pay` capability.
            tags:
                - Invoices
            parameters:
                - name: invoiceId
                  description: The ID of the invoice.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - pay
                                    description: The name of the action to perform.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods:
        get:
            operationId: getBillingMethods
            tags:
                - Methods
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            summary: List Billing Methods
            description: |
                Lists the Billing Methods associated with the Hub defined in X-Hub-ID.

                Requires the `billing-methods-manage` capability.
            responses:
                "200":
                    description: returns a collection of billing methods.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createBillingMethod
            tags:
                - Methods
            parameters: []
            summary: Create Billing Method
            description: Requires the `billing-methods-manage` capability.
            requestBody:
                description: Parameters for creating a new billing method.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - primary
                                - address
                            properties:
                                name:
                                    type: string
                                    description: A name for the billing method.
                                primary:
                                    type: boolean
                                    description: A boolean where true represents a billing method being primary.
                                address:
                                    $ref: "#/components/schemas/Address"
                                credit_card:
                                    oneOf:
                                        - type: object
                                          required:
                                              - name
                                              - number
                                              - cvv
                                              - expiration
                                          properties:
                                              name:
                                                  type: string
                                              number:
                                                  type: string
                                              cvv:
                                                  type: string
                                              expiration:
                                                  type: object
                                                  required:
                                                      - month
                                                      - year
                                                  properties:
                                                      month:
                                                          type: number
                                                      year:
                                                          type: number
                                        - type: "null"
                                us_bank_acct:
                                    oneOf:
                                        - type: object
                                          required:
                                              - account_holder_name
                                              - account_holder_type
                                              - routing_number
                                              - account_number
                                          properties:
                                              account_holder_name:
                                                  type: string
                                                  description: The name of the account holder.
                                              account_holder_type:
                                                  type: string
                                                  description: Whether this account is owned by a business or an individual.
                                                  enum:
                                                      - individual
                                                      - company
                                              routing_number:
                                                  type: string
                                                  description: The routing number of the bank where the account lives.
                                              account_number:
                                                  type: string
                                                  description: The number of the bank account.
                                        - type: "null"
            responses:
                "201":
                    description: Returns a billing method.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods/{methodId}:
        get:
            operationId: getBillingMethod
            summary: Get Billing Method
            description: Requires the `billing-methods-manage` capability.
            tags:
                - Methods
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateBillingMethod
            summary: Update Billing Invoice
            description: Requires the `billing-methods-manage` capability.
            tags:
                - Methods
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the billing method.
                                primary:
                                    type: boolean
                                    description: A boolean where true represents a billing method being primary.
            responses:
                "200":
                    description: Returns a billing method resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Method"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteBillingMethod
            summary: Delete Biilling Method
            description: |
                Deletes the Billing Method. However, the primary payment method may not be deleted.
                Requires the `billing-methods-manage` capability.
            tags:
                - Methods
            parameters:
                - name: methodId
                  description: The ID of the billing method.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/methods/{methodId}/tasks:
        post:
            operationId: createBillingMethodJob
            summary: Create Billing Method Job
            description: |
                Creates a new job for a billing method. Generally used to verify a payment method.

                Requires the `billing-methods-manage` capability.
            tags:
                - Methods
            parameters:
                - name: methodId
                  description: The ID of the method.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - verify
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    required:
                                        - micro_deposits
                                    properties:
                                        micro_deposits:
                                            type: array
                                            items:
                                                type: integer
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders:
        get:
            operationId: getOrders
            summary: List Billing Orders
            description: Requires the `billing-services-manage` capability.
            tags:
                - Orders
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            responses:
                "200":
                    description: Returns a list of Billing Orders.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createOrder
            summary: Create Billing Order
            description: Requires the `billing-orders-manage` capability.
            tags:
                - Orders
            parameters:
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            requestBody:
                description: Parameters for creating a new order
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                tier_plan_id:
                                    type: string
                                    description: ID associated with the tier plan
                                support_plan_id:
                                    type: string
                                    description: ID associated with the support plan
                                term_length:
                                    type: string
                                    description: String that defines term length
                                    enum:
                                        - once
                                        - monthly
                                        - yearly
                                promo_code:
                                    type: string
                                    description: String that defines a promo code
            responses:
                "201":
                    description: Returns a Billing Order.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/BillingOrder"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders/{orderId}:
        get:
            operationId: getBillingOrder
            summary: Get Billing Order
            description: Requires the `billing-services-manage` capability.
            tags:
                - Orders
            parameters:
                - name: orderId
                  description: The ID of the billing order.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            responses:
                "200":
                    description: Returns a Billing Order
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateBillingOrder
            summary: Update Billing Order
            description: Requires the `billing-services-manage` capability.
            tags:
                - Orders
            parameters:
                - name: orderId
                  description: The ID of the billing order.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - due
                - $ref: "#/components/parameters/OrderIncludeParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                tier_plan_id:
                                    type: string
                                    description: ID associated with the tier plan
                                support_plan_id:
                                    type: string
                                    description: ID associated with the support plan
                                term_length:
                                    type: string
                                    description: String that defines term length
                                    enum:
                                        - once
                                        - monthly
                                        - yearly
                                promo_code:
                                    type: string
                                    description: String that defines a promo code
            responses:
                "200":
                    description: Returns a Billing Order.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Order"
                                    includes:
                                        $ref: "#/components/schemas/BillingOrderIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/orders/{orderId}/tasks:
        post:
            operationId: createOrderJob
            summary: Create Billing Order Job
            description: |
                Used to confirm a Billing Order.

                Requires the `billing-services-manage` capability.
            tags:
                - Orders
            parameters:
                - name: orderId
                  description: The ID of the requested Order
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - confirm
                                    description: The name of the action to perform
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/support:
        get:
            operationId: getBillingSupportPlans
            summary: List Support Plans
            tags:
                - Plans
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            deprecated: true
            responses:
                "200":
                    description: Returns available support plans.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/SupportPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/plans/tiers:
        get:
            operationId: getBillingTiers
            summary: List Billing Tiers
            description: Returns list of availiable Billing Tiers.
            tags:
                - Plans
            parameters: []
            responses:
                "200":
                    description: Returns a list of available Billing Tiers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TierPlan"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services:
        get:
            operationId: getBillingServices
            summary: List Billing Services
            description: Requries the `billing-services-view` capability.
            tags:
                - Services
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Billing Services.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Service"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services/{servicesId}:
        get:
            operationId: getBillingService
            summary: Get Billing Service
            description: Requries the `billing-services-view` capability.
            tags:
                - Services
            parameters:
                - name: servicesId
                  description: The ID of the Billing Service.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns the Hub's specified Billing Service.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Service"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/billing/services/overages:
        get:
            operationId: getBillingOverages
            summary: List Billing Overages
            tags:
                - Services
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns Billing Overages.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Overage"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers:
        get:
            operationId: getContainers
            summary: List Containers
            description: Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domains
                              - ips
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` filter for containers matching a particular creator, such as `account-ID` or `environment-ID`
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those containers matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search containers for a value associated with a field on the given container(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state.
                          service:
                              type: string
                              description: |
                                  `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`.
                          public_network:
                              type: string
                              description: |
                                  `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`.
                          image:
                              type: string
                              description: |
                                  `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment.
                          tags:
                              type: string
                              description: |
                                  `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return.
                          stack:
                              type: string
                              description: |
                                  `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack.
                          deployment:
                              type: string
                              description: |
                                  `filter[deployment]=v1,v2` filter containers by deployment(s).
                          range-start:
                              description: The start date from when to pull the containers
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the containers
                              $ref: "#/components/schemas/DateTime"
                          deployment_strategy:
                              type: string
                              description: |
                                  `filter[deployment_strategy]=strategy` deployment strategy filtering by strategy string.  Submit the deployment strategy (example: "function") of the strategy you wish to filter for and the return will be any containers matching that description.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Containers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Container"
                                    includes:
                                        $ref: "#/components/schemas/ContainerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createContainer
            summary: Create Container
            description: Requires the `containers-deploy` capability.
            tags:
                - Containers
            parameters: []
            requestBody:
                description: Parameters for creating a new Container.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - environment_id
                                - image_id
                                - stateful
                                - config
                            properties:
                                name:
                                    type: string
                                    description: A user defined name for the Container.
                                identifier:
                                    anyOf:
                                        - $ref: "#/components/schemas/Identifier"
                                        - type: "null"
                                environment_id:
                                    type: string
                                    description: An identifier for the Environment this Container will be deployed to.
                                image_id:
                                    type: string
                                    description: An identifier for the Image used to create this Container.
                                stateful:
                                    type: boolean
                                    description: A boolean where true represents this Container is stateful.
                                config:
                                    $ref: "#/components/schemas/Config"
                                lock:
                                    type: boolean
                                    description: When set to true, prevents this Container from being deleted.
                                deployment:
                                    anyOf:
                                        - $ref: "#/components/schemas/Deployment"
                                        - type: "null"
                                volumes:
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/ContainerVolume"
                                annotations:
                                    type:
                                        - object
                                        - "null"
                                    description: Custom meta data. Not utilized by Cycle.
                                    additionalProperties: {}
            responses:
                "201":
                    description: Returns a Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}:
        get:
            operationId: getContainer
            summary: Get Container
            description: |
                Gets a Container.

                Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances_count
                              - domains
                              - ips
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
            responses:
                "200":
                    description: Returns a Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                                    includes:
                                        $ref: "#/components/schemas/ContainerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateContainer
            summary: Update Container
            description: |
                Updates the specified Container.

                Requires the `containers-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the Container.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Container.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name for the Container.
                                identifier:
                                    type: string
                                    description: The name for the identifier.
                                deprecate:
                                    type: boolean
                                    description: Sets whether Container should be deprecated.
                                lock:
                                    type: boolean
                                    description: When set to true, prevents this Container from being deleted.
                                annotation:
                                    type: object
                                    description: User meta data for the Container.
                                    additionalProperties:
                                        type: string
            responses:
                "200":
                    description: Returns the updated Container.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Container"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainer
            summary: Delete Container
            description: Requires the `containers-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/summary:
        get:
            operationId: getContainerSummary
            summary: Get Container Summary
            description: Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an Container summary resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls.
                                        required:
                                            - id
                                            - state
                                        properties:
                                            id:
                                                $ref: "#/components/schemas/ID"
                                            state:
                                                $ref: "#/components/schemas/ContainerState"
                                            stats:
                                                anyOf:
                                                    - $ref: "#/components/schemas/StateCountSummary"
                                                    - type: "null"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/tasks:
        post:
            operationId: createContainerJob
            summary: Create Container Job
            description: |
                Used to perform different actions on a given Container. 

                Requires the following capabilities based on the task: 
                `start`: `containers-manage`
                `stop`: `containers-manage`
                `reconfigure`: `containers-manage`
                `volumes.reconfigure`: `containers-volumes-manage`
                `reimage`: `containers-manage`
                `scale`: `containers-manage`
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new container job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    start: "#/components/schemas/ContainerStartAction"
                                    stop: "#/components/schemas/ContainerStopAction"
                                    reconfigure: "#/components/schemas/ReconfigureContainer"
                                    volumes.reconfigure: "#/components/schemas/ReconfigureVolumes"
                                    reimage: "#/components/schemas/Reimage"
                                    scale: "#/components/schemas/Scale"
                            oneOf:
                                - $ref: "#/components/schemas/ContainerStartAction"
                                - $ref: "#/components/schemas/ContainerStopAction"
                                - $ref: "#/components/schemas/ReconfigureContainer"
                                - $ref: "#/components/schemas/ReconfigureVolumes"
                                - $ref: "#/components/schemas/Reimage"
                                - $ref: "#/components/schemas/Scale"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/servers:
        get:
            operationId: getContainerServers
            summary: List Container Servers
            description: |
                Lists all Servers that currently have an Instance of this Container deployed to them.

                Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - primary_ip
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns an array of Server IDs / number of Instances of this Container deployed to them.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ServerInstancesSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/servers/usable:
        get:
            operationId: getCompatibleServers
            tags:
                - Containers
            summary: List Compatible Servers
            description: |
                Gets a list of servers that are compatible with the specified Container and its restrictions (tags, etc).

                Requires the `containers-view` capability.
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - location
                              - models
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Servers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/compatible-images:
        get:
            operationId: getCompatibleImages
            summary: Get Compatible Images
            description: |
                Returns a list of Images that are compatible with the specified Container.
                Used to quickly find Images that can be used for reimaging the Container.

                Requires the `containers-view` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of compatible Images.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances:
        get:
            operationId: getInstances
            summary: List Instances
            description: Requires the `containers-view` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the container this instance is created from.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  explode: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search instances for a value associated with a field on the given instance(s).
                          server:
                              type: string
                              description: |
                                  `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server.
                          range-start:
                              description: The start date from when to pull the instances
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the instances
                              $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Container Instances.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createInstances
            summary: Create Instances
            description: |
                Manually create Instances of a Container.

                Requires the `containers-update` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the Container this Instance is created from.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: object
                                required:
                                    - server_id
                                    - new_instances
                                properties:
                                    server_id:
                                        type: string
                                        description: The ID of the Server the new Instance(s) should be deployed to.
                                    new_instances:
                                        type: integer
                                        description: The number of new Instances to be created on the given Server.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainerInstances
            summary: Delete Container Instance(s)
            description: |
                Manually delete Instances of a Container.

                Requires the `containers-update` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the container the instance(s) were created from.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}:
        get:
            operationId: getInstance
            summary: Get Instance
            description: Requires the `containers-view` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
            responses:
                "200":
                    description: Returns a Container Instance.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteInstance
            summary: Delete Container Instance
            description: Requires the `containers-update` capability.
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/ssh:
        get:
            operationId: generateInstanceSSHCredentials
            summary: Generate Instance SSH Credentials
            description: |
                Generates credentials for connecting to an Instance via SSH. The generated endpoint/secret can be used to log in via SSH
                into the Instance without exposing ports on the container or host.

                Requires the `containers-ssh` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an SSH connection response.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/SSHResponse"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: expireInstanceSSHCredentials
            tags:
                - Containers
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Expire SSH Credentials
            description: |
                Instantly expires any SSH credentials generated for this Instance.

                Requires the `containers-ssh` capability.
            responses:
                "200":
                    description: Returns the number of tokens removed.
                    content:
                        application/json:
                            schema:
                                title: ExpireSSHTokenResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: The number of tokens expired.
                                        required:
                                            - tokens
                                        properties:
                                            tokens:
                                                type: integer
                                                description: The number of tokens expired.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/tasks:
        post:
            operationId: createInstanceJob
            summary: Create Instance Job
            description: |
                Used to perform different actions on a given Container Instance. Can be used to migrate or undo a migration of a Container Instance.

                Requires the `containers-instance-migrate` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new container instance job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    migration.start: "#/components/schemas/Migrate"
                                    migration.revert: "#/components/schemas/RevertMigration"
                                    volume.extend: "#/components/schemas/ExtendVolume"
                            oneOf:
                                - $ref: "#/components/schemas/Migrate"
                                - $ref: "#/components/schemas/RevertMigration"
                                - $ref: "#/components/schemas/ExtendVolume"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/volumes:
        get:
            operationId: getInstanceVolumes
            summary: List Instance Volumes
            description: Requires the `containers-view` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the Container Instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Container Instance Volumes.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/InstanceVolume"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/report:
        get:
            operationId: getInstanceTelemetryReport
            summary: Get Instance Telemetry Report
            description: |
                Retrieves a point-in-time report of an Instance's resource usage (CPU, RAM, Network, Storage, etc).

                Requires the `containers-view` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the container instance.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull instance telemetry data
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns an Instance telemetry report.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/InstanceTelemetryReport"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream:
        get:
            operationId: getInstanceTelemetryStreamAuth
            summary: Instance Telemetry Stream Authorization
            description: |
                Retrieves an access token and URL to open a websocket to for streaming instance telemetry live.
                This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.

                Requires the `containers-view` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: instanceId
                  description: The ID for the Container Instance.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns credentials for connecting to an instance telemetry stream.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: Credentials for connecting to the instance telemetry stream on compute.
                                        required:
                                            - token
                                            - address
                                        properties:
                                            token:
                                                type: string
                                                description: The authentication token passed into the address as a URL parameter (?token).
                                            address:
                                                description: The URL address to open a websocket to for streaming instance telemetry data.
                                                type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/instances/{instanceId}/console:
        get:
            operationId: getInstanceConsoleStreamAuth
            summary: Instance Console Stream Authorization
            description: |
                Returns the authorization information necessary to connect to a Container Instance's console.
                To connect via WebSocket, use the returned address, and append the returned token as a URL parameter: `<address>?token=<token>`.

                Requires the `containers-console` capability.
            tags:
                - Instances
            parameters:
                - name: containerId
                  in: path
                  required: true
                  description: The ID for the Container
                  schema:
                      type: string
                - name: instanceId
                  in: path
                  required: true
                  description: The ID of the Instance.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns authorization information necessary for accessing a Container Instance's console.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        title: InstanceConsoleAuth
                                        type: object
                                        required:
                                            - token
                                            - address
                                        properties:
                                            token:
                                                type: string
                                                description: A token used for connecting to the Instance console.
                                            address:
                                                type: string
                                                description: The protocol and url for connecting to the Instance console.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/functions/tasks:
        post:
            operationId: createFunctionJob
            summary: Create Function Job
            description: |
                Used to perform different actions on a given Function Container.

                Requires the `containers-functions-trigger` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new container function job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    trigger: "#/components/schemas/trigger"
                            oneOf:
                                - $ref: "#/components/schemas/trigger"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups:
        get:
            operationId: getContainerBackups
            summary: List Container Backups
            description: Requires the `containers-backups-view` capability.
            tags:
                - Backups
            parameters:
                - name: containerId
                  description: The ID of the requested Container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of container backup resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ContainerBackup"
                                    includes:
                                        $ref: "#/components/schemas/ContainerBackupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}:
        get:
            operationId: getContainerBackup
            summary: Get a specific Container Backup
            description: |
                Gets the specified Container Backup.

                Requires the `containers-backups-view` capability.
            tags:
                - Backups
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID for the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
            responses:
                "200":
                    description: Returns a Container Backup.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ContainerBackup"
                                    includes:
                                        $ref: "#/components/schemas/ContainerBackupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteContainerBackup
            summary: Delete Container Backup
            description: Requires the `containers-backups-manage` capability.
            tags:
                - Containers
            parameters:
                - name: containerId
                  description: The ID of the container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID of the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}/tasks:
        post:
            tags:
                - Backups
            operationId: createContainerBackupJob
            summary: Create Container Backup Job
            description: |
                Creates a Container Backup Job.
                Can be used to restore a Container Backup for a given Container Instance. 

                Requires the `containers-backups-manage` capability.
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID of the backup.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - restore
                                    description: The action to take.
                                contents:
                                    type: object
                                    description: Additional information the platform needs to create this Job.
                                    required:
                                        - instance_id
                                    properties:
                                        instance_id:
                                            type: string
                                            description: The ID of the instance this Container Backup is being restored to.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/containers/{containerId}/backups/{backupId}/logs:
        get:
            operationId: getContainerBackupLogs
            summary: List Container Backup Logs
            description: Requires the `containers-backups-view` capability.
            tags:
                - Backups
            parameters:
                - name: containerId
                  description: The ID of the requested container.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: backupId
                  description: The ID for the container backup.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a collection of Container Backup Logs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ContainerBackupLogs"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones:
        get:
            operationId: getDNSZones
            summary: List DNS Zones
            description: Requires the `dns-view` capability.
            tags:
                - Zones
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the DNS Zone's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of DNS Zones.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Zone"
                                    includes:
                                        $ref: "#/components/schemas/ZoneIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createDNSZone
            tags:
                - Zones
            parameters: []
            summary: Create DNS Zone
            description: Requires the `dns-manage` capability.
            requestBody:
                description: Parameters for creating a new DNS Zone.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - hosted
                                - origin
                            properties:
                                hosted:
                                    type: boolean
                                    description: A boolean where true represents the desire for the origin to be of the type `hosted`.
                                origin:
                                    type: string
                                    description: The origin that will be created.
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "201":
                    description: Returns the DNS Zone resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}:
        get:
            operationId: getDNSZone
            summary: Get DNS Zone
            description: Requires the `dns-view` capability.
            tags:
                - Zones
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a DNS zone resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateDNSZone
            summary: Update DNS Zone
            description: Requires the `dns-manage` capability.
            tags:
                - Zones
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            requestBody:
                description: Parameters for updating a DNS Zone.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                hosted:
                                    type:
                                        - boolean
                                        - "null"
                                    description: A boolean where true represents the desire for the origin to be of the type `hosted`.
            responses:
                "200":
                    description: Returns a DNS zone resource.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneUpdateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                                    includes:
                                        $ref: "#/components/schemas/ZoneIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteDNSZone
            summary: Delete DNS Zone
            description: Requires the `dns-manage` capability.
            tags:
                - Zones
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/access:
        patch:
            operationId: updateDNSZoneAccess
            summary: Update DNS Zone Access
            description: Requires the `dns-manage` capability, and if an ACL is present, the `manage` privilege.
            tags:
                - Zones
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            requestBody:
                description: Parameters for updating a DNS Zone.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns a DNS zone.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Zone"
                                    includes:
                                        $ref: "#/components/schemas/ZoneIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/tasks:
        post:
            operationId: createDNSZoneJob
            summary: Create DNS Zone Job
            description: |
                Used to perform different actions on a given DNS zone. 

                Requires the `dns-manage` capability.
            tags:
                - Zones
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS zone job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The action that the job will take.
                                    enum:
                                        - verify
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records:
        get:
            operationId: getDNSZoneRecords
            summary: List DNS Zone Records
            description: Requires the `dns-view` capability.
            tags:
                - Records
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - containers
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the DNS record's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of DNS Zone Records.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneRecordListReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Record"
                                    includes:
                                        $ref: "#/components/schemas/RecordIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createDNSZoneRecord
            summary: Create DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - Records
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS Zone Record.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                                - name
                            properties:
                                type:
                                    $ref: "#/components/schemas/RecordTypes"
                                name:
                                    type: string
                                    description: A name for the given record where `@` represents the desire to use the root of the origin.
            responses:
                "201":
                    description: Returns the DNS zone resource.
                    content:
                        application/json:
                            schema:
                                title: DNSZoneCreateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Record"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records/{recordId}:
        patch:
            operationId: updateDNSZoneRecord
            summary: Update DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - Records
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the record.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a DNS Zone Record. The name value cannot be updated and is omitted from the properties.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                            properties:
                                type:
                                    $ref: "#/components/schemas/RecordTypes"
            responses:
                "200":
                    description: Returns a DNS Zone Record.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Record"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteDNSZoneRecord
            summary: Delete DNS Zone Record
            description: Requires the `dns-manage` capability.
            tags:
                - Records
            parameters:
                - name: zoneId
                  description: The ID of the Zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the DNS Zone Record.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/zones/{zoneId}/records/{recordId}/tasks:
        post:
            operationId: createDNSZoneRecordJob
            summary: Create a DNS Zone Record Job
            description: |
                Used to perform different actions on a given DNS Zone record. 

                Requires the `dns-manage` capability.
            tags:
                - Records
            parameters:
                - name: zoneId
                  description: The ID of the zone.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: recordId
                  description: The ID of the record.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new DNS Zone Record Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The action that the job will take.
                                    enum:
                                        - generateCert
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/attempts:
        get:
            operationId: getTLSGenerationAttempts
            summary: List TLS Generation Attempts
            description: Requires the `dns-view` capability.
            tags:
                - TLS
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          domain:
                              type: string
                              description: |
                                  `filter[domain]=value` filter the return for TLS attempts by domain.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of TLS certificate generation attempts.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Attempt"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/certificates/lookup:
        get:
            operationId: lookupTLSCertificate
            summary: Lookup TLS Certificate
            description: |
                Lookup and retrieve a TLS certificate bundle for a specified domain.

                Requires the `dns-view` capability.
            tags:
                - TLS
            parameters:
                - name: domain
                  in: query
                  style: form
                  required: true
                  description: The domain to lookup.
                  schema:
                      type: string
                - name: wildcard
                  in: query
                  style: form
                  required: false
                  description: Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For example, if you are looking for a certificate for x.test.com, setting this to true will identify a *.test.com certificate that would also be applicable.
                  schema:
                      type: boolean
            responses:
                "200":
                    description: Returns a TLS certificate bundle.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: A DNS TLS certificate.
                                        required:
                                            - id
                                            - hub_id
                                            - domains
                                            - events
                                            - bundle
                                            - private_key
                                        properties:
                                            id:
                                                $ref: "#/components/schemas/ID"
                                            hub_id:
                                                $ref: "#/components/schemas/HubID"
                                            domains:
                                                description: A list of domains associated with the certificate.
                                                type: array
                                                items:
                                                    type: string
                                            events:
                                                type: object
                                                description: A collection of timestamps for each event in the certificate's lifetime.
                                                properties:
                                                    created:
                                                        $ref: "#/components/schemas/DateTime"
                                                    updated:
                                                        $ref: "#/components/schemas/DateTime"
                                                    deleted:
                                                        $ref: "#/components/schemas/DateTime"
                                                    generated:
                                                        description: When the certificate was generated.
                                                        $ref: "#/components/schemas/DateTime"
                                            bundle:
                                                description: The certificate bundle
                                                type: string
                                            private_key:
                                                description: The private key for the certificate
                                                type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/certificates/user-supplied:
        get:
            operationId: getUserSuppliedCertificates
            summary: List User Supplied TLS Certificates
            description: |
                Retrieve a list of TLS certificates that were uploaded to Cycle.

                Requires the `dns-certs-view` capability.
            tags:
                - TLS
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          domain:
                              type: string
                              description: |
                                  `filter[domain]=value1` filter user certificates by associated domain.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow filtering by the current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a TLS certificate.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TlsCertificate"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: uploadUserSuppliedCertificate
            tags:
                - TLS
            parameters: []
            summary: Upload User Supplied TLS Certificate
            description: |
                Upload a user-supplied TLS certificate to the hub. This TLS certificate can be utilized by **LINKED** records matching the specified domains.

                Requires the `dns-manage` capability.
            requestBody:
                description: Parameters for creating a new TLS certificate.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - private_key
                                - bundle
                            properties:
                                private_key:
                                    type: string
                                    description: The certificate's private key.
                                bundle:
                                    type: string
                                    description: A PEM encoded certificate bundle.
            responses:
                "201":
                    description: Returns a TLS certificate.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TlsCertificate"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/certificates/user-supplied/{certificateId}:
        get:
            operationId: getUserSuppliedCertificate
            summary: Get User Supplied TLS Certificate
            description: |
                Gets a list of custom TLS certificates uploaded to the hub.

                Requires the `dns-certs-view` capability.
            tags:
                - TLS
            parameters:
                - name: certificateId
                  description: The ID of the TLS certificate.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a TLS certificate.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TlsCertificate"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/dns/tls/certificates/user-supplied/{certificateId}/tasks:
        post:
            operationId: createUserSuppliedCertificateJob
            summary: Create User Supplied TLS Certificate Job
            description: |
                Used to perform different actions on a given user supplied TLS certificate. 

                Requires the `dns-manage` capability.
            tags:
                - TLS
            parameters:
                - name: certificateId
                  description: The ID of the TLS certificate.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new TLS certificate job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: |
                                        The action that the job will take.

                                        **deprecate**: Cycle will deprecate this certificate, and try to find another usable certificate. If none exists, it will generate a new one
                                        for the applicable domains.
                                    enum:
                                        - deprecate
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments:
        get:
            operationId: getEnvironments
            summary: List Environments
            description: Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers
                              - containers_count
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stacks
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` filter for environments matching a particular creator, such as `account-ID`.
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given environment(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the environment's current state.
                          stack_build:
                              type: string
                              description: |
                                  `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish to filter for and the return sill be any environments that have the stack build deployed to them.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Environments.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Environment"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createEnvironment
            summary: Create Environment
            description: Requires the `environments-create` capability.
            tags:
                - Environments
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - cluster
                                - about
                                - features
                                - stack
                            properties:
                                name:
                                    type: string
                                    description: A user defined name for the Environment.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                cluster:
                                    type: string
                                    description: The cluster this Environment is associated with.
                                about:
                                    type: object
                                    description: Contains details regarding the Environment.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type: string
                                            description: A custom description for this Environment.
                                features:
                                    $ref: "#/components/schemas/EnvironmentFeatures"
            responses:
                "201":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/monitoring-tiers:
        get:
            operationId: getEnvironmentMonitoringTiers
            summary: Get Environment Monitoring Tiers
            description: |
                Gets all the available monitoring tiers that can be enabled for an environment.
            tags:
                - Environments
            responses:
                "200":
                    description: A list of monitoring tiers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        additionalProperties:
                                            $ref: "#/components/schemas/MonitoringTierDetails"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}:
        get:
            operationId: getEnvironment
            summary: Get Environment
            description: Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers
                              - containers_count
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stacks
            responses:
                "200":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateEnvironment
            summary: Update Environment
            description: |
                Updates the specificed Environment.

                Requires the `environments-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an Environment.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type:
                                        - string
                                        - "null"
                                identifier:
                                    type:
                                        - string
                                        - "null"
                                version:
                                    type:
                                        - string
                                        - "null"
                                about:
                                    anyOf:
                                        - $ref: "#/components/schemas/EnvironmentAbout"
                                        - type: "null"
                                monitoring:
                                    description: The level of monitoring to enable for this environment. There is a cost associated with higher levels of monitoring.
                                    type:
                                        - object
                                        - "null"
                                    required:
                                        - tier
                                    properties:
                                        tier:
                                            type: string
                                            enum:
                                                - limited
                                                - standard
                                                - premium
                                                - enterprise
            responses:
                "200":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteEnvironment
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Delete Environment
            description: Requires the `environments-manage` capability.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/access:
        patch:
            operationId: updateEnvironmentAccess
            summary: Update Environment Access
            description: |
                Updates the specificed Environment.

                Requires the `environments-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an Environment.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns an Environment.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Environment"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/tasks:
        post:
            operationId: createEnvironmentJob
            summary: Create Environment Job
            description: |
                Create a job for an Environment, such as 'start' or 'stop'. 

                Requires the `environments-manage` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Environment job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    start: "#/components/schemas/EnvironmentStartAction"
                                    stop: "#/components/schemas/EnvironmentStopAction"
                                    initialize: "#/components/schemas/EnvironmentInitializeAction"
                                    deployments.reconfigure: "#/components/schemas/EnvironmentReconfigureDeploymentsAction"
                            oneOf:
                                - $ref: "#/components/schemas/EnvironmentStartAction"
                                - $ref: "#/components/schemas/EnvironmentStopAction"
                                - $ref: "#/components/schemas/EnvironmentInitializeAction"
                                - $ref: "#/components/schemas/EnvironmentReconfigureDeploymentsAction"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/summary:
        get:
            operationId: getEnvironmentSummary
            summary: Get Environment Summary
            description: |
                Gets the summary of an Environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  

                Requires the `environments-view` capability.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the requested environment.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an environment summary object.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/EnvironmentSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/deployments:
        get:
            operationId: getEnvironmentDeployments
            summary: List Environment Deployments
            description: |
                Gets a list of all deployments in the specified Environment.

                Requires the `environments-view` capability.
            tags:
                - Deployments
            parameters:
                - name: environmentId
                  description: The ID of the Environment to get the list of deployments for.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A list of deployments.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - versions
                                        properties:
                                            versions:
                                                type: object
                                                description: A map where the key is the version property of a deployment.
                                                additionalProperties:
                                                    type: object
                                                    required:
                                                        - containers
                                                        - tags
                                                    properties:
                                                        tags:
                                                            type: array
                                                            description: An array of all tags on this environment that point to this version.
                                                            items:
                                                                $ref: "#/components/schemas/Identifier"
                                                        containers:
                                                            type: integer
                                                            description: The number of containers utilizing this version of this deployment.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/export/stack:
        post:
            operationId: exportStack
            summary: Export As Stack
            description: |
                Exports an environment as a stack file for reuse.

                Requires the `environments-manage` capability. You must also have management permissions on the target environment ACL.
            tags:
                - Environments
            parameters:
                - name: environmentId
                  description: The ID of the target environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                deployment_tags:
                                    type: array
                                    description: |
                                        Defines which deployment containers to include in the stack export. By default, no containers tagged in a deployment are exported.
                                        This option includes all containers with the specific, comma separated deployment tags in the final output in addition to the
                                        containers that are not part of any deployment.
                                    items:
                                        type: string
                                resolve_origins:
                                    type: boolean
                                    default: false
                                    description: |
                                        When set to true, Cycle will resolve image origins and inline them into the stack, essentially making this stack portable outside the hub it's currently used in.
                                        By default, this is set to false, and the export will just reference existing image sources used by this stack in your hub by ID.
            responses:
                "200":
                    description: Returns a stack spec file.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackSpec"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/scoped-variables:
        get:
            operationId: getScopedVariables
            summary: List Scoped Variables
            description: Requires the `scoped-variables-view` capability.
            tags:
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those scoped variables matching this identifier. May return multiple results.
                          container:
                              type: string
                              description: |
                                  `filter[container]=value` List only those scoped variables assigned to the specified container ID.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given scoped variable(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the scoped variable's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of scoped variables.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createScopedVariable
            summary: Create Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a Scoped Variable.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - scope
                                - source
                            properties:
                                identifier:
                                    type: string
                                    description: An identifier for this Scoped Variable.
                                scope:
                                    $ref: "#/components/schemas/ScopedVariableScope"
                                access:
                                    $ref: "#/components/schemas/ScopedVariableAccess"
                                source:
                                    type: object
                                    description: The source or value of the Scoped Variable.
                                    discriminator:
                                        propertyName: type
                                        mapping:
                                            raw: "#/components/schemas/RawSource"
                                            url: "#/components/schemas/URLSource"
                                    oneOf:
                                        - $ref: "#/components/schemas/RawSource"
                                        - $ref: "#/components/schemas/URLSource"
            responses:
                "201":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/scoped-variables/{scopedVariableId}:
        get:
            operationId: getScopedVariable
            summary: Get Scoped Variable
            description: Requires the `scoped-variables-view` capability.
            tags:
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateScopedVariable
            summary: Update Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested endpointnvironment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Scoped Variable.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                identifier:
                                    type: string
                                    description: An identifier, similar to a key in an Environment variable.  Its used when envoking the Scoped Variable.
                                scope:
                                    $ref: "#/components/schemas/ScopedVariableScope"
                                access:
                                    $ref: "#/components/schemas/ScopedVariableAccess"
                                source:
                                    type: object
                                    description: The source or value of the Scoped Variable.
                                    discriminator:
                                        propertyName: type
                                        mapping:
                                            raw: "#/components/schemas/RawSource"
                                            url: "#/components/schemas/URLSource"
                                    oneOf:
                                        - $ref: "#/components/schemas/RawSource"
                                        - $ref: "#/components/schemas/URLSource"
            responses:
                "200":
                    description: Returns a Scoped Variable.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ScopedVariable"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteScopedVariable
            summary: Delete Scoped Variable
            description: Requires the `scoped-variables-manage` capability.
            tags:
                - Scoped Variables
            parameters:
                - name: environmentId
                  description: The ID of the requested Environment.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: scopedVariableId
                  description: The ID of the requested Scoped Variable.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/discovery/tasks:
        post:
            operationId: createDiscoveryServiceJob
            summary: Create Discovery Service Job
            description: Creates a task that will update the discovery service's configuration.
            tags:
                - Services/Discovery
            parameters:
                - name: environmentId
                  description: The ID of the environment where this discovery service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a discovery service.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        config:
                                            anyOf:
                                                - $ref: "#/components/schemas/DiscoveryConfig"
                                                - type: "null"
                                        high_availability:
                                            type:
                                                - boolean
                                                - "null"
                                            description: A boolean where `true` represents the desire to run the environment discovery service in high availability mode.
                                        auto_update:
                                            type:
                                                - boolean
                                                - "null"
                                            description: A boolean where `true` represents the desire to automatically update the environment discovery service.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                title: TaskResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb:
        get:
            operationId: getLoadBalancerService
            summary: Get Load Balancer Service
            description: Requires the `environments-view` capability.
            tags:
                - Services/Load Balancer
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a load balancer info resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: Information about an environments load balancer configuration, state, and availability settings.
                                        required:
                                            - default_config
                                            - service
                                            - default_type
                                            - current_type
                                        properties:
                                            default_config:
                                                $ref: "#/components/schemas/LoadBalancerConfig"
                                            default_type:
                                                type: string
                                                enum:
                                                    - haproxy
                                                    - v1
                                            current_type:
                                                type: string
                                                enum:
                                                    - haproxy
                                                    - v1
                                            base_configs:
                                                type: object
                                                required:
                                                    - haproxy
                                                    - v1
                                                properties:
                                                    haproxy:
                                                        $ref: "#/components/schemas/HaProxyConfig"
                                                    v1:
                                                        $ref: "#/components/schemas/V1LbConfig"
                                            service:
                                                anyOf:
                                                    - $ref: "#/components/schemas/LoadBalancerEnvironmentService"
                                                    - type: "null"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/tasks:
        post:
            operationId: createLoadBalancerServiceJob
            summary: Create Load Balancer Service Job
            description: Creates a task that will update the load balancer's configuration.
            tags:
                - Services/Load Balancer
            parameters:
                - name: environmentId
                  description: The ID of the environment where this load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a load balancer.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        high_availability:
                                            type:
                                                - boolean
                                                - "null"
                                            description: A boolean where `true` represents the desire to run the environment load balancer service in high availability mode.
                                        auto_update:
                                            type:
                                                - boolean
                                                - "null"
                                            description: A boolean representing if this service container is set to autoupdate or not
                                        config:
                                            anyOf:
                                                - $ref: "#/components/schemas/LoadBalancerConfig"
                                                - type: "null"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/report:
        get:
            operationId: getLoadBalancerTelemetryReport
            summary: Get Load Balancer Telemetry Report
            description: |
                Fetches a telemetry report for Cycle's native load balancer for the specified range.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Services/Load Balancer
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: true
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      required:
                          - controller
                      properties:
                          range-start:
                              description: The start date from when to pull load balancer telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull load balancer telemetry data
                              $ref: "#/components/schemas/DateTime"
                          controller:
                              description: The specific controller to fetch telemetry for
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns the load balancer telemetry report
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerTelemetryReport"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/latest:
        get:
            operationId: getLoadBalancerLatestTelemetryReport
            summary: Get Latest Load Balancer Telemetry Report.
            description: |
                Fetches the latest telemetry report for Cycle's native load balancer. Provides detailed information on a per-instance basis.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Services/Load Balancer
            parameters:
                - name: environmentId
                  description: The environmentId where the load balancer resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: true
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                      ### Required Filter
                      On this endpoint, you MUST pass filter[controller].
                  schema:
                      type: object
                      properties:
                          controller:
                              type: string
                              description: |
                                  `filter[controller]=port-123` filter for a specific controller to load telemetry for. THIS FILTER IS REQUIRED.
            responses:
                "200":
                    description: Returns the latest load balancer telemetry
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerLatestTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/lb/telemetry/latest-controllers:
        get:
            operationId: getLoadBalancerTelemetryLatestControllers
            summary: Get Latest Load Balancer Controller Telemetry
            description: |
                Gets the controller information for the specified load balancer. Returns a similar struct to the 'latest' load balancer telemetry call, but does NOT return snapshots, just the controller information.

                ## Permissions
                Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
            tags:
                - Services/Load Balancer
            parameters:
                - name: environmentId
                  description: The ID of the environment of the desired load balancer.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - instances
                              - servers
                              - containers
            responses:
                "200":
                    description: Returns information about the latest controllers that produced telemetry.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/LoadBalancerLatestControllers"
                                    includes:
                                        $ref: "#/components/schemas/controllers"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/scheduler/tasks:
        post:
            operationId: createSchedulerServiceJob
            summary: Create Scheduler Service Job
            description: Creates a task that will update the scheduler service's configuration.
            tags:
                - Services/Scheduler
            parameters:
                - name: environmentId
                  description: The ID of the environment where this scheduler service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for reconfiguring a scheduler service.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - reconfigure
                                    description: The name of the action to perform.
                                contents:
                                    type: object
                                    properties:
                                        config:
                                            anyOf:
                                                - $ref: "#/components/schemas/SchedulerConfig"
                                                - type: "null"
                                        auto_update:
                                            type:
                                                - boolean
                                                - "null"
                                            description: A boolean where `true` represents the desire to automatically update the environment scheduler service.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn:
        get:
            operationId: getVPNService
            summary: Get VPN Service
            description: Requires the `environments-vpn` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns the VPN service.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VPNInfoReturn"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/logins:
        get:
            operationId: getVPNLogins
            summary: Get VPN Logins
            description: Requires the `environments-vpn` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a VPNInfo resource.
                    content:
                        application/json:
                            schema:
                                title: VPNInfoEnvironmentService
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VPNLogin"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/users:
        get:
            operationId: getVPNUsers
            summary: List VPN Users
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a list of VPN users for the given VPN.
                    content:
                        application/json:
                            schema:
                                title: getVPNUsersReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VPNUsers"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createVPNUser
            summary: Create VPN User
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service resides.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new VPN user.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - username
                                - password
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string
            responses:
                "201":
                    description: Returns a VPN User.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VPNUsers"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/users/{userId}:
        delete:
            operationId: deleteVPNUser
            summary: Delete VPN User
            description: Requires the `environments-vpn-manage` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The environmentId where the VPN service the given user belongs to resides.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: userId
                  description: The userId of the user to be deleted.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns no data.
                    content:
                        application/json:
                            schema:
                                title: VPNUserDeleteReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/environments/{environmentId}/services/vpn/tasks:
        post:
            operationId: createVPNServiceJob
            summary: Create VPN Service Job
            description: Used to reconfigure or reset the Environment VPN. Requires the `environments-vpn-manage` capability.
            tags:
                - Services/VPN
            parameters:
                - name: environmentId
                  description: The ID of the Environment the VPN service resides in.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: The task contents used to build the Environment VPN Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    reset: "#/components/schemas/VpnResetTask"
                                    reconfigure: "#/components/schemas/VpnReconfigureTask"
                            oneOf:
                                - $ref: "#/components/schemas/VpnResetTask"
                                - $ref: "#/components/schemas/VpnReconfigureTask"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs:
        get:
            operationId: getHubs
            summary: List Hubs
            description: Lists all associated Hubs.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search hubs for a value associated with a field on the given Hub(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Hub's current state.
            responses:
                "200":
                    description: Returns a list of Hubs.
                    content:
                        application/json:
                            schema:
                                title: ListHubsResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createHub
            summary: Create Hub
            description: Create a Hub.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters: []
            requestBody:
                description: Parameters for creating a Hub.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Hub.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                webhooks:
                                    $ref: "#/components/schemas/HubWebhooks"
            responses:
                "200":
                    description: Returns a Hub resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current:
        get:
            operationId: getHub
            summary: Get Hub
            description: Requires the `hubs-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - memberships
            responses:
                "200":
                    description: Returns an hub resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateHub
            summary: Update Hub
            description: Updates the specified hub, setting the values of the parameters passed.
            tags:
                - Hubs
            parameters: []
            requestBody:
                description: Parameters for updating a hub.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the hub.
                                webhooks:
                                    $ref: "#/components/schemas/HubWebhooks"
                                security:
                                    $ref: "#/components/schemas/HubSecurity"
            responses:
                "200":
                    description: Returns the updated Hub resource.
                    content:
                        application/json:
                            schema:
                                title: HubUpdateResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Hub"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteHub
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters: []
            summary: Delete Hub
            description: Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
            responses:
                "202":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/capabilities:
        get:
            operationId: getHubCapabilities
            summary: List Hub Capabilities
            tags:
                - Hubs
            parameters: []
            security: []
            responses:
                "200":
                    description: Returns a list of capabilities.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                    - meta
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Capability"
                                    meta:
                                        type: object
                                        required:
                                            - captions
                                        properties:
                                            captions:
                                                type: object
                                                description: Human-readable captions keyed by the platform level capability it describes.
                                                additionalProperties:
                                                    type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/usage:
        get:
            operationId: getHubUsage
            summary: Get Hub Usage
            description: Requires the `hubs-view` capability.
            tags:
                - Hubs
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/FilterParam"
            responses:
                "200":
                    description: Returns usage detail points of the Hub over a range of time.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubUsageDatum"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/activity:
        get:
            operationId: getHubActivity
            summary: List Hub Activity
            tags:
                - Hubs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - users
                              - components
                              - creators
                              - images
                              - stack_builds
                              - stacks
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search activities for a value associated with a field on the given activity(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the activity's current state.
                          user:
                              type: string
                              description: |
                                  `filter[user]=ID` user filtering by ID. Submit the ID of the user you wish to filter for and the return will be any activity from that user.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` environment filtering by ID. Submit the ID of the environment you wish to filter for and the return will be any activity from that environment.
                          container:
                              type: string
                              description: |
                                  `filter[container]=ID` container filtering by ID. Submit the ID of the container you wish to filter for and the return will be any activity from that container.
                          virtual-machine:
                              type: string
                              description: |
                                  `filter[virtual-machine]=ID` virtual machine filtering by ID. Submit the ID of the virtual machine you wish to filter for and the return will be any activity from that virtual machine.
                          instance:
                              type: string
                              description: |
                                  `filter[instance]=ID` instance filtering by ID. Submit the ID of the instance you wish to filter for and the return will be any activity from that instance.
                          server:
                              type: string
                              description: |
                                  `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any activity from that server.
                          events:
                              type: string
                              description: |
                                  `filter[events]=value` filter by event names.
                              examples:
                                  - filter[events]=environment.services.vpn.login
                          verbosity:
                              type: integer
                              description: |
                                  `filter[verbosity]=integer` filter the activity return by verbosity. The verbosity can be:
                                    `0` - Activity that users would find useful.
                                    `1` - Activity that can be useful when tracking down how something happened. 
                                    `2` - Full activity, can be useful in debugging problems.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Activity entries.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Activity"
                                    includes:
                                        $ref: "#/components/schemas/ActivityIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/api-keys:
        get:
            operationId: getApiKeys
            summary: List API Keys
            description: Requires the `api-keys-manage` capability.
            tags:
                - API Keys
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a collection of API Key resources.
                    content:
                        application/json:
                            schema:
                                title: ListApiKeysResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createApiKey
            summary: Create API Key
            description: Requires the `api-keys-manage` capability.
            tags:
                - API Keys
            parameters: []
            requestBody:
                description: Parameters for creating an API Key.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - role_id
                            properties:
                                name:
                                    type: string
                                    description: A name given to the API Key.
                                role_id:
                                    $ref: "#/components/schemas/ID"
                                    description: The ID of the role this API Key is a member of.
                                ips:
                                    type:
                                        - array
                                        - "null"
                                    description: An array of approved IPs from which this API Key can be used.
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/api-keys/{apikeyId}:
        get:
            operationId: getAPIKey
            summary: Get API Key
            description: Requries the `api-keys-manage` capability.
            tags:
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - roles
            responses:
                "200":
                    description: Returns an API Key resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                                    includes:
                                        $ref: "#/components/schemas/ApiKeyIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAPIKey
            summary: Update API Key
            description: Requires the `api-keys-manage` capability.
            tags:
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an API Key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name given to the API Key.
                                role_id:
                                    $ref: "#/components/schemas/ID"
                                    description: The ID of the role this API Key is a member of.
                                ips:
                                    type:
                                        - array
                                        - "null"
                                    description: An array of approved IPs from which this API Key can be used.
                                    items:
                                        type: string
            responses:
                "200":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAPIKey
            summary: Delete API Key
            description: Requires the 'api-keys-manage' capability.
            tags:
                - API Keys
            parameters:
                - name: apikeyId
                  description: The ID of the API Key.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an API Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ApiKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/{integrationId}:
        get:
            operationId: getIntegration
            summary: Get Integration
            description: |
                Retrieves details of a single integration associated with the current hub.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the integration to retrieve.
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            responses:
                "200":
                    description: Details of the specified integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateIntegration
            tags:
                - Integrations
            security:
                - bearerAuth: []
            summary: Update Integration
            description: Updates the specified integration within the current hub. If the integration definition specifies that it requires verification, then you must submit a verify task to enable it.
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the integration to update.
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type:
                                        - string
                                        - "null"
                                    description: A new name for the integration.
                                    minLength: 5
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                    description: The identifier of the integration. Must be unique for every integration.
                                    minLength: 3
                                auth:
                                    anyOf:
                                        - $ref: "#/components/schemas/IntegrationAuth"
                                        - type: "null"
                                extra:
                                    type:
                                        - object
                                        - "null"
                                    description: Updated key-value pairs associated with the integration.
                                    additionalProperties:
                                        type: string
            responses:
                "200":
                    description: Returns the updated integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteIntegration
            tags:
                - Integrations
            security:
                - bearerAuth: []
            summary: Delete an Integration
            description: Deletes the specified integration from the current hub, marking it as deleted and returning the updated integration.
            parameters:
                - name: integrationId
                  in: path
                  required: true
                  schema:
                      type: string
                      pattern: ^[a-f0-9]{24}$
                  description: The ID of the integration to delete.
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations:
        get:
            operationId: getIntegrations
            summary: List Integrations
            description: |
                Lists all integrations associated with the current Hub, with optional filtering.

                Requires the `hubs-integrations-view` capability.
            tags:
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/SortParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for. Supports filtering by state and a text search.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value` Filters integrations by their current state. For example, `filter[state]=active` would return only integrations in an active state.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` Performs a text search across relevant fields of the integrations. For example, `filter[search]=example` would return integrations that have "example" in any of the searchable fields
                          category:
                              type: string
                              description: |
                                  `filter[category]=value` Filters integrations by their category. For example, `filter[category]=infrastructure-provider` would return only integrations that are capable of provisioning infrastructure.
            responses:
                "200":
                    description: A list of integrations
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createIntegration
            summary: Create Integration
            description: Create an integration resource within a hub. If the integration definition specifies that it requires verification, then you must submit a verify task to enable it.
            tags:
                - Integrations
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - definition
            requestBody:
                description: Parameters for creating an integration.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - vendor
                            properties:
                                name:
                                    type: string
                                    description: A name for the integration.
                                    minLength: 5
                                vendor:
                                    type: string
                                    description: Unique vendor for the integration, subject to validation.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                    description: The identifier of the integration. Must be unique for every integration.
                                    minLength: 3
                                auth:
                                    type: object
                                    properties:
                                        region:
                                            type:
                                                - string
                                                - "null"
                                            description: The region associated with the integration.
                                        namespace:
                                            type:
                                                - string
                                                - "null"
                                            description: The namespace associated with the integration.
                                        api_key:
                                            type:
                                                - string
                                                - "null"
                                            description: API key for accessing the integration.
                                        key_id:
                                            type:
                                                - string
                                                - "null"
                                            description: Key ID for accessing the integration.
                                        secret:
                                            type:
                                                - string
                                                - "null"
                                            description: Secret for accessing the integration.
                                        subscription_id:
                                            type:
                                                - string
                                                - "null"
                                            description: Subscription ID for the integration.
                                        client_id:
                                            type:
                                                - string
                                                - "null"
                                            description: Client ID for the integration.
                                        base64_config:
                                            type:
                                                - string
                                                - "null"
                                            description: Base64 encoded configuration for the integration.
                                    description: Authentication information for the integration.
                                extra:
                                    type: object
                                    additionalProperties:
                                        type: string
                                    description: Additional key-value pairs associated with the integration.
            responses:
                "201":
                    description: Returns the new integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Integration"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/available:
        get:
            operationId: getAvailableIntegrations
            summary: Get Available Integrations
            description: Returns a map of available integrations categorized by their type.
            tags:
                - Integrations
            responses:
                "200":
                    description: A map of categories to lists of integration definitions.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            image-builders:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            object-storage:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            tls-certificate-generation:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            infrastructure-provider:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                                            billing:
                                                type:
                                                    - array
                                                    - "null"
                                                items:
                                                    $ref: "#/components/schemas/IntegrationDefinition"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/integrations/{integrationId}/tasks:
        post:
            operationId: createIntegrationJob
            description: |
                Creates a new Job targeted at the provided Hub Integration. 

                ## Required Permissions
                  - Requires a valid hub membership to the target hub.
                  - Requires the `hubs-integrations-manage` capability.
            tags:
                - Integrations
            parameters:
                - name: integrationId
                  description: The ID of the Hub Integration.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Create a new Hub Integration Job.
            requestBody:
                description: Parameters for creating a new Hub Integration Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The type of Job/selected Job action to create.
                                    enum:
                                        - verify
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members:
        get:
            operationId: getHubMembers
            summary: List Hub Members
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - accounts
                              - roles
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Hub Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes-2"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/membership:
        get:
            operationId: getHubMembership
            summary: Get Hub Membership
            description: Gets the Hub Membership for the requesting Account.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - accounts
                              - roles
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes-2"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members/{memberId}:
        get:
            operationId: getHubMember
            summary: Get Hub Member
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID for the given Hub member.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - accounts
                              - roles
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes-2"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateHubMember
            summary: Update Hub Member
            description: Requires the `hubs-members-manage` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID for the given member.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Hub membership.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                role_id:
                                    description: The account role.
                                    $ref: "#/components/schemas/ID"
                                permissions:
                                    $ref: "#/components/schemas/Permissions"
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteHubMember
            summary: Delete Hub Member
            description: Requires the `hubs-members-manage` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: memberId
                  description: The ID of the given Hub Member.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/members/account/{accountId}:
        get:
            operationId: getHubMemberAccount
            summary: Get Hub Member Account
            description: Requires the `hubs-members-view` capability.
            tags:
                - Hub Members
            parameters:
                - name: accountId
                  description: The ID of the member's Account.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - accounts
                              - roles
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubMembershipIncludes-2"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/invites:
        get:
            operationId: getHubInvites
            summary: List Hub Invites
            description: Requires the `hubs-invites-manage` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - capabilities
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - senders
                              - roles
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Memberships.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/HubMembership"
                                    includes:
                                        $ref: "#/components/schemas/HubInviteIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createHubInvite
            summary: Create Hub Invite
            description: Requires the `hubs-invites-send` capability.
            tags:
                - Hub Members
            parameters: []
            requestBody:
                description: Parameters for creating a Hub invite.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                recipient:
                                    type: string
                                    description: The email address of the invitee.
                                role_id:
                                    description: The account role.
                                    $ref: "#/components/schemas/ID"
                                permissions:
                                    type: object
                                    description: The Environment permissions the invitee will have
                                    required:
                                        - all_environments
                                        - environments
                                    properties:
                                        all_environments:
                                            type: boolean
                                            description: Boolean value that indicates the user has access to all Environments
                                        environments:
                                            type: array
                                            description: A list of objects that describe the specific environments the invitee will have access to
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - manage
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The ID of the Environment
                                                    manage:
                                                        type: boolean
                                                        description: Boolean indicating the invitee has manage rights to Environment
            responses:
                "201":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/invites/{inviteId}:
        delete:
            operationId: deleteHubInvite
            summary: Delete Hub Invite
            description: Requires the `hub-invites-manage` capability.
            tags:
                - Hub Members
            security:
                - bearerAuth: []
            parameters:
                - name: inviteId
                  description: The ID of the Hub Invite.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Hub Membership.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/HubMembership"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/notifications:
        get:
            operationId: getHubNotificationSocketAuth
            summary: Hub Notification Pipeline Auth
            description: |
                Initializes authorization for the Hub notification pipeline. The Hub notification pipeline is a one-way streaming websocket that
                sends real-time 'notifications' as things are happening on the Hub. These notifications tell some basic information about an event,
                and it is up to the user to fetch additional details, if deemed necessary.

                Requesting this endpoint without a `?token=<token>` URL parameter will result in receiving a short lived token in the response body. That 
                token can then be applied to the URL parameter to the same endpoint to upgrade the connection to a WebSocket.

                Requires the `apionly-notifications-listen` capability.
            tags:
                - Hub Notifications
            parameters: []
            responses:
                "101":
                    description: WebSocket protocol upgrade response, connection is upgraded to WebSocket.
                    headers:
                        Connection:
                            description: Should be 'upgrade'.
                            schema:
                                type: string
                        Upgrade:
                            description: Specifies the protocol to which the connection is upgraded.
                            schema:
                                type: string
                                enum:
                                    - websocket
                        Sec-WebSocket-Accept:
                            description: Accept key for the WebSocket protocol handshake.
                            schema:
                                type: string
                    x-websocket:
                        description: Indicates that this operation is expected to initiate a WebSocket connection.
                        url: ws://example.com/ws
                "200":
                    description: Returns the credentials necessary for upgrading this connection into a web socket.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        title: HubNotificationPipelineAuthResponse
                                        type: object
                                        required:
                                            - token
                                        properties:
                                            token:
                                                type: string
                                                description: A token used for connecting to the Hub notification pipeline websocket API.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/roles:
        get:
            operationId: getRoles
            summary: List Hub Roles
            description: |
                Lists the Roles that have been created for this Hub.

                Requires the `hubs-roles-manage` capability.
            tags:
                - Roles
            parameters:
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/FilterParam"
                - $ref: "#/components/parameters/PageParam"
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - counts
            responses:
                "200":
                    description: Returns a list of Hub Roles.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createRole
            tags:
                - Roles
            parameters: []
            summary: Create Hub Role
            description: |
                Creates a custom Role for a Hub.

                Requires the `hubs-roles-manage` capability.
            requestBody:
                description: Parameters for creating a new Hub Role.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - rank
                            properties:
                                name:
                                    type:
                                        - string
                                        - "null"
                                    description: A name given to the Role.
                                identifier:
                                    type: string
                                capabilities:
                                    type:
                                        - object
                                        - "null"
                                    description: The list of platform level capabilities assigned to this Role.
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                        specific:
                                            type: array
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                rank:
                                    type: integer
                                    description: An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10.
                                extra:
                                    type:
                                        - object
                                        - "null"
                                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                                    additionalProperties:
                                        type: string
            responses:
                "201":
                    description: Returns a Hub Role.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/roles/{roleId}:
        get:
            operationId: getRole
            summary: Get Hub Role
            description: |
                Retrieves the specified Role.

                Requries the `hubs-roles-manage` capability.
            tags:
                - Roles
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - counts
            responses:
                "200":
                    description: Returns a Role.
                    content:
                        application/json:
                            schema:
                                title: GetRoleResponse
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateRole
            summary: Update Hub Role
            description: |
                Updates various properties of a specific Role.

                Requires the `hubs-roles-manage` capability.
            tags:
                - Roles
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - rank
                            properties:
                                name:
                                    type:
                                        - string
                                        - "null"
                                    description: A name given to the Role.
                                identifier:
                                    type: string
                                capabilities:
                                    type:
                                        - object
                                        - "null"
                                    description: The list of platform level capabilities assigned to this Role.
                                    required:
                                        - all
                                        - specific
                                    properties:
                                        all:
                                            type: boolean
                                            description: If true, the Role has all capabilities.
                                        specific:
                                            type: array
                                            items:
                                                $ref: "#/components/schemas/Capability"
                                rank:
                                    type: integer
                                extra:
                                    type:
                                        - object
                                        - "null"
                                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                                    additionalProperties:
                                        type: string
            responses:
                "200":
                    description: Returns the updated Hub Role.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Role"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteRole
            summary: Delete Hub Role
            description: |
                Marks a Role as 'deleted'. 

                Requires the 'hubs-roles-manage' capability.
            tags:
                - Roles
            parameters:
                - name: roleId
                  description: The ID of the Role.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/hubs/current/roles/defaults:
        get:
            operationId: getDefaultHubRoles
            summary: List Default Hub Roles
            tags:
                - Hubs
            parameters: []
            security: []
            responses:
                "200":
                    description: Returns a list of the default roles/capabilities for a hub.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                    - meta
                                properties:
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            title: DefaultRole
                                            required:
                                                - name
                                                - identifier
                                                - root
                                                - capabilities
                                            properties:
                                                name:
                                                    type: string
                                                identifier:
                                                    $ref: "#/components/schemas/Identifier"
                                                root:
                                                    description: The role marked as root has full moderation control over all roles.
                                                    type: boolean
                                                capabilities:
                                                    type: object
                                                    required:
                                                        - all
                                                        - specific
                                                    properties:
                                                        all:
                                                            type: boolean
                                                            description: If true, the role has all capabilities.
                                                        specific:
                                                            type: array
                                                            items:
                                                                $ref: "#/components/schemas/Capability"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images:
        get:
            operationId: getImages
            summary: List Images
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stack_builds
                              - stacks
                              - sources
                              - integrations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those images matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Image(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Image's current state.
                          source_type:
                              type: string
                              description: |
                                  `filter[source_type]=value` filter images by the Image source's type.  Can be: `direct`, `stack-build`, or `bucket`
                          source_id:
                              type: string
                              description: |
                                  `filter[source_id]=ID` Image filtering by source ID.  Submit the ID of the Image source you wish to filter for and the return will be any Images created from that source.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Images.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Image"
                                    includes:
                                        $ref: "#/components/schemas/ImageIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createImage
            summary: Create Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters: []
            requestBody:
                description: Parameters for creating a new Image.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - source_id
                            properties:
                                name:
                                    type: string
                                    description: A name for the Image.
                                source_id:
                                    type: string
                                    description: The ID for the Image source to be used.
                                build:
                                    type: object
                                    description: A build object, holding information important to the Image build.
                                    properties:
                                        args:
                                            type: object
                                            description: An object holding key value build time arguments needed for the Image during build time.
                                            additionalProperties:
                                                type: string
                                override:
                                    type: object
                                    description: An override object to be used for a single Image create request.
                                    properties:
                                        target:
                                            type: string
                                            description: For Image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an Image and a tag.
                                        targz_url:
                                            type: string
                                            description: For Image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
            responses:
                "201":
                    description: Returns an Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}:
        get:
            operationId: getImage
            summary: Get Image
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - stack_builds
                              - stacks
                              - sources
                              - integrations
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                                    includes:
                                        $ref: "#/components/schemas/ImageIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateImage
            summary: Update Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new image.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the image.
            responses:
                "200":
                    description: Returns an Image.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Image"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteImage
            summary: Delete Image
            description: Requires the `images-manage` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the image.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}/build-log:
        get:
            operationId: getImageBuildLog
            summary: Get Image Build Log
            description: Requires the `images-view` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  in: path
                  required: true
                  description: The ID of the Image.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns an Image's build log.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/BuildLog"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/tasks:
        post:
            operationId: createImagesJob
            summary: Prune Images
            description: |
                Used to perform different actions on a given image. 

                Requires the `images-manage` capability.
            tags:
                - Images
            parameters: []
            requestBody:
                description: Parameters for creating a new Images Job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    description: The action is the Job type to create.
                                    enum:
                                        - prune
                                contents:
                                    type: object
                                    description: Additional contents needed by the platform to create the Job.
                                    required:
                                        - source_ids
                                    properties:
                                        source_ids:
                                            description: A list of IDs to be pruned.
                                            type: array
                                            items:
                                                type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/{imageId}/tasks:
        post:
            operationId: createImageJob
            summary: Create Image Job
            description: |
                Used to perform different actions on a given Image. 

                Requires the `images-import` capability.
            tags:
                - Images
            parameters:
                - name: imageId
                  description: The ID of the requested Image.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Image job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    enum:
                                        - import
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/sources:
        get:
            operationId: getImageSources
            summary: List Image Sources
            description: Requires the `images-sources-view` capability.
            tags:
                - Image Sources
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - images_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - integrations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those image sources matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Image Source(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Image Source's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Image Sources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ImageSource"
                                    includes:
                                        $ref: "#/components/schemas/SourceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createImageSource
            summary: Create Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters: []
            requestBody:
                description: Parameters for creating an Image Source.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - type
                                - origin
                            properties:
                                name:
                                    type: string
                                    description: A name for the Image Source.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                builder:
                                    type:
                                        - object
                                        - "null"
                                    required:
                                        - integration_id
                                    properties:
                                        integration_id:
                                            $ref: "#/components/schemas/HybridIdentifier"
                                type:
                                    $ref: "#/components/schemas/ImageSourceType"
                                origin:
                                    $ref: "#/components/schemas/ImageOrigin"
                                about:
                                    type: object
                                    description: User defined information about the Image Source.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type:
                                                - string
                                                - "null"
                                            description: A description of the Image Source.
            responses:
                "201":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/sources/{sourceId}:
        get:
            operationId: getImageSource
            summary: Get Image Source
            description: Requires the `images-sources-view` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - images_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - integrations
            responses:
                "200":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                                    includes:
                                        $ref: "#/components/schemas/SourceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateImageSource
            summary: Update Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an image source.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the image source.
                                identifier:
                                    anyOf:
                                        - $ref: "#/components/schemas/Identifier"
                                        - type: "null"
                                origin:
                                    $ref: "#/components/schemas/ImageOrigin"
                                builder:
                                    type:
                                        - object
                                        - "null"
                                    properties:
                                        integration_id:
                                            anyOf:
                                                - $ref: "#/components/schemas/HybridIdentifier"
                                                - type: "null"
                                about:
                                    type: object
                                    description: User defined information about the image source.
                                    required:
                                        - description
                                    properties:
                                        description:
                                            type:
                                                - string
                                                - "null"
                                            description: A description of the image source.
            responses:
                "200":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteImageSource
            summary: Delete Image Source
            description: Requires the `images-sources-manage` capability.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/images/sources/{sourceId}/access:
        patch:
            operationId: updateImageSourceAccess
            summary: Update Image Source Access
            description: Requires the `images-sources-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Image Sources
            parameters:
                - name: sourceId
                  in: path
                  required: true
                  description: The ID of the Image Source.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating an image source.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns an Image Source.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ImageSource"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/summary:
        get:
            operationId: getInfrastructureSummary
            summary: Get Infrastructure Summary
            description: Requires the `infrastructure-servers-view` capability.
            tags:
                - Infrastructure
            parameters:
                - name: filter
                  in: query
                  required: false
                  style: deepObject
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=value` return an infrastructure summary only for the specified cluster.
            responses:
                "200":
                    description: Returns an infrastructure summary.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/InfrastructureSummary"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/deployment-strategies:
        get:
            operationId: getDeploymentStrategies
            summary: Get Deployment Strategies
            description: Gets the available deployment strategies that can be used to orchestrate containers.
            tags:
                - Infrastructure
            parameters: []
            responses:
                "200":
                    description: Returns available deployment strategies.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            resource-density:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            high-availability:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            first-available:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            node:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            edge:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            manual:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                                            function:
                                                $ref: "#/components/schemas/DeploymentStrategy"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/auto-scale/groups:
        get:
            operationId: getAutoScaleGroups
            summary: List Auto-Scale Groups
            description: Requires the `autoscale-groups-manage` capability.
            tags:
                - Auto-Scale Groups
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                              - models
                              - locations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given auto-scale group(s).
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=value` return a list of auto-scale groups that are associated with the specified cluster.
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` list only those auto-scale groups matching this identifier. May return multiple results.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
            responses:
                "200":
                    description: Returns a list of Auto-Scale Groups.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/AutoScaleGroup"
                                    includes:
                                        $ref: "#/components/schemas/AutoScaleGroupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createAutoScaleGroup
            summary: Create Auto-Scale Group
            description: Requires the 'autoscale-groups-manage'
            tags:
                - Auto-Scale Groups
            parameters: []
            requestBody:
                description: Parameters for creating an Auto-Scale Group
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - cluster
                                - scale
                                - infrastructure
                            properties:
                                name:
                                    type: string
                                identifier:
                                    type: string
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                cluster:
                                    type: string
                                scale:
                                    $ref: "#/components/schemas/AutoScaleGroupScale"
                                infrastructure:
                                    $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
            responses:
                "201":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                title: CreateAutoScaleGroupResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/auto-scale/groups/{groupId}:
        get:
            operationId: getAutoScaleGroup
            summary: Get Auto-Scale Group
            description: Requires the `autoscale-groups-view` capability.
            tags:
                - Auto-Scale Groups
            parameters:
                - name: groupId
                  description: The ID for the given Auto-Scale Group.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - integrations
                              - models
                              - locations
            responses:
                "200":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                                    includes:
                                        $ref: "#/components/schemas/AutoScaleGroupIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateAutoScaleGroup
            summary: Update Auto-Scale Group
            description: Requires the `autoscale-groups-manage` capability.
            tags:
                - Auto-Scale Groups
            parameters:
                - name: groupId
                  description: The ID for the given Auto-Scale Group.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating an Auto-Scale Group
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type:
                                        - string
                                        - "null"
                                identifier:
                                    type:
                                        - string
                                        - "null"
                                scale:
                                    anyOf:
                                        - $ref: "#/components/schemas/AutoScaleGroupScale"
                                        - type: "null"
                                infrastructure:
                                    anyOf:
                                        - $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
                                        - type: "null"
            responses:
                "200":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteAutoScaleGroup
            summary: Delete Auto-Scale Group
            description: Requires the `autoscale-group-manage` capability.
            tags:
                - Auto-Scale Groups
            parameters:
                - name: groupId
                  description: The ID for the given autoscale group.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a task descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/auto-scale/groups/{groupId}/access:
        patch:
            operationId: updateAutoScaleGroupAccess
            summary: Update Auto-Scale Group Access
            description: Requires the `autoscale-groups-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Auto-Scale Groups
            parameters:
                - name: groupId
                  description: The ID for the given Auto-Scale Group.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating an Auto-Scale Group
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns an Auto-Scale Group.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/AutoScaleGroup"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/providers/{providerVendor}/servers:
        get:
            operationId: getProviderServers
            summary: List Provider Servers
            tags:
                - Providers
            parameters:
                - name: providerVendor
                  description: The vendor for the given provider. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use a Provider Integration ID.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          location_ids:
                              type: string
                              description: |
                                  `filter[location_ids]=value` List only those provider servers matching this location. May return multiple results.
            responses:
                "200":
                    description: A list of currently provisioned servers associated with a Provider Integration.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ProviderServerModel"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/providers/{providerVendor}/locations:
        get:
            operationId: getProviderLocations
            summary: List Provider Locations
            tags:
                - Providers
            parameters:
                - name: providerVendor
                  description: The vendor for the given Provider Integration. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use the Integration ID.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: A list of locations this Provider Integration supports.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ProviderLocation"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/clusters:
        get:
            operationId: getClusters
            summary: List Clusters
            description: Requires the `clusters-view` capability.
            tags:
                - Clusters
            parameters:
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of clusters.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createCluster
            summary: Create Cluster
            description: Requires the `clusters-manage` capability.
            tags:
                - Clusters
            parameters: []
            requestBody:
                description: Parameters for creating a new cluster.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                            properties:
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "201":
                    description: Returns a cluster.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/clusters/{clusterId}:
        get:
            operationId: getCluster
            summary: Get Cluster
            description: |
                Gets a Cluster.
                Requires the `clusters-view` capability.
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID of the requested cluster.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a cluster.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateCluster
            summary: Update Cluster
            description: Requires the `clusters-manage` capability.
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID of the requested cluster.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a cluster.
                content:
                    application/json:
                        schema:
                            type: object
            responses:
                "200":
                    description: Returns a cluster.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteCluster
            summary: Delete Cluster
            description: Requires the `clusters-manage` capability.
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID of the requested cluster.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/clusters/{clusterId}/access:
        patch:
            operationId: updateClusterAccess
            summary: Update Cluster Access
            description: Requires the `clusters-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Clusters
            parameters:
                - name: clusterId
                  description: The ID of the requested cluster.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a cluster.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns a cluster.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Cluster"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers:
        get:
            operationId: getServers
            summary: List Servers
            description: Requires the `servers-view` capability.
            tags:
                - Servers
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - locations
                              - models
                              - integrations
                              - clusters
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
                          tags:
                              type: string
                              description: |
                                  `filter[tags]=tagone,tagtwo,tagthree` filtering by Server tag.  Enter one or more tags (comma separated) and the return will include servers that match any tags in the list.
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=clusterIdentifier` filtering by cluster.  Enter the cluster identifier and the return will include servers belonging to the specified cluster.
                          providers:
                              type: string
                              description: |
                                  `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers (commas separated) and the return will include servers that match any providers in the list.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Servers.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createServer
            summary: Create Server
            description: Requires the `servers-provision` capability.
            tags:
                - Servers
            parameters: []
            requestBody:
                description: Parameters for creating a Server.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - servers
                                - cluster
                            properties:
                                cluster:
                                    type: string
                                    description: The existing or new cluster this infrastructure should be provisioned in.
                                servers:
                                    description: An array of servers to provision.
                                    type: array
                                    items:
                                        type: object
                                        required:
                                            - integration_id
                                            - model_id
                                            - location_id
                                            - quantity
                                        properties:
                                            integration_id:
                                                $ref: "#/components/schemas/ID"
                                                description: The ID of the provider integration to use for this Server.
                                            model_id:
                                                type: string
                                                description: The model ID of the Server.
                                            location_id:
                                                type: string
                                                description: The location ID of the Server.
                                            quantity:
                                                type: integer
                                                description: The number of this Server at this location to deploy.
                                            hostnames:
                                                description: An array of hostnames for the given servers.
                                                type: array
                                                items:
                                                    type: string
                                            advanced:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        provision_options:
                                                            type:
                                                                - object
                                                                - "null"
                                                            description: Advanced options to apply to the provisioning of a server.
                                                            properties:
                                                                attached_storage_size:
                                                                    type:
                                                                        - integer
                                                                        - "null"
                                                                    description: For providers that support setting this value dynamically; A number representing the GB size of the volume to be attached to the server.
                                                                reservation_id:
                                                                    type:
                                                                        - string
                                                                        - "null"
                                                                    description: A reservation ID to be used to provision a server that has been reserved at the provider.
                                                                encrypt_storage:
                                                                    type:
                                                                        - boolean
                                                                        - "null"
                                                                    description: For providers that support this setting, this option will encrypt storage for server.
                                                        zone:
                                                            type:
                                                                - string
                                                                - "null"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}:
        get:
            operationId: getServer
            summary: Get Server
            description: Requires the `servers-view` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - locations
                              - models
                              - integrations
                              - clusters
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - node
                              - instances_count
                              - allocations
            responses:
                "200":
                    description: Returns a Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                                    includes:
                                        $ref: "#/components/schemas/ServerIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateServer
            summary: Update Server
            description: Requires the `servers-manage` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Server.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - constraints
                            properties:
                                constraints:
                                    type: object
                                    description: Server constriants.
                                    properties:
                                        tags:
                                            description: A list of Server tags.
                                            type: array
                                            items:
                                                type: string
                                        allow:
                                            type: object
                                            description: Server constraints for the given Server.
                                            required:
                                                - pool
                                                - services
                                                - overcommit
                                            properties:
                                                pool:
                                                    type: boolean
                                                    description: A boolean where true represents the Server can accept containers with no tags set.
                                                services:
                                                    type: boolean
                                                    description: A boolean where true represents the Server being a target for service containers.
                                                overcommit:
                                                    type: boolean
                                                    description: A boolean where true represents the desire for the Server to allow the overcommitting of shares.
                                                overcommit_multiple:
                                                    type:
                                                        - integer
                                                        - "null"
                                                    description: An integer that describes the capability of a server to overcommit shares.  This will allow more containers to run on a given server based on the servers available CPU cores. 1 CPU core = 10 shares by default.
            responses:
                "200":
                    description: Returns a Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Server"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteServer
            summary: Delete Server
            description: Requires the `servers-manage` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID of the Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/OptionParam"
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/telemetry:
        get:
            operationId: getServerTelemetry
            summary: Get Server Telemetry
            description: |
                This call requires the filter query parameter to be used.

                Requires the `servers-view` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull Server telemetry data
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull Server telemetry data
                              $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of telemetry points.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ServerStatsTelemetry"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/instances:
        get:
            operationId: getServerInstances
            summary: List Server Instances
            description: Requires the `containers-view` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given server.
                  in: path
                  required: true
                  schema:
                      type: string
                - $ref: "#/components/parameters/PageParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creator
                              - servers
                              - locations
                              - integrations
                              - containers
                              - environments
            responses:
                "200":
                    description: Returns a list of Instances present on this Server.
                    content:
                        application/json:
                            schema:
                                title: GetServerInstancesReturn
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Instance"
                                    includes:
                                        $ref: "#/components/schemas/InstanceIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/tasks:
        post:
            operationId: createServerJob
            summary: Create Server Job
            description: Used to perform different actions on a given Server. Requires the `servers-manage` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given Server.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating the new Server Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    sharedfs.reconfigure: "#/components/schemas/ReconfigureSharedFsTask"
                                    features.reconfigure: "#/components/schemas/ReconfigureServerFeaturesTask"
                                    restart: "#/components/schemas/RestartServerTask"
                                    compute.restart: "#/components/schemas/RestartComputeTask"
                                    compute.spawner.restart: "#/components/schemas/RestartComputeSpawnerTask"
                                    evacuation.start: "#/components/schemas/EvacuateServerTask"
                                    evacuation.reset: "#/components/schemas/EvacuateServerResetTask"
                            oneOf:
                                - $ref: "#/components/schemas/ReconfigureSharedFsTask"
                                - $ref: "#/components/schemas/ReconfigureServerFeaturesTask"
                                - $ref: "#/components/schemas/RestartServerTask"
                                - $ref: "#/components/schemas/RestartComputeTask"
                                - $ref: "#/components/schemas/RestartComputeSpawnerTask"
                                - $ref: "#/components/schemas/EvacuateServerTask"
                                - $ref: "#/components/schemas/EvacuateServerResetTask"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/tags:
        get:
            operationId: getServerTags
            summary: List Server Tags
            description: Requires the `servers-view` capability.
            tags:
                - Servers
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          cluster:
                              type: string
                              description: |
                                  `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include tags from servers that match any cluster(s) in the list.
            responses:
                "200":
                    description: Returns a list of Server Tags.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ServerTags"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/usage:
        get:
            operationId: GetServerUsage
            summary: Get Server Usage
            description: Requires the `servers-view` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID for the given server.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns usage data for the Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/UsageDatum"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/servers/{serverId}/console:
        get:
            operationId: GetServerConsole
            summary: Get Server Console
            description: |
                Gets the authorization information required to connect to a Server console websocket.

                Requires the `servers-console` capability.
            tags:
                - Servers
            parameters:
                - name: serverId
                  description: The ID of the server to connect to.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns console credentials for the Server.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - address
                                            - token
                                        properties:
                                            address:
                                                type: string
                                                description: The websocket target URL.
                                            token:
                                                type: string
                                                description: The authentication token for the console socket. It should be appended as the URL parameter "token" to the address.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools:
        get:
            operationId: getInfrastructureIPPools
            summary: List IP Pools
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - IPs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - servers
                              - integrations
                              - locations
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          available:
                              type: string
                              description: |
                                  `filter[available]=true` filter for IPs that are available for use.
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the IP's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: A list of IP Pools.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Pool"
                                    includes:
                                        $ref: "#/components/schemas/PoolIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools/{poolId}:
        get:
            operationId: getIPPool
            summary: Get IP Pool
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - IPs
            parameters:
                - name: poolId
                  description: The ID for the given pool.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - servers
                              - integrations
                              - locations
            responses:
                "200":
                    description: An IP Pool.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pool"
                                    includes:
                                        $ref: "#/components/schemas/PoolIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteIPPool
            summary: Delete IP Pool
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - IPs
            parameters:
                - name: poolId
                  description: The ID for the given IP Pool.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/infrastructure/ips/pools/{poolId}/ips:
        get:
            operationId: getPoolIPs
            summary: List Pool IPs
            description: Requires the `infrastructure-ips-manage` capability.
            tags:
                - IPs
            parameters:
                - name: poolId
                  description: The ID of the IP Pool to fetch the IPs of.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A list of IPs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Ip"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs:
        get:
            operationId: getJobs
            summary: List Jobs
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to fetch Jobs
                              $ref: "#/components/schemas/DateTime"
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search jobs for a value associated with a field on the given job(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                                    includes:
                                        $ref: "#/components/schemas/JobIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/{jobId}:
        get:
            operationId: getJob
            summary: Get Job
            description: Requires the `apionly-jobs-view` permission.
            tags:
                - Jobs
            parameters:
                - name: jobId
                  description: The ID for the given Job.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: A Job resources.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/jobs/latest:
        get:
            operationId: getLatestJobs
            tags:
                - Jobs
            parameters: []
            summary: List Latest Jobs
            description: Requires the `apionly-jobs-view` permission.
            responses:
                "200":
                    description: Returns a list of Jobs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Job"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/metrics:
        get:
            operationId: getMetrics
            summary: Get Metrics
            description: |
                A basic query for retrieving metrics. For a more complex and granular report, see the `/v1/monitoring/metrics/aggregate` endpoint.

                Requires the `monitor-view` capability.
            tags:
                - Monitoring
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

                      To search via labels, use `label:<label key>` as the filter. For example in URL parameters, `filter[label:test]=abc`.
                  schema:
                      type: object
                      additionalProperties: true
                      properties:
                          environment:
                              description: Specify the environment associated with the metrics.
                              $ref: "#/components/schemas/ID"
                          pipeline:
                              description: Specify the pipeline associated with the metrics.
                              $ref: "#/components/schemas/ID"
                          stack:
                              description: Specify the stack associated with the metrics.
                              $ref: "#/components/schemas/ID"
                          container:
                              description: Specify the container associated with the metrics.
                              type: string
                          cluster:
                              description: Specify the cluster associated with the metrics.
                              type: string
                          metric:
                              description: Specify the metric to filter by.
                              type: string
                          type:
                              description: Filter by the type of metric.
                              type: string
                              enum:
                                  - gauge
                                  - count
                                  - counter
                                  - rate
                                  - histogram
                                  - distribution
                                  - set
                          tags:
                              description: Filter by tags associated with the metrics
                              type: string
                          range-start:
                              description: The start date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns an array of metrics.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Metric"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/metrics/aggregate:
        post:
            operationId: generateAggregatedMetrics
            summary: Generate Aggregated Metrics
            description: |
                Generate a metric report using an aggregated pipeline query with Mongo. This endpoint provides ultimate
                flexibility in generating data for dashboards, charts, graphs, etc. 

                You should always provide a time range filter to this call, either through the filter parameter or in the critera body. The aggregate is limited to 25,000 input documents, so a time frame will give the best results. 

                Requires the `monitor-view` capability.
            tags:
                - Monitoring
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
            requestBody:
                description: The mongo syntax aggregate pipeline for querying metrics and formulating a report.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                criteria:
                                    type: object
                                    description: The criteria to add to the first match. Cycle will automatically provide the hub ID.
                                    additionalProperties: true
                                pipeline:
                                    type: array
                                    description: The aggregation pipeline. Supports Mongo-style syntax and operators.
                                    items:
                                        type: object
                                        additionalProperties: true
            responses:
                "200":
                    description: Returns an object matching the shape of the output of the aggregated pipeline output.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            additionalProperties: true
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/events:
        get:
            operationId: getEvents
            summary: Get Events
            description: |
                A basic query for retrieving events. For a more complex and granular report, see the `/v1/monitoring/events/aggregate` endpoint.

                Requires the `monitor-view` capability.
            tags:
                - Monitoring
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

                      To search via labels, use `label:<label key>` as the filter. For example in URL parameters, `filter[label:test]=abc`.
                  schema:
                      type: object
                      additionalProperties: true
                      properties:
                          environment:
                              description: Specify the environment associated with the events.
                              $ref: "#/components/schemas/ID"
                          pipeline:
                              description: Specify the pipeline associated with the events.
                              $ref: "#/components/schemas/ID"
                          stack:
                              description: Specify the stack associated with the events.
                              $ref: "#/components/schemas/ID"
                          container:
                              description: Specify the container associated with the events.
                              $ref: "#/components/schemas/ID"
                          cluster:
                              description: Specify the cluster associated with the events.
                              type: string
                          event:
                              description: Specify the event to filter by.
                              $ref: "#/components/schemas/EventType"
                          type:
                              description: Filter by the type of event.
                              type: string
                              enum:
                                  - info
                                  - warning
                                  - error
                                  - success
                                  - alert
                                  - notice
                                  - audit
                          tags:
                              description: Filter by tags associated with the events.
                              type: string
                          range-start:
                              description: The start date from when to pull events. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull events. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
            responses:
                "200":
                    description: Returns an array of events.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Event"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/events/aggregate:
        post:
            operationId: generateAggregatedEvents
            summary: Generate Aggregated Events
            description: |
                Generate an events report using an aggregated pipeline query with Mongo. This endpoint provides ultimate
                flexibility in generating data for dashboards, charts, graphs, etc. 

                You should always provide a time range filter to this call, either through the filter parameter or in the critera body. The aggregate is limited to 25,000 input documents, so a time frame will give the best results. 

                Requires the `monitor-view` capability.
            tags:
                - Monitoring
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          range-start:
                              description: The start date from when to pull events. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull events. Providing 'time' in the post-body criteria field will override this filter.
                              $ref: "#/components/schemas/DateTime"
            requestBody:
                description: The mongo syntax aggregate pipeline for querying events and formulating a report.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                criteria:
                                    type: object
                                    description: The criteria to add to the first match. Cycle will automatically provide the hub ID.
                                    additionalProperties: true
                                pipeline:
                                    type: array
                                    description: The aggregation pipeline. Supports Mongo-style syntax and operators.
                                    items:
                                        type: object
                                        additionalProperties: true
            responses:
                "200":
                    description: Returns an object matching the shape of the output of the aggregated pipeline output.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            additionalProperties: true
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/logs/aggregate:
        post:
            operationId: aggregateLogs
            summary: Aggregate Logs
            description: |
                A query for retrieving container instance logs.  
                Allows aggregate narrowing through filtering, searching, and scope parameters.
                If 'local' is set to true, only cached logs will be queried, and logs in object storage will be ignored.  This leads to much faster performance.

                Requires the `monitor-view` capability.
            tags:
                - Monitoring
            parameters: []
            requestBody:
                description: Parameters for aggregating logs.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - scope
                            properties:
                                scope:
                                    type: object
                                    required:
                                        - type
                                    properties:
                                        type:
                                            description: The type of resource used to narrow log aggregation.
                                            type: string
                                            enum:
                                                - container
                                                - instance
                                                - environment
                                        ids:
                                            description: The ID or IDs used to narrow log aggregation.
                                            oneOf:
                                                - type: array
                                                  items:
                                                      $ref: "#/components/schemas/ID"
                                                - type: "null"
                                        date_range:
                                            description: The date range used to narrow log aggregation.
                                            anyOf:
                                                - type: "null"
                                                - type: object
                                                  properties:
                                                      start:
                                                          description: The start date from when to fetch logs.
                                                          $ref: "#/components/schemas/DateTime"
                                                      end:
                                                          description: The end date from when to fetch logs.
                                                          $ref: "#/components/schemas/DateTime"
                                        context_window:
                                            description: |
                                                Context window indicates how many log lines after a match to return in the response. 
                                                This allows greater context around the matched lines.
                                            default: 5
                                            type:
                                                - integer
                                                - "null"
                                search:
                                    type: array
                                    items:
                                        type: object
                                        required:
                                            - type
                                            - match
                                        properties:
                                            type:
                                                description: The input type used to query logs. When set to regexp, a regex expression will be used to find a log line with a message matching the expression.  When set to 'raw', the aggregate will look for an exact string match.
                                                type: string
                                                enum:
                                                    - raw
                                                    - regexp
                                            match:
                                                description: The search input is a string input that is used to in the aggregate to narrow the log line results.
                                                type: string
                                local:
                                    description: Indicates that only locally cached log lines should be queried.  If true, logs in object storage will not be returned.
                                    type:
                                        - boolean
                                        - "null"
                                limit:
                                    description: Describes the maximum number of log lines the query will return.
                                    examples:
                                        - 1000
                                    type:
                                        - integer
                                        - "null"
            responses:
                "200":
                    description: Returns an array of log lines.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/LogLine"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/monitoring/monitors:
        get:
            operationId: getMonitoringMonitors
            summary: Get Monitoring Monitors
            description: |
                Returns location information about the monitors used for Cycle's external monitoring service.
                These monitors are used for determining the latency between the public internet and environment 
                load balancers.
            tags:
                - Monitoring
            responses:
                "200":
                    description: Returns and array of monitor location information.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Monitor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines:
        get:
            operationId: getPipelines
            summary: List Pipelines
            description: Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - name
                              - components
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those pipelines matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given pipelines(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Pipeline's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Pipelines.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Pipeline"
                                    includes:
                                        $ref: "#/components/schemas/PipelineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createPipeline
            summary: Create Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters: []
            requestBody:
                description: Parameters for creating a new Pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                            properties:
                                name:
                                    type: string
                                    description: A name for the Pipeline.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                dynamic:
                                    type: boolean
                                    description: Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                                stages:
                                    description: An array of stages.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/PipelineStage"
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                disable:
                                    type: boolean
                                    description: A boolean where true signifies the Pipeline is disabled.
            responses:
                "201":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}:
        get:
            operationId: getPipeline
            summary: Get Pipeline
            description: Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - name
                              - components
            responses:
                "200":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                                    includes:
                                        $ref: "#/components/schemas/PipelineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updatePipeline
            summary: Update Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a Pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Pipeline.
                                dynamic:
                                    type: boolean
                                    description: Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                                stages:
                                    description: An array of stages.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/PipelineStage"
                                disable:
                                    type: boolean
                                    description: A boolean where true signifies the Pipeline is disabled.
            responses:
                "200":
                    description: Returns a Pipeline resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deletePipeline
            summary: Delete Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/access:
        patch:
            operationId: updatePipelineAccess
            summary: Update Pipeline Access
            description: Requires the `pipelines-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating a pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns a pipeline resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/runs:
        get:
            operationId: getPipelineRuns
            summary: List Pipeline Runs
            description: |
                List information about times this Pipeline has run.

                Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the pipeline.
                  schema:
                      type: string
                - $ref: "#/components/parameters/SortParam"
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            responses:
                "200":
                    description: Returns a list of Pipeline runs.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/PipelineRun"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/runs/{runId}:
        get:
            operationId: getPipelineRun
            summary: Get Pipeline Run
            description: Requires the `pipelines-view` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: runId
                  description: The ID for the pipeline run.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
            responses:
                "200":
                    description: Returns a Pipeline Run.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/PipelineRun"
                                    includes:
                                        type: object
                                        properties:
                                            creators:
                                                $ref: "#/components/schemas/CreatorInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/tasks:
        post:
            operationId: createPipelineJob
            summary: Create Pipeline Job
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Pipeline job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    trigger: "#/components/schemas/TriggerPipelineAction"
                                    rerun: "#/components/schemas/RerunPipelineAction"
                            oneOf:
                                - $ref: "#/components/schemas/TriggerPipelineAction"
                                - $ref: "#/components/schemas/RerunPipelineAction"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/clone:
        post:
            operationId: clonePipeline
            summary: Clone Pipeline
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters: []
            requestBody:
                description: Parameters for creating a new Pipeline job.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - pipeline_id
                            properties:
                                name:
                                    type: string
                                    description: The name of the cloned pipeline.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                pipeline_id:
                                    $ref: "#/components/schemas/ID"
            responses:
                "201":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/trigger:
        post:
            operationId: triggerPipeline
            summary: Trigger Pipeline
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for triggering a pipeline.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - secret
                                - variables
                            properties:
                                secret:
                                    type: string
                                    description: The trigger key secret.
                                variables:
                                    type: object
                                    description: A map of variables to pass into the pipeline when it runs.
                                    additionalProperties:
                                        type: string
                                advanced:
                                    type: object
                                    properties:
                                        sub_queue:
                                            description: Sub queue allows multiple concurrent pipeline runs.
                                            type:
                                                - string
                                                - "null"
                                        skip_locks:
                                            description: |
                                                To enable skip locks, pass the current UNIX timestamp. Must be accurate within 10 minutes of the current UTC time. 
                                                This will skip lock checks when running a pipeline - the user takes all risk of ensuring two pipeline runs won't make conflicting changes.
                                            type:
                                                - integer
                                                - "null"
            responses:
                "201":
                    description: Returns a Pipeline.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Pipeline"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/keys:
        get:
            operationId: getPipelineTriggerKeys
            summary: List Trigger Keys
            description: Requires the `pipelines-manage` capability.
            tags:
                - Trigger Keys
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Trigger Key(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Trigger Key's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Trigger Keys.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createPipelineTriggerKey
            summary: Create Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Trigger Keys
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Pipeline Trigger Key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Trigger Key.
                                ips:
                                    description: An array of ips this Trigger Key is usable from.
                                    type: array
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns a Trigger Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/pipelines/{pipelineId}/keys/{triggerKeyId}:
        get:
            operationId: getPipelineTriggerKey
            summary: Get Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Trigger Keys
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Trigger Key.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        $ref: "#/components/schemas/TriggerKey"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updatePipelineTriggerKey
            summary: Update Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Pipelines
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: Set name of Trigger Key
                                ips:
                                    description: List of IP Restrictions
                                    type: array
                                    items:
                                        type: string
                                        description: Restricted IP String
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deletePipelineTriggerKey
            summary: Delete Trigger Key
            description: Requires the `pipelines-manage` capability.
            tags:
                - Trigger Keys
            parameters:
                - name: pipelineId
                  in: path
                  required: true
                  description: The ID of the Pipeline.
                  schema:
                      type: string
                - name: triggerKeyId
                  in: path
                  required: true
                  description: The ID of the Trigger Key.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks:
        get:
            operationId: getNetworks
            summary: List Networks
            description: Requires the `sdn-networks-view` capability.
            tags:
                - Networks
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Network(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the network's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Networks.
                    content:
                        application/json:
                            schema:
                                title: ListNetworksResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createNetwork
            summary: Create Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - Networks
            parameters:
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for creating a new network.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - identifier
                                - cluster
                                - environments
                            properties:
                                name:
                                    type: string
                                    description: The name of the network.
                                identifier:
                                    type: string
                                    description: A network identifier used to construct http calls that specifically use this network over another.
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                cluster:
                                    type: string
                                    description: The infrastructure cluster the environments belonging to this network belong to.
                                environments:
                                    description: An array of environment Ids
                                    type: array
                                    items:
                                        type: string
            responses:
                "201":
                    description: Returns a network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks/{networkId}:
        get:
            operationId: getNetwork
            summary: Get Network
            description: Requires the `sdn-networks-view` capability.
            tags:
                - Networks
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the network.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            responses:
                "200":
                    description: Returns a Network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateNetwork
            summary: Update Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - Networks
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for updating a network.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name of the network.
            responses:
                "200":
                    description: Returns a network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteNetwork
            summary: Delete Network
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - Networks
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the network.
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks/{networkId}/access:
        patch:
            operationId: updateNetworkAccess
            summary: Update Network Access
            description: Requires the `sdn-networks-manage` capability. If an ACL is present, requires the `manage` privilege.
            tags:
                - Networks
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for updating a Network.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns a Network.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Network"
                                    includes:
                                        $ref: "#/components/schemas/NetworkIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/sdn/networks/{networkId}/tasks:
        post:
            operationId: createNetworkJob
            summary: Create Network Job
            description: Requires the `sdn-networks-manage` capability.
            tags:
                - Networks
            parameters:
                - name: networkId
                  in: path
                  required: true
                  description: The ID of the Network.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Network Job.
                content:
                    application/json:
                        schema:
                            title: ReconfigureSDNNetwork
                            type: object
                            required:
                                - action
                                - contents
                            properties:
                                action:
                                    type: string
                                    description: The Job to do.
                                    enum:
                                        - reconfigure
                                contents:
                                    type: object
                                    description: Additional information needed for the Job.
                                    required:
                                        - environment_ids
                                    properties:
                                        environment_ids:
                                            description: An array of environment identifiers for the Network.
                                            type: array
                                            items:
                                                type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/search/index:
        get:
            operationId: getSearchIndex
            summary: Get Search Index
            description: |
                Gets a pre-built search index, containing IDs and basic information for many commonly used resources on the Hub.
                Can be used to build a 'quick search' functionality for referencing the most frequently used resources.

                Requires the `view` capability for each returned segment, i.e. to retrieve Containers, you must have `containers-view`.
            tags:
                - Search
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Returns an indexed search matrix.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Index"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks:
        get:
            operationId: getStacks
            summary: List Stacks
            description: Requires the `stacks-view` permission.
            tags:
                - Stacks
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                              - builds_count
                - name: include
                  in: query
                  required: false
                  description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those stacks matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Stack(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Stack's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Stacks.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Stack"
                                    includes:
                                        $ref: "#/components/schemas/StackInclude"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createStack
            tags:
                - Stacks
            parameters: []
            summary: Create Stack
            description: Requires the `stacks-manage` capability.
            requestBody:
                description: Parameters for creating a new Stack.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - source
                            properties:
                                name:
                                    type: string
                                    description: A name for the Stack.
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
                                variables:
                                    type: object
                                    description: A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map.
                                    additionalProperties:
                                        type: string
                                source:
                                    $ref: "#/components/schemas/StackSource"
            responses:
                "201":
                    description: Returns a Stack.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}:
        get:
            operationId: getStack
            summary: Get Stack
            description: Requires the `stacks-view` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateStack
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            summary: Update Stack
            description: Requires the `stacks-manage` capability.
            requestBody:
                description: Parameters for updating a Stack.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: A name for the Stack.
                                variables:
                                    type: object
                                    description: A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map.
                                    additionalProperties:
                                        type: string
                                source:
                                    $ref: "#/components/schemas/StackSource"
            responses:
                "200":
                    description: Returns the updated Stack.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteStack
            summary: Delete Stack
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/access:
        patch:
            operationId: updateStackAccess
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            summary: Update Stack Access
            description: Requires the `stacks-manage` capability. If an ACL is present, requires the `manage` privilege.
            requestBody:
                description: Parameters for updating a Stack.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                acl:
                                    anyOf:
                                        - $ref: "#/components/schemas/ACL"
                                        - type: "null"
            responses:
                "200":
                    description: Returns the updated Stack.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/Stack"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/tasks:
        post:
            operationId: createStackJob
            summary: Create Stack Job
            description: Requires the `stacks-manage` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Job.
                content:
                    application/json:
                        schema:
                            title: PruneStackBuilds
                            type: object
                            required:
                                - action
                            properties:
                                action:
                                    type: string
                                    description: The Job to do.
                                    enum:
                                        - prune
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/builds/{buildId}:
        get:
            operationId: lookupStackBuild
            summary: Look Up Stack Build
            description: |
                Look up a Stack Build using only the Build ID, instead of requiring a Stack ID as well.

                Requires the `stacks-view` capability.
            tags:
                - Stack Builds
            parameters:
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds:
        get:
            operationId: getStackBuilds
            summary: List Builds
            description: Requires the `stacks-view` capability.
            tags:
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - containers_count
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field 
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` search for a value associated with a field on the given Stack Build(s).
                          state:
                              type: string
                              description: |
                                  `filter[state]=value1,value2` state filtering will allow you to filter by the Stack Build's current state.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of Stack Builds.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createStackBuild
            summary: Create Build
            description: Requires the `stacks-manage` capability.
            tags:
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Build.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                about:
                                    $ref: "#/components/schemas/StackBuildAbout"
                                instructions:
                                    $ref: "#/components/schemas/StackBuildInstructions"
            responses:
                "201":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds/{buildId}:
        get:
            operationId: getStackBuild
            summary: Get Stack Build
            description: Requires the `stacks-view` capability.
            tags:
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Stack Build.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuild"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteStackBuild
            summary: Delete Stack Build
            description: Requires the `stacks-manage` capability.
            tags:
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds/{buildId}/build-log:
        get:
            operationId: getStackBuildLog
            summary: Get Stack Build Log
            description: |
                Requests the log generated during a stack build. 
                The response log includes log entries for the stack build process, 
                but individual image build logs must be fetched from the 
                generated image. When a stack build fails due to an invalid spec, 
                the incorrect spec, with populated variables, 
                will be included in the log.

                Requires the `stacks-view` capability.
            tags:
                - Stacks
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the stack build.
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns the stack build's log.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/StackBuildLog"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/stacks/{stackId}/builds/{buildId}/tasks:
        post:
            operationId: createStackBuildJob
            summary: Create Stack Build Job
            description: Requires the `stacks-manage` capability.
            tags:
                - Stack Builds
            parameters:
                - name: stackId
                  in: path
                  required: true
                  description: The ID of the Stack.
                  schema:
                      type: string
                - name: buildId
                  in: path
                  required: true
                  description: The ID of the Build.
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new Stack Build Job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    generate: "#/components/schemas/GenerateStackBuildAction"
                                    deploy: "#/components/schemas/DeployStackBuildAction"
                            oneOf:
                                - $ref: "#/components/schemas/GenerateStackBuildAction"
                                - $ref: "#/components/schemas/DeployStackBuildAction"
            responses:
                "202":
                    description: Returns a Job Descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines:
        get:
            operationId: getVirtualMachines
            summary: List Virtual Machines
            description: Requires the `virtual-machines-view` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: |
                      A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                      In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                      In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - domains
                              - ips
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                              - clusters
                              - containers
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those virtual machines matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` Search virtual machines for a value associated with a field.
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` Filter for virtual machines matching a particular creator, such as `account-<ID>` or `environment-<ID>`.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` Filter virtual machines by environment ID. Submit the ID of the environment you wish to filter for.
                          state:
                              type: string
                              enum:
                                  - new
                                  - starting
                                  - running
                                  - stopping
                                  - stopped
                                  - deleting
                                  - deleted
                              description: |
                                  `filter[state]=value` Filter virtual machines by their current state.
                          range-start:
                              description: The start date from when to pull the virtual machines.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the virtual machines.
                              $ref: "#/components/schemas/DateTime"
                          tags:
                              type: string
                              description: |
                                  `filter[tags]=value` Filter virtual machines by their tags.
                          public_network:
                              type: string
                              enum:
                                  - enabled
                                  - disabled
                              description: |
                                  `filter[public_network]=value` Filter virtual machines by their public network status.
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of virtual machines.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VirtualMachine"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createVirtualMachine
            summary: Create Virtual Machine
            description: Requires the `virtual-machines-deploy` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: meta
                  in: query
                  required: false
                  description: |
                      A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                      In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                      In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - domains
                              - ips
                              - server
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                              - clusters
            requestBody:
                description: Parameters for creating a new virtual machine.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - environment_id
                                - image
                                - config
                                - lock
                            properties:
                                identifier:
                                    $ref: "#/components/schemas/Identifier"
                                name:
                                    type: string
                                    description: A user-defined name for the virtual machine.
                                environment_id:
                                    type: string
                                    description: The ID of the environment this virtual machine will be deployed to.
                                image:
                                    $ref: "#/components/schemas/VirtualMachineImage"
                                config:
                                    $ref: "#/components/schemas/VirtualMachineConfig"
                                lock:
                                    type: boolean
                                    description: Prevents this virtual machine from being deleted when true.
                                volumes:
                                    anyOf:
                                        - type: array
                                          items:
                                              $ref: "#/components/schemas/VirtualMachineVolumeConfig"
                                        - type: "null"
                                base_disk_size:
                                    type: string
                                    description: The size of the base disk. Must be between 10G and 100G.
                                    examples:
                                        - 10G
                                annotations:
                                    type:
                                        - object
                                        - "null"
                                    description: Custom meta data. Not utilized by Cycle.
                                    additionalProperties: {}
                                ssh_keys:
                                    description: An array of SSH key IDs that should be applied to this virtual machine.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/ID"
            responses:
                "201":
                    description: Returns the newly created virtual machine.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachine"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/{virtualMachineId}:
        get:
            operationId: getVirtualMachine
            summary: Get Virtual Machine
            description: |
                Retrieves a single virtual machine by ID.

                Requires the `virtual-machines-view` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: meta
                  in: query
                  required: false
                  description: |
                      A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                      In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                      In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - domains
                              - ips
                              - server
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                              - clusters
                              - containers
            responses:
                "200":
                    description: Returns the requested virtual machine.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachine"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateVirtualMachine
            summary: Update Virtual Machine
            description: |
                Updates the specified virtual machine.

                Requires the `virtual-machines-manage` capability.
            tags:
                - Virtual Machine
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for updating the virtual machine.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name of the virtual machine.
                                identifier:
                                    type: string
                                    description: The identifier of the virtual machine.
                                deprecate:
                                    type: boolean
                                    description: A boolean flag indicating if this virtual machine is deprecated.
                                lock:
                                    type: boolean
                                    description: Prevents this virtual machine from being deleted when true.
                                annotations:
                                    type: object
                                    description: Metadata annotations for the virtual machine.
                                    additionalProperties:
                                        type: string
                                ssh_keys:
                                    description: An array of SSH key IDs that should be applied to this virtual machine.
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/ID"
            responses:
                "200":
                    description: Returns the updated virtual machine.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachine"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteVirtualMachine
            summary: Delete Virtual Machine
            description: Requires the `virtual-machines-manage` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine to delete.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/{virtualMachineId}/tasks:
        post:
            operationId: createVirtualMachineJob
            summary: Create Virtual Machine Job
            description: |
                Used to perform different actions on a virtual machine. 

                Requires the following capabilities based on the task: 
                `start`: `virtual-machines-manage`
                `stop`: `virtual-machines-manage`
                `reconfigure`: `virtual-machines-manage`
                `rootpw.change`: `virtual-machines-manage`
                `ip.allocate`: `virtual-machines-manage`
                `ip.unallocate`: `virtual-machines-manage`
            tags:
                - Virtual Machines
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine.
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                description: Parameters for creating a new virtual machine job.
                content:
                    application/json:
                        schema:
                            discriminator:
                                propertyName: action
                                mapping:
                                    start: "#/components/schemas/VirtualMachineStartTask"
                                    stop: "#/components/schemas/VirtualMachineStopTask"
                                    reconfigure: "#/components/schemas/VirtualMachineReconfigureTask"
                                    rootpw.change: "#/components/schemas/VirtualMachineRootPwChangeTask"
                                    ip.allocate: "#/components/schemas/VirtualMachineIpAllocateTask"
                                    ip.unallocate: "#/components/schemas/VirtualMachineIpUnallocateTask"
                            oneOf:
                                - $ref: "#/components/schemas/VirtualMachineStartTask"
                                - $ref: "#/components/schemas/VirtualMachineStopTask"
                                - $ref: "#/components/schemas/VirtualMachineReconfigureTask"
                                - $ref: "#/components/schemas/VirtualMachineRootPwChangeTask"
                                - $ref: "#/components/schemas/VirtualMachineIpAllocateTask"
                                - $ref: "#/components/schemas/VirtualMachineIpUnallocateTask"
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/images/base:
        get:
            operationId: getVirtualMachineBaseImages
            summary: Get Virtual Machine Base Images
            description: |
                Retrieves the list of available base images for virtual machines provided by Cycle.
            tags:
                - Virtual Machines
            responses:
                "200":
                    description: A map of virtual machine base images provided by Cycle keyed by an identifier.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        additionalProperties:
                                            $ref: "#/components/schemas/VirtualMachineBaseImage"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/{virtualMachineId}/sos:
        get:
            operationId: generateVirtualMachineSosCredentials
            summary: Generate Virtual Machine Serial-Over-SSH Credentials
            description: |
                Generates credentials for connecting to the serial console of a virtual machine via SSH.

                Requires the `virtual-machines-console` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Returns a serial-over-sos connection response.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachineSosConnection"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: expireVirtualMachineSosCredentials
            tags:
                - Virtual Machines
            parameters:
                - name: virtualMachineId
                  description: The ID of the virtual machine.
                  in: path
                  required: true
                  schema:
                      type: string
            summary: Expire Serial-Over-SSH Credentials
            description: |
                Instantly expires any serial-over-SSH credentials generated for this virtual machine.

                Requires the `virtual-machines-console` capability.
            responses:
                "200":
                    description: Returns the number of tokens removed.
                    content:
                        application/json:
                            schema:
                                title: ExpireSSHTokenResponse
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        description: The number of tokens expired.
                                        required:
                                            - tokens
                                        properties:
                                            tokens:
                                                type: integer
                                                description: The number of tokens expired.
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/ssh-keys:
        get:
            operationId: getVirtualMachineSshKeys
            summary: List Virtual Machine SSH Keys
            description: Requires the `virtual-machines-ssh-keys-manage` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: filter
                  in: query
                  style: deepObject
                  required: false
                  description: |
                      ## Filter Field
                      The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                  schema:
                      type: object
                      properties:
                          identifier:
                              type: string
                              description: |
                                  `filter[identifier]=value` List only those SSH keys matching this identifier. May return multiple results.
                          search:
                              type: string
                              description: |
                                  `filter[search]=value` Search SSH keys for a value associated with a field.
                          creator:
                              type: string
                              description: |
                                  `filter[creator]=account-ID` Filter for SSH keys matching a particular creator, such as `account-<ID>` or `environment-<ID>`.
                          environment:
                              type: string
                              description: |
                                  `filter[environment]=ID` Filter SSH keys by environment ID. Submit the ID of the environment you wish to filter for.
                          state:
                              type: string
                              enum:
                                  - live
                                  - deleting
                                  - deleted
                              description: |
                                  `filter[state]=value` Filter virtual machines by their current state.
                          range-start:
                              description: The start date from when to pull the virtual machines.
                              $ref: "#/components/schemas/DateTime"
                          range-end:
                              description: The end date from when to pull the virtual machines.
                              $ref: "#/components/schemas/DateTime"
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
                - $ref: "#/components/parameters/SortParam"
                - $ref: "#/components/parameters/PageParam"
            responses:
                "200":
                    description: Returns a list of virtual machine SSH keys.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VirtualMachineSshKey"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineSshIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        post:
            operationId: createVirtualMachineSshKey
            summary: Create Virtual Machine SSH Key
            description: Requires the `virtual-machines-ssh-keys-manage` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for creating a new virtual machine SSH key.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - environment_id
                                - public_key
                            properties:
                                name:
                                    type: string
                                    description: A user-defined name for the SSH key.
                                public_key:
                                    type: string
                                    description: The public key of the SSH key.
                                environment_id:
                                    $ref: "#/components/schemas/ID"
            responses:
                "201":
                    description: Returns the newly created SSH key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachineSshKey"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineSshIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/virtual-machines/ssh-keys/{sshKeyId}:
        get:
            operationId: getVirtualMachineSshKey
            summary: Get Virtual Machine SSH Key
            description: |
                Retrieves a single virtual machine SSH key by ID.

                Requires the `virtual-machines-ssh-keys-manage` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: sshKeyId
                  description: The ID of the virtual machine SSH key.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            responses:
                "200":
                    description: Returns the requested virtual machine SSH key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachineSshKey"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineSshIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        patch:
            operationId: updateVirtualMachineSshKey
            summary: Update Virtual Machine SSH Key
            description: |
                Updates the specified virtual machine SSH key.

                Requires the `virtual-machines-ssh-keys-manage` capability.
            tags:
                - Virtual Machine
            parameters:
                - name: sshKeyId
                  description: The ID of the SSH key.
                  in: path
                  required: true
                  schema:
                      type: string
                - name: include
                  in: query
                  required: false
                  description: |
                      A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                      In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - creators
                              - environments
            requestBody:
                description: Parameters for updating the virtual machine SSH key.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: The name of the virtual machine SSH key.
            responses:
                "200":
                    description: Returns the updated virtual machine SSH key.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/VirtualMachineSshKey"
                                    includes:
                                        $ref: "#/components/schemas/VirtualMachineSshIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
        delete:
            operationId: deleteVirtualMachineSshKey
            summary: Delete Virtual Machine SSH Key
            description: Requires the `virtual-machines-ssh-keys-manage` capability.
            tags:
                - Virtual Machines
            parameters:
                - name: sshKeyId
                  description: The ID of the virtual machine SSH key to delete.
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "202":
                    description: Returns a job descriptor.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/JobDescriptor"
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/utils/resource/lookup:
        get:
            operationId: lookupIdentifier
            summary: Look up a resource identifier.
            description: |
                Given a (base64'd) resource identifier string (i.e. `cluster:production/env:abc`), returns the ID of the matching resource.
                If more than one resource matches the identifier, or no resource matches the identifier, this endpoint will return an error. 
                Given identifiers are NOT unique, you may need to be more specific to target the exact identifier.
            tags:
                - Utility
            parameters:
                - name: identifier
                  in: query
                  required: true
                  example: cltr:production/environment:654d4e848924c1c445c3635a/container:api
                  description: A base64 encoded resource identifier string.
                  schema:
                      type: string
                - name: desired-component
                  in: query
                  required: true
                  description: The type of resource to lookup from the identifier string.
                  schema:
                      type: string
                      enum:
                          - cluster
                          - environment
                          - image-source
                          - stack
                          - server
                          - container
            responses:
                "200":
                    description: Returns the ID of the requested resource from the identifier string.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        type: object
                                        required:
                                            - id
                                        properties:
                                            id:
                                                type: string
                default:
                    $ref: "#/components/responses/DefaultError"
    /v1/utils/components/lookup:
        post:
            operationId: lookupComponents
            summary: Look up a component.
            tags:
                - Utility
            requestBody:
                description: ABC
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - components
                            properties:
                                components:
                                    type: array
                                    items:
                                        type: object
                                        required:
                                            - type
                                            - id
                                        properties:
                                            type:
                                                $ref: "#/components/schemas/ResourceType"
                                            id:
                                                type: string
            responses:
                "200":
                    description: Returns an array of components requested.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                properties:
                                    data:
                                        $ref: "#/components/schemas/ComponentsIncludes"
                default:
                    $ref: "#/components/responses/DefaultError"
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
        hubAuth:
            name: X-Hub-Id
            in: header
            type: apiKey
            description: Defines the scope of the request to a specific Hub.
    schemas:
        Capability:
            type: string
            description: A capability that a user or API key that represents what an API key or a user can do.
            enum:
                - api-keys-manage
                - apionly-jobs-view
                - apionly-notifications-listen
                - autoscale-groups-manage
                - autoscale-groups-view
                - billing-credits-view
                - billing-invoices-pay
                - billing-invoices-view
                - billing-methods-manage
                - billing-services-manage
                - billing-services-view
                - containers-backups-manage
                - containers-backups-view
                - containers-console
                - containers-deploy
                - containers-instances-migrate
                - containers-lock
                - containers-ssh
                - containers-manage
                - containers-view
                - containers-functions-trigger
                - containers-volumes-manage
                - containers-volumes-view
                - dns-certs-view
                - dns-manage
                - dns-view
                - environments-deployments-manage
                - environments-manage
                - environments-scopedvariables-manage
                - environments-scopedvariables-view
                - environments-services-manage
                - environments-view
                - environments-vpn
                - environments-vpn-manage
                - hubs-delete
                - hubs-integrations-manage
                - hubs-integrations-view
                - hubs-invites-manage
                - hubs-invites-send
                - hubs-members-manage
                - hubs-members-view
                - hubs-roles-manage
                - hubs-roles-view
                - hubs-usage-view
                - hubs-update
                - hubs-auditlog-view
                - images-manage
                - images-sources-manage
                - images-sources-view
                - images-view
                - ips-manage
                - servers-console
                - servers-decommission
                - servers-login
                - clusters-manage
                - clusters-view
                - servers-provision
                - servers-manage
                - servers-view
                - monitor-manage
                - monitor-view
                - pipelines-manage
                - pipelines-trigger
                - pipelines-view
                - sdn-networks-manage
                - sdn-networks-view
                - security-manage
                - security-view
                - stacks-builds-deploy
                - stacks-builds-manage
                - stacks-manage
                - stacks-view
                - virtual-machines-view
                - virtual-machines-manage
                - virtual-machines-deploy
                - virtual-machines-console
                - virtual-machines-lock
                - virtual-machines-ssh-keys-manage
        Error:
            title: Error
            description: |-
                The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
                There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
            type: object
            required:
                - status, code, title
            properties:
                status:
                    type: integer
                    description: The HTTP response code.
                    enum:
                        - 400
                        - 401
                        - 403
                        - 404
                        - 409
                        - 415
                        - 422
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                code:
                    type: string
                    description: A Cycle standard error code.
                    enum:
                        - 400.invalid-syntax
                        - 401.auth-invalid
                        - 401.auth-expired
                        - 401.no-cookie
                        - 401.unauthorized-application
                        - 403.mismatch
                        - 403.wrong-hub
                        - 403.not-ready
                        - 403.expired
                        - 403.restricted-portal
                        - 403.permissions
                        - 403.invalid-ip
                        - 403.invalid-state
                        - 403.not-approved
                        - 403.not-allowed
                        - 403.platform-disabled
                        - 403.2fa-required
                        - 403.2fa-failed
                        - 403.new-application-capabilities
                        - 403.tier-restricted
                        - 404.hub
                        - 404.hub.invitation
                        - 404.hub.integration
                        - 404.hub.role
                        - 404.sdn.network
                        - 404.environment
                        - 404.environment.scoped-variable
                        - 404.hub.api-key
                        - 404.uri
                        - 404.provider
                        - 404.stack
                        - 404.community.thread
                        - 404.community.thread.reply
                        - 404.survey
                        - 404.survey-response
                        - 404.notification
                        - 404.stack-build
                        - 404.image
                        - 404.image.source
                        - 404.image.build-log
                        - 404.job
                        - 404.billing.order
                        - 404.billing.service
                        - 404.billing.credit
                        - 404.billing.invoice
                        - 404.billing.tier
                        - 404.billing.support
                        - 404.billing.payment-method
                        - 404.billing.promo-code
                        - 404.node
                        - 404.infrastructure.location
                        - 404.infrastructure.ips.pool
                        - 404.infrastructure.provider
                        - 404.infrastructure.server
                        - 404.infrastructure.cluster
                        - 404.infrastructure.autoscale.group
                        - 404.infrastructure.model
                        - 404.monitoring.logs.analytics.rule
                        - 404.account
                        - 404.container
                        - 404.container.backup
                        - 404.vpn.account
                        - 404.instance
                        - 404.pipeline
                        - 404.pipeline.run
                        - 404.pipeline.key
                        - 404.dns.zone
                        - 404.dns.record
                        - 404.cluster
                        - 404.platform-build
                        - 404.cycleos-build
                        - 404.email-verification
                        - 404.hub.membership
                        - 404.announcement
                        - 404.ha-service.session
                        - 404.virtual-machine
                        - 404.virtual-machine.ssh-key
                        - 404.sales.lead
                        - 404.stack.build-log
                        - 409.duplicate-found
                        - 415.invalid-content-type
                        - 422.missing-argument
                        - 422.invalid-argument
                        - 422.invalid-input
                        - 422.max-exceeded
                        - 422.not-compatible
                        - 422.already-exists
                        - 429.rate-limiting
                        - 500.database
                        - 500.database-insert
                        - 500.database-update
                        - 500.database-remove
                        - 500.jobd
                        - 500.unknown
                        - 500.dev
                        - 500.email
                        - 503.not-ready
                        - 503.not-enabled
                        - 503.dependency-not-enabled
                        - 504.not-available
                title:
                    type: string
                    description: The main text describing the error.
                detail:
                    type: string
                    description: A more detailed description of the error.
                source:
                    type: string
                    description: A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
                extra:
                    type: object
                    description: Additional entries on the error object to provide extra details.
                    properties:
                        capability:
                            description: If the error occured because of a lack of permission (403), this will list the specific capability that the Role/API Key is missing.
                            $ref: "#/components/schemas/Capability"
        ErrorEnvelope:
            title: ErrorEnvelope
            type: object
            description: An error response.
            required:
                - error
                - data
            properties:
                error:
                    $ref: "#/components/schemas/Error"
                data:
                    type: "null"
        ID:
            title: ID
            type: string
            format: objectid
            description: A 24 character hex string used to identify a unique resource.
            examples:
                - 651586fca6078e98982dbd90
        DateTime:
            title: DateTime
            type: string
            format: date-time
            examples:
                - "2021-01-30T08:30:00Z"
        State:
            title: State
            description: Information regarding the current state of the resource.
            type: object
            required:
                - changed
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type: object
                    description: An error, if any, that has occurred for this resource.
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
                        time:
                            description: The timestamp of when the error was encountered.
                            $ref: "#/components/schemas/DateTime"
        AccountState:
            title: AccountState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the account.
                          type: string
                          enum:
                              - new
                              - live
                              - suspending
                              - purging
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Account:
            title: Account
            type: object
            description: An object representing information about the currently logged-in user.
            required:
                - id
                - name
                - email
                - allow_support_logins
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: object
                    description: The first and last name associated with the Account.
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the Account owner.
                        last:
                            type: string
                            description: The last name of the Account owner.
                email:
                    type: object
                    description: Information about the email address associated with the Account.
                    required:
                        - address
                        - verified
                        - added
                    properties:
                        address:
                            type: string
                            description: The email address.
                        verified:
                            type: boolean
                            description: If true, the email has been verified and the Account is active.
                        added:
                            description: The date the email was added to the Account
                            $ref: "#/components/schemas/DateTime"
                two_factor_auth:
                    type:
                        - object
                        - "null"
                    description: Two factor auth verification information.
                    required:
                        - verified
                    properties:
                        verified:
                            type: boolean
                            description: A boolean representing if the Account has verified with two-factor authentication.
                allow_support_login:
                    description: Indicates whether or not Cycle employees have authorization to log in to this Account in a support capacity.
                    type: boolean
                state:
                    $ref: "#/components/schemas/AccountState"
                events:
                    title: AccountEvents
                    type: object
                    description: A collection of timestamps for each event in the Account's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_login
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_login:
                            description: The timestamp of when the Account was last accessed.
                            $ref: "#/components/schemas/DateTime"
        TaskStep:
            title: TaskStep
            type: object
            description: A step for a given job task.
            required:
                - caption
                - description
                - started
                - completed
            properties:
                caption:
                    type: string
                    description: A short description of the step.
                description:
                    type: string
                    description: A more verbose description.
                started:
                    description: A timestamp for when the step started.
                    $ref: "#/components/schemas/DateTime"
                completed:
                    description: A timestamp for when the step completed.
                    $ref: "#/components/schemas/DateTime"
        JobDescriptor:
            title: JobDescriptor
            description: A Job Descriptor is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action that was taken.
                job:
                    type: object
                    description: Contains some basic information about the job associated with this task.
                    required:
                        - id
                        - accepted
                        - queue
                        - schedule
                        - parallel
                        - tasks
                    properties:
                        id:
                            description: The ID of the job
                            type: string
                        accepted:
                            description: Describes if the job has been accepted
                            type: boolean
                        queue:
                            description: Describes the queue this job is a part of.
                            type: string
                        schedule:
                            $ref: "#/components/schemas/DateTime"
                        parallel:
                            type: object
                            required:
                                - tasks
                            properties:
                                sub_queue:
                                    type:
                                        - string
                                        - "null"
                                tasks:
                                    type: boolean
                        tasks:
                            type:
                                - array
                                - "null"
                            items:
                                title: NewTask
                                type: object
                                required:
                                    - caption
                                    - header
                                    - input
                                    - steps
                                properties:
                                    caption:
                                        type: string
                                        description: A short description of the task.
                                    header:
                                        type: string
                                        description: The API function called.
                                    steps:
                                        description: An array of job task steps.
                                        type:
                                            - array
                                            - "null"
                                        items:
                                            $ref: "#/components/schemas/TaskStep"
                                    input:
                                        type: object
                                        description: Input information used for the job tasks.
                                        additionalProperties: {}
        AccountInfo:
            title: AccountLoginInfo
            type: object
            description: Details of an Account login.
            required:
                - id
                - ip
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                ip:
                    type: string
                    description: The IP of the request used during login.
        AccountLogin:
            title: AccountLogin
            type: object
            description: A record of an Account login.
            required:
                - id
                - account
                - time
                - type
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                account:
                    $ref: "#/components/schemas/AccountInfo"
                time:
                    description: A timestamp of the time the login occurred.
                    $ref: "#/components/schemas/DateTime"
                type:
                    type: string
                    description: The type of login mechanism used.
                    enum:
                        - password
                        - employee
                success:
                    type: boolean
                    description: A boolean where true reflects that the login was successful.
        AccountEmployeeLogin:
            title: AccountEmployeeLogin
            type: object
            description: A login event where the authentication mechanism was an employee login.
            allOf:
                - $ref: "#/components/schemas/AccountLogin"
                - type: object
                  properties:
                      type:
                          type: string
                          enum:
                              - employee
                      employee:
                          type: object
                          description: If this was an employee login, contains information about who accessed the Account.
                          required:
                              - id
                              - ip
                          properties:
                              id:
                                  $ref: "#/components/schemas/ID"
                              ip:
                                  type: string
        AccountPasswordLogin:
            title: AccountPasswordLogin
            description: A login event where password was the authentication type.
            allOf:
                - $ref: "#/components/schemas/AccountLogin"
                - type: object
                  properties:
                      type:
                          type: string
                          enum:
                              - password
        HubID:
            title: HubID
            type: string
            description: The unique ID of the Hub this resource was created in.
            examples:
                - 651586fca6078e98982dbd90
        MembershipState:
            title: MembershipState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the membership.
                          type: string
                          enum:
                              - pending
                              - accepted
                              - declined
                              - revoked
                              - deleted
                - $ref: "#/components/schemas/State"
        Invitation:
            title: HubMembershipInvitation
            type: object
            description: Information about a hub membership invitation.
            required:
                - sender
                - recipient
                - events
            properties:
                sender:
                    type: object
                    description: Information about the origin account of the invitation.
                    required:
                        - id
                        - type
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        type:
                            type: string
                            description: The account type.
                recipient:
                    type: string
                    description: The email address for the invitations recipient.
                events:
                    title: InvitationEvents
                    type: object
                    description: A collection of timestamps for each event in the invitation's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - accepted
                        - declined
                        - revoked
                    properties:
                        created:
                            description: The timestamp of when the invitation was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the invitation was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the invitation was deleted.
                            $ref: "#/components/schemas/DateTime"
                        accepted:
                            description: The timestamp of when the invitation was accepted.
                            $ref: "#/components/schemas/DateTime"
                        declined:
                            description: The timestamp of when the invitation was declined.
                            $ref: "#/components/schemas/DateTime"
                        revoked:
                            description: The timestamp of when the invitation was revoked.
                            $ref: "#/components/schemas/DateTime"
        HubMembership:
            title: HubMembership
            type: object
            description: A membership resource that is scoped to an individual hub.
            required:
                - id
                - hub_id
                - role_id
                - events
                - state
                - invitation
                - permissions
                - prefereneces
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                account_id:
                    type: string
                    description: An ID for the account associated with the given membership.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                events:
                    title: MembershipEvents
                    type: object
                    description: A collection of timestamps for each event in the membership's lifetime.
                    required:
                        - joined
                    properties:
                        created:
                            description: The timestamp of when the membership was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the membership was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the membership was deleted.
                            $ref: "#/components/schemas/DateTime"
                        joined:
                            description: The timestamp of when the membership was accepted.
                            $ref: "#/components/schemas/DateTime"
                role_id:
                    definition: The ID of the Role assigned to this Hub Membership.
                    $ref: "#/components/schemas/ID"
                preferences:
                    type: object
                    title: HubMembershipPreferences
                    description: Preference information set by the user for the membership.
                    required:
                        - portal
                        - email
                    properties:
                        portal:
                            type: object
                            required:
                                - notifications
                            properties:
                                notifications:
                                    type: object
                                    required:
                                        - jobs
                                    properties:
                                        jobs:
                                            type: object
                                            required:
                                                - apikey_alerts
                                            properties:
                                                apikey_alerts:
                                                    type: boolean
                        email:
                            type: object
                            required:
                                - notifications
                            properties:
                                notificaitons:
                                    type: object
                                    required:
                                        - server
                                    properties:
                                        server:
                                            type: object
                                            required:
                                                - new
                                                - offline
                                            properties:
                                                new:
                                                    type:
                                                        - boolean
                                                        - "null"
                                                offline:
                                                    type:
                                                        - boolean
                                                        - "null"
                state:
                    $ref: "#/components/schemas/MembershipState"
                invitation:
                    $ref: "#/components/schemas/Invitation"
                cycle:
                    type: object
                    description: If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts do not consume a "membership" for a given hub.
                    required:
                        - employee_id
                    properties:
                        employee_id:
                            type: string
                            description: The ID of the employee this membership is associated with.
        Events:
            title: Events
            description: Describes the date and time at which certain events occurred in the lifetime of this resource.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/DateTime"
        PublicAccount:
            title: PublicAccount
            description: Publicly available information about an account
            type: object
            required:
                - name
                - email
                - id
            properties:
                name:
                    title: AccountName
                    description: The first and last name of an account owner
                    type: object
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            description: The first name of the account owner
                        last:
                            type: string
                            description: The last name of the account owner
                email:
                    title: AccountEmail
                    description: Email information for an account
                    type: object
                    required:
                        - address
                    properties:
                        address:
                            type: string
                            description: The email address associated with the account.
                id:
                    title: AccountId
                    description: Id information for an account
                    type: string
                events:
                    allOf:
                        - $ref: "#/components/schemas/Events"
                        - properties:
                              last_login:
                                  $ref: "#/components/schemas/DateTime"
        Identifier:
            title: Identifier
            type: string
            description: |
                A human-readable identifier used to refer to a resource, where using the official ID may be inconvenient.
                The identifier is automatically tokenized from the name/relevant field of the resource if one is not provided. For example, a container named "My Container" will
                have the identifier of `my-container` and is automatically created by the platform.

                The identifier does not have to be unique.
        CreatorScope:
            title: CreatorScope
            description: The creator scope is embedded in resource objects to describe who created them
            type: object
            required:
                - id
                - type
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                type:
                    type: string
                    enum:
                        - account
                        - environment
                        - platform
                        - platform-pipeline
                        - employee
                        - api-key
                        - visitor
        HubEvents:
            title: HubEvents
            type: object
            description: A collection of timestamps for each event in the hub's lifetime.
            required:
                - created
                - updated
                - deleted
            properties:
                created:
                    description: The timestamp of when the hub was created.
                    $ref: "#/components/schemas/DateTime"
                updated:
                    description: The timestamp of when the hub was updated.
                    $ref: "#/components/schemas/DateTime"
                deleted:
                    description: The timestamp of when the hub was deleted.
                    $ref: "#/components/schemas/DateTime"
                converted:
                    description: The timestamp of when the hub had the first converted.
                    $ref: "#/components/schemas/DateTime"
                first_order:
                    description: The timestamp of when the hub had the first provider added.
                    $ref: "#/components/schemas/DateTime"
                first_provider:
                    description: The timestamp of when the hub had the first provider added.
                    $ref: "#/components/schemas/DateTime"
                first_server:
                    description: The timestamp of when the hub had the first_server deployed.
                    $ref: "#/components/schemas/DateTime"
                first_environment:
                    description: The timestamp of when the hub had the first environment deployed.
                    $ref: "#/components/schemas/DateTime"
                first_image:
                    description: The timestamp of when the hub had the first image deployed.
                    $ref: "#/components/schemas/DateTime"
                first_container:
                    description: The timestamp of when the hub had the first container deployed.
                    $ref: "#/components/schemas/DateTime"
        HubState:
            title: HubState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the hub.
                          type: string
                          enum:
                              - new
                              - configuring
                              - live
                              - inactive
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        HubSecurity:
            title: HubSecurity
            type: object
            description: Security options for a hub.
            properties:
                force_2fa:
                    type: boolean
                    description: When true, any API call for this hub from an account that does not have two-factor auth enabled will fail with a 403 error.
            required:
                - force_2fa
        HubWebhooks:
            title: HubWebhooks
            type: object
            description: Hub related webhooks. When supplied, the given webhook will be called with a payload any time one of these events occurs.
            required:
                - server_deployed
                - server_deleted
            properties:
                server_deployed:
                    type:
                        - string
                        - "null"
                    description: A webhook that is called any time a server is deployed to this hub. The payload will be a `Server` object.
                server_deleted:
                    type:
                        - string
                        - "null"
                    description: A webhook that is called any time a server in this hub is deleted. The payload will be a `Server` object.
        Term:
            title: BillingTerm
            type: object
            description: Information about a billing term.
            required:
                - start
                - end
                - renew
            properties:
                start:
                    description: A timestamp describing the start of a billing term.
                    $ref: "#/components/schemas/DateTime"
                end:
                    description: A timestamp describing the end of a billing term.
                    $ref: "#/components/schemas/DateTime"
                renew:
                    description: The term renewal period.
                    oneOf:
                        - type: string
                          enum:
                              - once
                              - monthly
                              - yearly
                        - type: "null"
        HubBillingProfile:
            title: HubBillingProfile
            type: object
            description: A billing profile for a given hub.
            required:
                - term
                - plans
                - pause_invoices
                - emails
            properties:
                term:
                    $ref: "#/components/schemas/Term"
                allow_prepaid:
                    type: boolean
                    description: A boolean where true represents this account being approved to use a prepaid card for billing transactions.
                pause_invoices:
                    type: boolean
                    description: A boolean where true represents invoices have been paused on this hub for one reason or another.
                disable:
                    type: boolean
                    description: A boolean where true means this billing is disabled on this hub.
                plans:
                    type: object
                    description: Information about the plan associated with this hub.
                    required:
                        - tier_id
                        - support_id
                    properties:
                        tier_id:
                            type:
                                - string
                                - "null"
                            description: An ID referencing the pricing tier applied to this hub.
                        support_id:
                            type:
                                - string
                                - "null"
                            description: An ID referencing the support plan applied to this hub.
                emails:
                    type:
                        - array
                        - "null"
                    items:
                        type: string
                    description: An array of email addresses to whom the billing invoices will be sent to. If left empty, they will be sent to the owner of this hub.
        HubMeta:
            title: HubsMeta
            type: object
            description: A list of meta fields that can be applied to a hub.
            properties:
                membership:
                    $ref: "#/components/schemas/HubMembership"
        Hub:
            title: Hub
            description: A hub resource.
            type: object
            required:
                - id
                - identifier
                - name
                - creator
                - events
                - state
                - security
                - integrations
                - webhooks
                - billing
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this hub.
                name:
                    type: string
                    description: A name for the hub.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    $ref: "#/components/schemas/HubEvents"
                state:
                    $ref: "#/components/schemas/HubState"
                security:
                    $ref: "#/components/schemas/HubSecurity"
                webhooks:
                    $ref: "#/components/schemas/HubWebhooks"
                billing:
                    anyOf:
                        - $ref: "#/components/schemas/HubBillingProfile"
                        - type: "null"
                meta:
                    $ref: "#/components/schemas/HubMeta"
        RoleMeta:
            title: RoleMeta
            type: object
            description: A list of meta fields that can be applied to a role.
            properties:
                counts:
                    type: object
                    required:
                        - members
                        - api_keys
                    properties:
                        members:
                            type: integer
                        api_keys:
                            type: integer
        Role:
            title: Role
            type: object
            description: A Role is a custom combination of platform-level capabilities, allowing for fully customizable role-based access controls across the platform.
            required:
                - id
                - root
                - rank
                - identifier
                - creator
                - capabilities
                - hub_id
                - state
                - events
            properties:
                id:
                    type: string
                name:
                    type:
                        - string
                        - "null"
                root:
                    description: The Role marked as root has full moderation control over all Roles.
                    type: boolean
                default:
                    description: A reference to the original identifier of the default Role this Role was built from.  A value of null means it is a fully custom Role.
                    anyOf:
                        - $ref: "#/components/schemas/Identifier"
                        - type: "null"
                rank:
                    description: An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10.
                    type: integer
                identifier:
                    $ref: "#/components/schemas/Identifier"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                capabilities:
                    type: object
                    description: The list of platform level capabilities assigned to this Role.
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                            description: If true, the Role has all capabilities.
                        specific:
                            type: array
                            items:
                                $ref: "#/components/schemas/Capability"
                extra:
                    type: object
                    description: Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
                    additionalProperties:
                        type: string
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the Role.
                                  type: string
                                  enum:
                                      - live
                        - $ref: "#/components/schemas/State"
                events:
                    title: RoleEvents
                    type: object
                    description: Timestamps for each event in the Role's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the Role source was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the Role source was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the Role source was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/RoleMeta"
        AccountMembershipIncludes:
            title: AccountMembershipsIncludes
            type: object
            description: A resource that is associated with an account's membership.
            properties:
                senders:
                    type: object
                    description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
                    properties:
                        accounts:
                            type: object
                            description: A record with an ID mapped to a public account.
                            additionalProperties:
                                $ref: "#/components/schemas/PublicAccount"
                hubs:
                    type: object
                    description: A record with an ID mapped to a hub resource.
                    additionalProperties:
                        $ref: "#/components/schemas/Hub"
                roles:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        HubMembershipIncludes:
            title: HubMembershipsIncludes
            type: object
            description: A resource that is associated with a hub membership.
            properties:
                senders:
                    type: object
                    description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
                    properties:
                        accounts:
                            type: object
                            description: A record with an ID mapped to a public account.
                            additionalProperties:
                                $ref: "#/components/schemas/PublicAccount"
                accounts:
                    type: object
                    description: A record with an ID mapped to a public account.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                hubs:
                    type: object
                    description: A record with an ID mapped to a hub resource.
                    additionalProperties:
                        $ref: "#/components/schemas/Hub"
                roles:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of Roles relevant to this Hub Membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        TwoFactorAuthSetup:
            title: TwoFactorAuthSetup
            type: object
            required:
                - qr
                - secret
            properties:
                qr:
                    type: string
                secret:
                    type: string
        TwoFactorAuthRecovery:
            title: TwoFactorAuthRecovery
            type: object
            required:
                - recovery_codes
                - totp_passcode
            properties:
                recovery_codes:
                    type: array
                    items:
                        type: string
                totp_passcode:
                    type: string
        AnnouncementUpdate:
            title: AnnoucementUpdate
            type: object
            description: An update to an Announcement.
            required:
                - id
                - message
                - creator
                - time
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                message:
                    type: string
                    description: The text describing the update to the announcement.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                time:
                    $ref: "#/components/schemas/DateTime"
                    description: A timestamp of when the update took place.
        Announcement:
            title: Announcement
            type: object
            description: An announcement from the Cycle team.
            required:
                - id
                - title
                - description
                - updates
                - priority
                - events
                - creator
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                title:
                    type: string
                    description: A description of the event being announced.
                description:
                    type: string
                    description: A description of the announcement
                updates:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnnouncementUpdate"
                affected_integrations:
                    type: array
                    items:
                        type: string
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                priority:
                    type: string
                    description: The priority or severity of the announcement.
                    enum:
                        - notice
                        - low
                        - medium
                        - high
                        - severe
                events:
                    title: AnnouncementEvents
                    type: object
                    description: A collection of timestamps for each event in the announcement's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - resolved
                    properties:
                        created:
                            description: The timestamp of when the announcement was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the announcement was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the announcement was deleted.
                            $ref: "#/components/schemas/DateTime"
                        resolved:
                            description: The timestamp of when the announcement was resolved.
                            $ref: "#/components/schemas/DateTime"
        Credit:
            title: BillingCredit.yml
            type: object
            description: Information about a billing credit.
            required:
                - id
                - hub_id
                - description
                - creator
                - account_id
                - amount
                - amount_remaining
                - expires
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                description:
                    type: string
                    description: Some extra information about the billing credit.
                account_id:
                    type: string
                    description: The account the credit was issued to.
                amount:
                    type: integer
                    description: The amount of credit.
                amount_remaining:
                    type: integer
                    description: The amount of the credit that remains after being applied to invoices.
                expires:
                    type:
                        - object
                        - "null"
                    description: Information on when the billing credit expires.
                    properties:
                        date:
                            description: A timestamp of when the billing credit expires.
                            $ref: "#/components/schemas/DateTime"
                events:
                    title: BillingCreditEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the credit.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - expired
                        - $ref: "#/components/schemas/State"
        BillingSummary:
            title: BillingSummary
            type: object
            description: A billing summary.
            required:
                - service_id
                - title
                - type
                - term
                - price
                - discount
            properties:
                service_id:
                    type: string
                    description: The ID of the billing service, the summary pertains to.
                title:
                    type: string
                    description: The billing summary title.
                type:
                    type: string
                    description: The plan type.
                    enum:
                        - tier
                        - support
                term:
                    $ref: "#/components/schemas/Term"
                price:
                    type: number
                    description: 1/10th of a cent (mills).
                discount:
                    type: number
                    description: 1/10th of a cent (mills).
        PaymentGateway:
            title: PaymentGateway
            type: string
            description: The type of payment gateway used.
            enum:
                - stripe
        Refund:
            title: BillingRefund
            type: object
            description: A billing refund.
            required:
                - id
                - time
                - description
                - amount
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment refund.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        PaymentResult:
            title: PaymentResult
            type: object
            description: A billing payment result.
            required:
                - status
                - error
            properties:
                status:
                    type: string
                    description: The status of a payment.
                    enum:
                        - success
                        - processing
                        - cancelled
                        - error
                error:
                    type: string
                    description: A description of the error that took place when processing the payment.
        Payment:
            title: BillingPayment
            type: object
            description: A billing payment.
            required:
                - id
                - time
                - description
                - amount
                - amount_refunded
                - refunds
                - result
                - gateway
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp for the payment.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: Some information about the payment.
                amount:
                    type: integer
                    description: 1/10th of a cent.
                amount_refunded:
                    type: integer
                    description: 1/10th of a cent.
                refunds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Refund"
                method_id:
                    type: string
                    description: The ID associated with the billing method used.
                result:
                    $ref: "#/components/schemas/PaymentResult"
                gateway:
                    $ref: "#/components/schemas/PaymentGateway"
        InvoiceCredit:
            title: BillingInvoiceCredit
            type: object
            description: A billing credit for a specific invoice.
            required:
                - id
                - associated_credit
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                associated_credit:
                    type: object
                    description: Credit associated with an invoice.
                    required:
                        - id
                        - amount
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        amount:
                            type: integer
                            description: The amount of the credit.
                time:
                    description: A timestamp for when the invoice credit was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the invoice credit.
                amount:
                    type: integer
                    description: The amount of credit for the invoice.
        LateFee:
            title: LateFee
            type: object
            description: A late fee, applied to an invoice.
            required:
                - id
                - time
                - description
                - amount
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                time:
                    description: A timestamp of when the late fee was created.
                    $ref: "#/components/schemas/DateTime"
                description:
                    type: string
                    description: A description of the late fee.
                amount:
                    type: integer
                    description: 1/10th of a cent.
        InvoiceState:
            title: InvoiceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the invoice.
                          type: string
                          enum:
                              - new
                              - billing
                              - billed
                              - processing
                              - partially-paid
                              - awaiting-funds
                              - paid
                              - refunding
                              - refunded
                              - crediting
                              - credited
                              - voiding
                              - voided
                              - uncollectible
                - $ref: "#/components/schemas/State"
        InvoiceMeta:
            title: InvoiceMeta
            type: object
            description: A list of meta fields that can be applied to a invoice.
            properties:
                due:
                    type: integer
                    description: The amount due for a given invoice.
        Invoice:
            title: BillingInvoice
            type: object
            description: Information about a billing invoice.
            required:
                - id
                - hub_id
                - approved
                - charges
                - events
                - failed_payment_attempts
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                approved:
                    type: boolean
                    description: A boolean where true represents the invoice is approved for collection.
                services:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/BillingSummary"
                payments:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/Payment"
                credits:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/InvoiceCredit"
                late_fees:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LateFee"
                charges:
                    type: integer
                    description: The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice.
                due:
                    description: A timestamp of when the invoice is due to be paid.
                    $ref: "#/components/schemas/DateTime"
                overdue:
                    description: A timestamp of when the invoice is overdue.
                    $ref: "#/components/schemas/DateTime"
                failed_payment_attempts:
                    type: integer
                    description: The number of failed payment attempts for the invoice.
                events:
                    title: BillingOrderEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - billed
                        - paid
                        - credited
                        - voided
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                        billed:
                            description: The timestamp of when the billing order billed.
                            $ref: "#/components/schemas/DateTime"
                        paid:
                            description: The timestamp of when the billing order paid.
                            $ref: "#/components/schemas/DateTime"
                        payment_attempt:
                            description: The timestamp of when the billing order payment was attempted.
                            $ref: "#/components/schemas/DateTime"
                        credited:
                            description: The timestamp of when the billing order credited.
                            $ref: "#/components/schemas/DateTime"
                        voided:
                            description: The timestamp of when the billing order voided.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/InvoiceState"
                meta:
                    $ref: "#/components/schemas/InvoiceMeta"
        Address:
            title: BillingMethodAddress
            description: Address information for a given billing method.
            type: object
            required:
                - country
                - zip
            properties:
                country:
                    type: string
                    description: The country this billing method is associated with.
                zip:
                    type: string
                    description: The zip code this billing method is associated with.
        StripeCreditCard:
            title: StripeCreditCard
            type: object
            description: A payment method that utilizes a credit card via Stripe.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - stripe-credit-card
                details:
                    type: object
                    required:
                        - name
                        - brand
                        - expiration
                        - last_4
                    properties:
                        name:
                            type: string
                            description: The name on the credit card.
                        brand:
                            type: string
                            description: The brand of card.
                        expiration:
                            type: object
                            required:
                                - month
                                - year
                            properties:
                                month:
                                    type: integer
                                    description: The month the billing method expires.
                                year:
                                    type: integer
                                    description: The year the billing method expires.
                        last_4:
                            type: string
                            description: The last 4 digits of the card.
        StripeUsBankAcct:
            title: StripeUsBankAcct
            description: A payment method that utilizes a US bank account via Stripe.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - stripe-us-bank-acct
                details:
                    type: object
                    required:
                        - name
                        - last_4
                    properties:
                        name:
                            type: string
                            description: The name of the owner of the bank account.
                        last_4:
                            type: string
                            description: The last 4 numbers of the bank account number.
        MethodSource:
            title: MethodSource
            description: The underlying source (credit card, bank account, etc) used by a payment method.
            discriminator:
                propertyName: type
                mapping:
                    stripe-credit-card: "#/components/schemas/StripeCreditCard"
                    stripe-us-bank-acct: "#/components/schemas/StripeUsBankAcct"
            oneOf:
                - $ref: "#/components/schemas/StripeCreditCard"
                - $ref: "#/components/schemas/StripeUsBankAcct"
        Mandate:
            title: Mandate
            description: Information about the creator of a payment method for compliance purposes.
            type: object
            required:
                - accepted
                - ip
                - user_agent
                - email
            properties:
                accepted:
                    description: The date when the mandate was accepted
                    $ref: "#/components/schemas/DateTime"
                ip:
                    type: string
                    description: The IP address at the time the mandate was accepted.
                user_agent:
                    type: string
                    description: The user agent of the browser when the mandate was accepted.
                email:
                    type: string
                    description: The email associated with the account that accepted the mandate
        Method:
            title: BillingMethod
            type: object
            description: Information about a billing method, usable to pay invoices.
            required:
                - id
                - name
                - primary
                - address
                - creator
                - source
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the billing method.
                primary:
                    type: boolean
                    description: A boolean where true represents this billing method is set to primary for a given hub.
                address:
                    $ref: "#/components/schemas/Address"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                source:
                    $ref: "#/components/schemas/MethodSource"
                mandate:
                    $ref: "#/components/schemas/Mandate"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the method.
                                  type: string
                                  enum:
                                      - live
                                      - pending-verification
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    title: CreditCardEvents
                    type: object
                    description: A collection of timestamps for each event in the credit card's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the credit card was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the credit card was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the credit card was deleted.
                            $ref: "#/components/schemas/DateTime"
        UserScope:
            title: UserScope
            description: A type of creator and a matching identifier.
            type: object
            required:
                - type
                - id
            properties:
                type:
                    type: string
                    description: The type of user that created the resource.
                    enum:
                        - account
                        - environment
                        - platform
                        - platform-pipeline
                        - employee
                        - api-key
                        - visitor
                id:
                    $ref: "#/components/schemas/ID"
        BillingAmount:
            title: BillingAmount
            type: object
            description: An object holding information about term and amount that relates to a specific billing component.
            required:
                - mills
                - term
            properties:
                mills:
                    type: integer
                    description: 1/10th of a cent.
                term:
                    type: string
                    description: The length of the term.
                    enum:
                        - once
                        - monthly
                        - yearly
        ServiceItem:
            title: ItemPlan
            type: object
            description: Information for an item's plan.
            properties:
                support:
                    type: object
                    description: Information about the support component of the billing item.
                    required:
                        - id
                        - name
                        - price
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        name:
                            type: string
                            description: The support contract name.
                        price:
                            type: integer
                            description: The price of the support contract (monthly).
                tier:
                    type: object
                    description: Information about the tier component of the billing item.
                    required:
                        - id
                        - name
                        - price
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        name:
                            type: string
                            description: The support contract name.
                        price:
                            $ref: "#/components/schemas/BillingAmount"
        OrderItem:
            title: OrderItem
            type: object
            description: Describes a billing item
            required:
                - id
                - service
                - description
                - price
                - net_price
            properties:
                id:
                    type: string
                service:
                    $ref: "#/components/schemas/ServiceItem"
                description:
                    type: string
                price:
                    $ref: "#/components/schemas/BillingAmount"
                discount:
                    type: object
                    required:
                        - id
                        - amount
                        - expires
                    properties:
                        id:
                            type: string
                        amount:
                            $ref: "#/components/schemas/BillingAmount"
                        expires:
                            $ref: "#/components/schemas/DateTime"
                net_price:
                    type: number
        OrderState:
            title: OrderState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the zone.
                          type: string
                          enum:
                              - new
                              - processed
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Order:
            title: Order
            type: object
            description: An order is a resource that describes a billing order
            required:
                - hub_id
                - creator
                - promo_code_id
                - term
                - approved
                - items
                - total_price
                - events
                - state
            properties:
                hub_id:
                    type: string
                creator:
                    $ref: "#/components/schemas/UserScope"
                promo_code_id:
                    type:
                        - string
                        - "null"
                term:
                    $ref: "#/components/schemas/Term"
                approved:
                    type: boolean
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/OrderItem"
                total_price:
                    type: number
                events:
                    title: OrderEvents
                    type: object
                    description: A collection of timestamps for each event in the orders lifetime.
                    required:
                        - expires
                    properties:
                        expires:
                            description: The timestamp of when the order expires.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/OrderState"
        PromoCode:
            title: PromoCode
            type: object
            description: A billing promo code.
            required:
                - code
                - credit
                - expires
                - state
            properties:
                code:
                    type: string
                    description: The promo "code".
                expires:
                    $ref: "#/components/schemas/DateTime"
                credit:
                    type:
                        - object
                        - "null"
                    description: The amount of credit the promo code offers.
                    properties:
                        amount:
                            $ref: "#/components/schemas/BillingAmount"
                        expires:
                            type: object
                            required:
                                - interval
                                - number
                            properties:
                                interval:
                                    type: string
                                    examples:
                                        - months
                                number:
                                    type: integer
                                    examples:
                                        - 2
                state:
                    title: PromoCodeState
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the promo code.
                                  type: string
                                  enum:
                                      - live
                                      - deleted
                        - $ref: "#/components/schemas/State"
        PromoCodeInclude:
            title: PromoCodeIncludes
            type: object
            description: A resource that is associated with a promo code.
            additionalProperties:
                $ref: "#/components/schemas/PromoCode"
        BillingOrderIncludes:
            title: BillingOrderIncludes
            type: object
            properties:
                promo_codes:
                    $ref: "#/components/schemas/PromoCodeInclude"
        BillingOrder:
            title: BillingOrder
            type: object
            description: Information about an order.
            required:
                - id
                - hub_id
                - creator
                - promo_code_id
                - term
                - approved
                - items
                - total_price
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                promo_code_id:
                    type:
                        - string
                        - "null"
                    description: An ID associated with a promo code used with the order.
                term:
                    $ref: "#/components/schemas/Term"
                approved:
                    type: boolean
                    description: A boolean where true represents the order is approved to be paid by the user.
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/ServiceItem"
                total_price:
                    type: integer
                    description: 1/10th of a cent.
                events:
                    title: BillingOrderEvents
                    type: object
                    description: A collection of timestamps for each event in the billing order's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - expires
                    properties:
                        created:
                            description: The timestamp of when the billing order was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing order was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing order was deleted.
                            $ref: "#/components/schemas/DateTime"
                        expires:
                            description: The timestamp of when the billing order expires.
                            $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the order.
                                  type: string
                                  enum:
                                      - new
                                      - processed
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
        SupportPlanFeatures:
            title: SupportPlanFeatures
            type: object
            description: Information about billing support plan features.
            required:
                - engineering_support
                - uptime_sla
                - guaranteed_response_time
            properties:
                engineering_support:
                    type: boolean
                    description: A boolean where true indicates the contract includes support for engineering.
                uptime_sla:
                    type: boolean
                    description: A boolean where true represents the contract has an uptime SLA agreement.
                guaranteed_response_time:
                    type:
                        - string
                        - "null"
                    description: The time in which this support contract guarantees response time.
        SupportPlan:
            title: SupportPlan
            type: object
            description: Information about a billing support plan.
            required:
                - name
                - price
                - description
                - features
                - contract
                - default
            properties:
                name:
                    type: string
                    description: The name of the support plan.
                price:
                    $ref: "#/components/schemas/BillingAmount"
                description:
                    type: string
                    description: Information about the billing support plan that describes the plan.
                features:
                    $ref: "#/components/schemas/SupportPlanFeatures"
                contract:
                    type: boolean
                    description: A boolean where true represents the plan is a long term contract, not just month to month.
                default:
                    type: boolean
                    description: This returns true if it shows up.
        BillingServers:
            title: BillingServers
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of servers included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard server limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of servers exceeding the included server count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingMembers:
            title: BillingMembers
            type: object
            description: An object holding information about members included in Billing tier
            required:
                - included
                - hard_cap
                - additional
            properties:
                included:
                    type: number
                    description: The number of members included in the tier price
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard member limit on the tier
                additional:
                    type: object
                    description: An object describing the additonal cost of members exceeding the included member count
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
        BillingRam:
            title: BillingRam
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingImageStorage:
            title: BillingImageStorage
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - included_gb
                - additional_gb
                - hard_cap
            properties:
                included_gb:
                    type: number
                    description: The GB of image storage included in tier
                additional_gb:
                    type: object
                    description: Additional cost for image storage exceeding included_gb
                    required:
                        - mills
                        - term
                    properties:
                        mills:
                            type: number
                        term:
                            type: string
                            enum:
                                - once
                                - monthly
                                - yearly
                hard_cap:
                    type: boolean
                    description: A boolean indicating if there is a hard limit on the image storage
        BillingBuilds:
            title: BillingBuilds
            type: object
            description: An object holding information about servers included in Billing tier
            required:
                - parallel
                - cpu_cores
                - ram_gb
                - max_daily_builds
            properties:
                parallel:
                    type: number
                cpu_cores:
                    type: number
                    description: The number of CPU Cores availiable for builds
                ram_gb:
                    type: number
                    description: The amount of RAM availiable for builds
                max_daily_builds:
                    type:
                        - integer
                        - "null"
                    description: The maximum number of builds processed per day
        TierPlan:
            title: TierPlan
            type: object
            description: A TierPlan object describes the attributes of a subscription tier
            required:
                - id
                - name
                - code
                - generation
                - usable
                - price
                - servers
                - members
                - max_nodes
                - max_members
                - advanced_features
                - max_daily_api_requests
                - ram
                - image_storage
                - builds
                - hidden
                - description
            properties:
                id:
                    type: string
                name:
                    type: string
                code:
                    type: string
                generation:
                    type: integer
                usable:
                    type: boolean
                price:
                    $ref: "#/components/schemas/BillingAmount"
                servers:
                    $ref: "#/components/schemas/BillingServers"
                members:
                    $ref: "#/components/schemas/BillingMembers"
                max_nodes:
                    type:
                        - integer
                        - "null"
                max_members:
                    type:
                        - integer
                        - "null"
                advanced_features:
                    type: object
                    required:
                        - gpu
                        - ial
                        - autoscale
                        - deployments
                        - geodns
                        - provider_multi_account
                    properties:
                        gpu:
                            type: boolean
                        ial:
                            type: boolean
                        deployments:
                            type: boolean
                        autoscale:
                            type: boolean
                        geodns:
                            type: boolean
                        provider_multi_account:
                            type: boolean
                max_daily_api_requests:
                    type:
                        - integer
                        - "null"
                ram:
                    $ref: "#/components/schemas/BillingRam"
                image_storage:
                    $ref: "#/components/schemas/BillingImageStorage"
                builds:
                    $ref: "#/components/schemas/BillingBuilds"
                hidden:
                    type: boolean
                hubs:
                    description: An array of hub IDs with access to the tier.
                    oneOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/Identifier"
                        - type: "null"
                description:
                    type: string
        AssociatedDiscount:
            title: AssociatedDiscount
            type: object
            description: Information about a billing discount.
            required:
                - id
                - amount
                - expires
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                amount:
                    $ref: "#/components/schemas/BillingAmount"
                expires:
                    description: A timestamp of when the discount expires.
                    $ref: "#/components/schemas/DateTime"
        BillingServiceState:
            title: BillingServiceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the billing service.
                          type: string
                          enum:
                              - active
                - $ref: "#/components/schemas/State"
        Service:
            title: BillingService
            type: object
            description: Information about billing service.
            required:
                - id
                - creator
                - hub_id
                - title
                - order
                - item
                - events
                - discount
                - price
                - term
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                title:
                    type: string
                    description: Billing service title.
                order:
                    $ref: "#/components/schemas/Order"
                item:
                    $ref: "#/components/schemas/ServiceItem"
                discount:
                    $ref: "#/components/schemas/AssociatedDiscount"
                price:
                    $ref: "#/components/schemas/BillingAmount"
                term:
                    $ref: "#/components/schemas/Term"
                events:
                    title: BillingServiceEvents
                    type: object
                    description: A collection of timestamps for each event in the billing service's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_billed
                    properties:
                        created:
                            description: The timestamp of when the billing service was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the billing service was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the billing service was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_billed:
                            description: The timestamp of when the billing service was last billed.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/BillingServiceState"
        Overage:
            title: BillingOverage
            type: object
            description: Information about billing overage.
            required:
                - term
                - ram
            properties:
                term:
                    $ref: "#/components/schemas/Term"
                ram:
                    type: object
                    description: Used for gen 1 pricing.
                    required:
                        - gb_hours
                        - cost
                    properties:
                        gb_hours:
                            type: integer
                            description: The number of hours of overage.
                        cost:
                            type: integer
                            description: The cost of the overage.
        IPNet:
            title: IPNet
            type: object
            required:
                - ip
                - cidr
            properties:
                ip:
                    type: string
                    description: The IP address.
                    examples:
                        - fd00::21:0:0:0
                cidr:
                    type: string
                    description: The CIDR notation, describing the range of IP addresses.
                    examples:
                        - fd00::21:0:0:0/96
        LegacyNetwork:
            title: LegacyNetwork
            type: object
            description: Legacy network information for an environment.
            required:
                - subnet
            properties:
                subnet:
                    type: integer
                    description: The IPv4 subnet id.
                ipv4:
                    description: IPv4 information available from environments using legacy networking.
                    anyOf:
                        - $ref: "#/components/schemas/IPNet"
                        - type: "null"
        ContainerEnvironmentSummary:
            title: ContainerEnvironmentSummary
            description: A summary of supplemental environment and network information specific to a container.
            type: object
            required:
                - id
                - cluster
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                container_subnet:
                    type:
                        - string
                        - "null"
                    description: The private network subnet ID for this container and its instances.
                ipv6:
                    anyOf:
                        - $ref: "#/components/schemas/IPNet"
                        - type: "null"
                legacy:
                    anyOf:
                        - $ref: "#/components/schemas/LegacyNetwork"
                        - type: "null"
        ContainerExtension:
            title: ContainerExtension
            type:
                - object
                - "null"
            description: Reference to container functionality that is added by the Cycle platform.
            required:
                - identifier
            properties:
                identifier:
                    type: string
                    enum:
                        - virtual-machine-v1
                id:
                    $ref: "#/components/schemas/ID"
        ServiceContainerIdentifier:
            title: ServiceContainerIdentifier
            type: string
            description: Identifier of a service Container within an Environment.
            enum:
                - discovery
                - vpn
                - loadbalancer
                - scheduler
        ImageSummary:
            title: ContainerImageSummary
            description: A summary of the image this container was created from.
            type: object
            required:
                - id
                - service
                - extension
            properties:
                id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                extension:
                    anyOf:
                        - $ref: "#/components/schemas/ContainerExtension"
                        - type: "null"
                service:
                    anyOf:
                        - $ref: "#/components/schemas/ServiceContainerIdentifier"
                        - type: "null"
                    description: If a service container, the identifier specifying which service it is.
        StackSummary:
            title: ContainerStackSummary
            description: A summary of the stack this container was created format.
            type: object
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                build_id:
                    type: string
                    description: The ID of the stack build this container is associated with.
                identifier:
                    type: string
                    description: The container identifier, usually the key to the container section of a stack file.
        ContainerNetwork:
            title: ContainerNetwork
            type: object
            description: Network configuration for a container.
            required:
                - public
                - hostname
            properties:
                public:
                    type: string
                    description: The public network settings for the given container
                    enum:
                        - enable
                        - egress-only
                        - disable
                hostname:
                    type: string
                    description: The hostname for the given container.
                ports:
                    type: array
                    items:
                        type: string
                    description: An array of port mappings for the container.
        DeploymentStrategyName:
            title: DeploymentStrategyName
            type: string
            enum:
                - resource-density
                - high-availability
                - first-available
                - node
                - edge
                - manual
                - function
        Duration:
            title: Duration
            type: string
            description: A string signifying a duration of time. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h", "d", "w", "y".
            examples:
                - 72h45m2s
        ContainerDeploy:
            title: ContainerDeploy
            type: object
            description: Deployment configuration for the given container.
            required:
                - instances
            properties:
                instances:
                    type: integer
                    description: The number of initial desired instances for a given container.
                strategy:
                    $ref: "#/components/schemas/DeploymentStrategyName"
                    description: The deployment strategy to use when scaling the given container.
                function:
                    description: Configuration options for containers using the 'function' deployment strategy.
                    type:
                        - object
                        - "null"
                    properties:
                        max_pool_size:
                            description: The maximum number of instances that Cycle can pre-allocate (includes auto-scaled instances).
                            type:
                                - integer
                                - "null"
                        max_shard_concurrency:
                            description: For each shard (scheduler), the maximum number of tasks it can run in parallel.
                            type:
                                - integer
                                - "null"
                        max_runtime:
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                            description: The maximum amount of time a function instance can run before timing out.
                        max_queue_time:
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                            description: The maximum amount of time Cycle will wait for an instance to be available.
                stateful:
                    type: object
                    properties:
                        options:
                            type:
                                - object
                                - "null"
                            properties:
                                use_base_hostname:
                                    type:
                                        - boolean
                                        - "null"
                constraints:
                    type: object
                    description: Settings that give more granular control over deployment targets and conditions.
                    properties:
                        node:
                            type: object
                            description: Constraint settings related to which nodes an instance can be deployed to.
                            required:
                                - tags
                            properties:
                                tags:
                                    type: object
                                    description: Lists of server tags that formally declair servers that match the criteria for deployment.
                                    properties:
                                        any:
                                            type: array
                                            items:
                                                type: string
                                            description: A list of tags where a server matching any tags from the list is qualified as a deployment target.
                                        all:
                                            type: array
                                            items:
                                                type: string
                                            description: A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target.
                        secrets:
                            type: array
                            items:
                                type: string
                shutdown:
                    type: object
                    description: Configuration for what to do during container shutdown.
                    properties:
                        graceful_timeout:
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                            description: How long the platform will wait for a container to stop gracefully.
                        signals:
                            type:
                                - array
                                - "null"
                            items:
                                type: string
                                enum:
                                    - SIGTERM
                                    - SIGINT
                                    - SIGUSR1
                                    - SIGUSR2
                                    - SIGHUP
                                    - SIGQUIT
                            description: Process signal sent to the container process.
                startup:
                    type: object
                    description: Configurations for container startup.
                    properties:
                        delay:
                            $ref: "#/components/schemas/Duration"
                            description: How long the platform will wait before sending the start signal to the given container.
                update:
                    type: object
                    description: Configurations for container updates.
                    properties:
                        stagger:
                            $ref: "#/components/schemas/Duration"
                            description: When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here).
                restart:
                    type: object
                    description: Configurations for container restart events.
                    required:
                        - condition
                        - delay
                        - max_attempts
                    properties:
                        condition:
                            type: string
                            description: Policy for what should happen in the event of a container dying.
                            enum:
                                - always
                                - never
                                - failure
                        delay:
                            $ref: "#/components/schemas/Duration"
                            description: How long the platform will wait before trying to restart the container.
                        max_attempts:
                            type: integer
                            description: The amount of times the platform will attempt the restart policies.
                health_check:
                    type: object
                    description: Configuration for determining the health of a container.
                    required:
                        - command
                        - retries
                        - delay
                        - interval
                        - timeout
                        - restart
                    properties:
                        command:
                            type: string
                            description: The command that will be run to verify the health of the container.
                        retries:
                            type: integer
                            description: The number of times the platform will retry the command before marking the container unhealthy.
                        delay:
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                            description: How long to wait before performing an initial health check when the instance starts. The `state.health.healthy` field of the instance will be `null`` until the first check is performed.
                        interval:
                            $ref: "#/components/schemas/Duration"
                            description: How long to wait between restarts.
                        timeout:
                            $ref: "#/components/schemas/Duration"
                            description: How long before a health check attempt times out.
                        restart:
                            type: boolean
                            description: A boolean where `true` represents the desire for a container to restart if unhealthy.
                telemetry:
                    type: object
                    description: Configuration settings for container telemetery reporting.
                    required:
                        - retention
                        - interval
                        - disable
                    properties:
                        retention:
                            $ref: "#/components/schemas/Duration"
                            description: How long telemetry data should be retained.
                        interval:
                            $ref: "#/components/schemas/Duration"
                            description: The duration between samples.
                        disable:
                            type: boolean
                            description: A boolean where true disables all telemetry reporting for this container.
        ScaleThresholdMetricRam:
            title: ScaleThresholdMetricRam
            type: object
            description: Describes the RAM threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - ram
                details:
                    type: object
                    required:
                        - usage
                    properties:
                        usage:
                            type: string
                            description: The target average RAM usage of all instances of this container. Going above this threshold will trigger a scaling event. This threshold must be greater than 25MB.
                            examples:
                                - 2G
                                - 25MB
        ScaleThresholdMetricCpu:
            title: ScaleThresholdMetricCpu
            type: object
            description: Describes the CPU threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cpu
                details:
                    type: object
                    required:
                        - utilization
                    properties:
                        utilization:
                            type: integer
        WebhookURL:
            title: WebhookURL
            type: string
            description: |
                A URL describing the destination Cycle should send a POST webhook payload to.
            examples:
                - https://example.com/cycle/autoscale
        ScaleThresholdMetricCustom:
            title: ScaleThresholdMetricCustom
            type: object
            description: A custom threshold for defining a scaling event.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - custom
                details:
                    type: object
                    required:
                        - webhook
                    properties:
                        webhook:
                            $ref: "#/components/schemas/WebhookURL"
        ScaleThresholdMetricNetworkConnections:
            title: ScaleThresholdMetricNetworkConnections
            type: object
            description: Describes the network connections threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-connections
                details:
                    type: object
                    required:
                        - connections_total
                    properties:
                        connections_total:
                            type: integer
        ScaleThresholdMetricNetworkRequests:
            title: ScaleThresholdMetricNetworkRequests
            type: object
            description: Describes the network requests threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-requests
                details:
                    type: object
                    required:
                        - requests_total
                    properties:
                        requests_total:
                            type: integer
        ScaleThresholdMetricNetworkThroughput:
            title: ScaleThresholdMetricNetworkThroughput
            type: object
            description: Describes the network throughput threshold at which scaling will occur
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-throughput
                details:
                    type: object
                    required:
                        - private
                        - bandwidth
                    properties:
                        private:
                            type: boolean
                        bandwidth:
                            type: string
                            description: The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event.
                            examples:
                                - 1G
                                - 2M
        ScaleThresholdMetric:
            title: ScaleThresholdMetric
            type: object
            description: Discriminated union describing the different types of scaling threshold and their respective details
            discriminator:
                propertyName: type
                mapping:
                    ram: "#/components/schemas/ScaleThresholdMetricRam"
                    cpu: "#/components/schemas/ScaleThresholdMetricCpu"
                    custom: "#/components/schemas/ScaleThresholdMetricCustom"
                    network-connections: "#/components/schemas/ScaleThresholdMetricNetworkConnections"
                    network-requests: "#/components/schemas/ScaleThresholdMetricNetworkRequests"
                    network-throughput: "#/components/schemas/ScaleThresholdMetricNetworkThroughput"
            oneOf:
                - $ref: "#/components/schemas/ScaleThresholdMetricRam"
                - $ref: "#/components/schemas/ScaleThresholdMetricCpu"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkConnections"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkRequests"
                - $ref: "#/components/schemas/ScaleThresholdMetricNetworkThroughput"
                - $ref: "#/components/schemas/ScaleThresholdMetricCustom"
        ContainerScale:
            title: ContainerScale
            type: object
            description: Network configuration for a container.
            required:
                - autoscale_group
                - instances
                - window
                - thresholds
            properties:
                autoscale_group:
                    type:
                        - string
                        - "null"
                    description: The autoscaling group describes which servers should be deployed
                instances:
                    type: object
                    description: Describes how many instances should be running
                    required:
                        - max
                        - max_server
                        - min_ttl
                    properties:
                        max:
                            type: integer
                            description: Maximum additional instances the auto-scaler will run at any time
                        max_server:
                            type: integer
                            description: Minimum number of instances per server
                        min_ttl:
                            $ref: "#/components/schemas/Duration"
                            description: Minimum amount of time an instance will live
                window:
                    description: Duration in which the auto-scaler will watch for changes
                    $ref: "#/components/schemas/Duration"
                thresholds:
                    description: An array of rules that dictate when a scaling event will be triggered
                    type: array
                    items:
                        $ref: "#/components/schemas/ScaleThresholdMetric"
        SeccompRule:
            title: SeccompRule
            description: Rules for controlling Linux seccomp inside a container.
            type: object
            properties:
                capabilities:
                    type: object
                    properties:
                        includes:
                            type: string
                        excludes:
                            type: string
                syscall:
                    type: object
                    description: LinuxSyscall is used to match a syscall in Seccomp
                    required:
                        - names
                        - action
                    properties:
                        names:
                            type: array
                            items:
                                type: string
                        action:
                            type: string
                        errnoRet:
                            type: integer
                        args:
                            type: array
                            items:
                                type: object
                                required:
                                    - index
                                    - value
                                    - op
                                properties:
                                    index:
                                        type: integer
                                    value:
                                        type: integer
                                    valueTwo:
                                        type: integer
                                    op:
                                        type: string
        ContainerRuntime:
            title: ContainerRuntime
            type: object
            description: Runtime configurations for a given container.
            required:
                - privileged
            properties:
                command:
                    type:
                        - object
                        - "null"
                    description: A command that will be run in place of the images defined startup command.
                    properties:
                        path:
                            type:
                                - string
                                - "null"
                            description: System path for the command.
                        args:
                            type:
                                - string
                                - "null"
                            description: Arguments to pass to the command.
                namespaces:
                    type: array
                    items:
                        type: string
                        enum:
                            - ipc
                            - pid
                            - uts
                            - network
                            - mount
                            - user
                            - cgroup
                    description: Namespaces the given container will have access to.
                environment_vars:
                    type: object
                    description: A record of environment variables for the given container.
                    additionalProperties:
                        type: string
                privileged:
                    type: boolean
                    description: Selecting this option will give this container full permissions on the server. This is not recommended and increases the likelihood of your server being compromised.
                capabilities:
                    type: array
                    items:
                        type: string
                        enum:
                            - CAP_CHOWN
                            - CAP_FSETID
                            - CAP_DAC_OVERRIDE
                            - CAP_FOWNER
                            - CAP_SETFCAP
                            - CAP_SETGID
                            - CAP_SETUID
                            - CAP_KILL
                            - CAP_MKNOD
                            - CAP_NET_BIND_SERVICE
                            - CAP_NET_RAW
                            - CAP_AUDIT_WRITE
                            - CAP_SYS_CHROOT
                            - CAP_SETPCAP
                            - CAP_DAC_READ_SEARCH
                            - CAP_NET_ADMIN
                            - CAP_NET_BROADCAST
                            - CAP_SYS_ADMIN
                            - CAP_SYS_MODULE
                            - CAP_SYS_NICE
                            - CAP_SYS_PACCT
                            - CAP_SYS_PTRACE
                            - CAP_SYS_RAWIO
                            - CAP_SYS_RESOURCE
                            - CAP_SYS_BOOT
                            - CAP_SYS_TIME
                            - CAP_SYS_TTY_CONFIG
                            - CAP_SYSLOG
                            - CAP_AUDIT_CONTROL
                            - CAP_AUDIT_READ
                            - CAP_IPC_LOCK
                            - CAP_IPC_OWNER
                            - CAP_LINUX_IMMUTABLE
                            - CAP_MAC_ADMIN
                            - CAP_MAC_OVERRIDE
                            - CAP_BLOCK_SUSPEND
                            - CAP_LEASE
                            - CAP_WAKE_ALARM
                    description: A list of linux kernel capabilites for the given container.
                workdir:
                    type: string
                    description: Configure the working directory for the given container.
                sysctl:
                    type: object
                    description: A record of sysctl fields and values for a given container.
                    additionalProperties:
                        type: string
                rlimits:
                    type: object
                    description: A record of rlimits and their values.
                    additionalProperties:
                        type: object
                        properties:
                            hard:
                                type: integer
                                description: The hard limit for the rlimit.
                            soft:
                                type: integer
                                description: The soft limit for the rlimit.
                seccomp:
                    type:
                        - object
                        - "null"
                    properties:
                        disable:
                            type: boolean
                        rules:
                            type: array
                            items:
                                $ref: "#/components/schemas/SeccompRule"
                host:
                    type:
                        - object
                        - "null"
                    properties:
                        expose_proc:
                            type:
                                - boolean
                                - "null"
                rootfs:
                    type: object
                    properties:
                        readonly:
                            description: Enabling this option will set the containers filesystem to readonly. Volumes associated with the container will not be affected by this.
                            type: boolean
                devices:
                    type:
                        - object
                        - "null"
                    properties:
                        shm_size:
                            type:
                                - string
                                - "null"
                            description: The size of the shared host memory device (/dev/shm).
                            examples:
                                - 64M
                                - 128M
                                - 512M
        ContainerResources:
            title: ContainerResources
            type: object
            description: Configuration settings for the resource allocations and limits of a given container.
            required:
                - cpu
                - ram
            properties:
                cpu:
                    type: object
                    description: Configurations settings related to CPU usage.
                    properties:
                        shares:
                            type: object
                            description: A share represents 1/10th of the available compute time on a single thread.
                            required:
                                - limit
                                - reserve
                            properties:
                                limit:
                                    type: integer
                                    description: The limit (maximum) amount of shares each instance of a container can use.
                                reserve:
                                    type: integer
                                    description: The reserve (allocation) number of shares for each instance of a given container.
                        cpus:
                            type: string
                ram:
                    type: object
                    description: Configuration settings for limits and reserves of RAM resources for the given container.
                    properties:
                        limit:
                            type: string
                            description: The limit (maximum) amount of RAM each instance of the given container can use.
                            examples:
                                - 1G
                                - 1M
                        reserve:
                            type: string
                            description: The reserve (allocation) of RAM given to each instance of the container.
        HybridIdentifier:
            title: HybridIdentifier
            type: string
            description: Either a resource ID (objectid - i.e. 651586fca6078e98982dbd90) or a resource Identifier (human-readable)
            examples:
                - my-image-source
        ContainerIntegrations:
            title: ContainerIntegrations
            type: object
            description: Configuration settings for integrations with a given container.
            properties:
                webhooks:
                    type: object
                    description: Webhooks that can be set for specific event reporting and advanced container configurations.
                    properties:
                        events:
                            type: object
                            description: Container events that can be configured to report to a webhook.
                            properties:
                                deploy:
                                    type: string
                                    description: A webhook to hit when a container deploy event happens.
                                start:
                                    type: string
                                    description: A webhook to hit when a container start event happens.
                                stop:
                                    type: string
                                    description: A webhook to hit when a container stop event happens.
                        config:
                            type: string
                            description: An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations.
                files:
                    type: array
                    description: Inject remotely hosted files into container instances at runtime.
                    items:
                        type: object
                        description: These objects are sources and destinations for the given files.
                        required:
                            - source
                            - destination
                        properties:
                            source:
                                type: string
                                description: The http endpoint that is hosting the files to be used.
                            destination:
                                type: string
                                description: The path in the container for these files to be injected.
                lets_encrypt:
                    type:
                        - object
                        - "null"
                    description: Configuration settings to embed a TLS certificate in the container.
                    properties:
                        certificate_path:
                            type: string
                            description: Path where the `certificate.cert` will be saved.
                        chain_path:
                            type: string
                            description: Path where the `certificate.chain` will be saved.
                        key_path:
                            type: string
                            description: Path where the `certificate.key` will be saved.
                        bundle_path:
                            type: string
                            description: Path where the `certificate.bundle` will be saved.
                        additional_certs_path:
                            type: string
                            description: File path where any remaining certificate files will be stored.
                backups:
                    type: object
                    description: Automated backups configuration for the given container.
                    required:
                        - destination
                        - backup
                        - restore
                        - retention
                    properties:
                        integration_id:
                            $ref: "#/components/schemas/HybridIdentifier"
                        backup:
                            type: object
                            description: Configuration settings for each backup.
                            required:
                                - command
                            properties:
                                command:
                                    type: string
                                    description: The command to run for the backup.
                                timeout:
                                    anyOf:
                                        - $ref: "#/components/schemas/Duration"
                                        - type: "null"
                                    description: How long the backup will attempt to run before timing out.
                                cron_string:
                                    type: string
                                    description: A cron string that configures how often the backup will run.
                        restore:
                            type:
                                - object
                                - "null"
                            description: Configuration settings for restoring from a backup.
                            required:
                                - command
                            properties:
                                command:
                                    type: string
                                    description: The command to run for restoring from a backup.
                                timeout:
                                    type: string
                                    description: The time in seconds for the restore to attempt to complete before timing out.
                                    allOf:
                                        - $ref: "#/components/schemas/Duration"
                        retention:
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                            description: How long the platform will keep backups. Default is 1 year.
                            default: 365d
                shared_file_systems:
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: object
                        required:
                            - writable
                            - mount_point
                        properties:
                            writable:
                                type: boolean
                            mount_point:
                                type: string
                logs:
                    description: When enabled, allows more customization to be applied to logging for the container.
                    oneOf:
                        - type: object
                          properties:
                              drain:
                                  description: When enabled, log drain allows logs to be exported to a third party service.
                                  oneOf:
                                      - type: object
                                        required:
                                            - url
                                        properties:
                                            url:
                                                description: The URL to the third party logging service where logs will be sent.
                                                type: string
                                      - type: "null"
                        - type: "null"
        Config:
            title: ContainerConfig
            description: A container configuration.
            type: object
            required:
                - network
                - deploy
            properties:
                network:
                    $ref: "#/components/schemas/ContainerNetwork"
                deploy:
                    $ref: "#/components/schemas/ContainerDeploy"
                scale:
                    $ref: "#/components/schemas/ContainerScale"
                runtime:
                    $ref: "#/components/schemas/ContainerRuntime"
                resources:
                    $ref: "#/components/schemas/ContainerResources"
                integrations:
                    $ref: "#/components/schemas/ContainerIntegrations"
        Version:
            title: Version
            type: string
            description: |
                Version can be any string, but if it begins with a "v", semantic version will be enforced. A [Semantic Version](https://semver.org/) string. Follows the format vMAJOR.MINOR.PATCH-build.
            examples:
                - v1.2.3-dev
        Deployment:
            title: Deployment
            description: |
                A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments by separating multiple versions of the same application within an environment.

                If a container is a member of a deployment, it can only resolve containers in that same deployment, or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve all containers in the environment.
            type: object
            required:
                - version
            properties:
                version:
                    $ref: "#/components/schemas/Version"
                    description: |
                        A version string representing the deployment.
        ContainerVolume:
            title: ContainerVolume
            type: object
            description: Configuration settings for container volumes.
            required:
                - read_only
                - block_device
                - destination
            properties:
                read_only:
                    type: boolean
                    description: A boolean where true marks the volume as read only.
                block_device:
                    type: boolean
                    description: |
                        Indicates that the volume will be used as unformatted block storage.
                local:
                    type: object
                    description: Configuration for settings local to the container filesystem.
                    required:
                        - max_size
                    properties:
                        max_size:
                            type: string
                            description: The maximum size this volume can grow to. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size.
                            examples:
                                - 10G
                        storage_pool:
                            type: boolean
                            description: A boolean where true signifies using the largest drive over 2TB for the target server.
                destination:
                    type: string
                    description: The mountpoint path for the container.
                remote_access:
                    type: object
                    description: Configuration settings for remotely accessing the container volume.
                    required:
                        - enable
                        - password
                    properties:
                        enable:
                            type: boolean
                            description: A boolean where true represents this container volume being open to remote access connections over SFTP.
                        ips:
                            type: array
                            items:
                                type: string
                        webhook:
                            type: string
                            description: Call out to a webhook to authenticate usernames/passwords if an organization manages their own accounts
                        password:
                            type:
                                - object
                                - "null"
                            description: Password configuration settings for the remote access of the container volume.
                            required:
                                - algorithm
                                - data
                            properties:
                                algorithm:
                                    type: string
                                    description: The hashing algorithm used to has the password.
                                    enum:
                                        - raw
                                        - sha512
                                        - md5
                                data:
                                    type: string
                                    description: The raw or hashed password.
        VolumeSummary:
            title: VolumeSummary
            type: object
            description: A summary of relevant volume information.
            required:
                - id
                - hash
                - config
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hash:
                    type: string
                    description: A unique hash for the given volume.
                config:
                    $ref: "#/components/schemas/ContainerVolume"
        ContainerState:
            title: ContainerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                      desired:
                          description: The desired state of the container.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - function
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StateCountSummary:
            title: ResourceCountSummary
            type: object
            description: A summary of resources by state
            required:
                - state
                - total
                - available
            properties:
                state:
                    title: CountsByState
                    type: object
                    description: A count of this resource, grouped by state.
                    additionalProperties:
                        type: integer
                total:
                    type: integer
                    description: The total number of this resource
                available:
                    type: integer
                    description: The total number of this resource available, less any deleted ones.
            example:
                state:
                    new: 0
                    starting: 0
                    running: 5
                    stopping: 0
                    deleting: 0
                    deleted: 0
                total: 5
                available: 5
        RecordTypes:
            title: DNSRecordTypes
            type: object
            description: DNS record types the platform supports.
            properties:
                a:
                    type: object
                    description: A DNS A record
                    required:
                        - ip
                    properties:
                        ip:
                            type: string
                            description: The IPv4 address that the A record should map to.
                aaaa:
                    type: object
                    description: A DNS AAAA record
                    required:
                        - ip
                    properties:
                        ip:
                            type: string
                            description: The IPv6 address that the AAAA record should map to.
                cname:
                    type: object
                    description: A DNS CNAME record
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain string the record resolves to.
                ns:
                    type: object
                    description: A DNS NS record
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain of the nameserver for this record.
                mx:
                    type: object
                    description: A DNS MX record
                    required:
                        - priority
                        - domain
                    properties:
                        priority:
                            type: integer
                            description: The priority setting for this mx record.
                        domain:
                            type: string
                            description: The domain this mx record points to.
                txt:
                    type: object
                    description: A DNS TXT record.
                    required:
                        - value
                    properties:
                        value:
                            type: string
                            description: The value for this TXT record.
                alias:
                    type: object
                    description: A DNS ALIAS record.
                    required:
                        - domain
                    properties:
                        domain:
                            type: string
                            description: The domain string returned from the DNS server when this alias record is requested.
                srv:
                    type: object
                    description: A DNS SRV record.
                    required:
                        - weight
                        - priority
                        - port
                        - domain
                    properties:
                        weight:
                            type: integer
                            description: Teh weight configured for this record - breaks ties for priority.
                        priority:
                            type: integer
                            description: The priority for the record.
                        port:
                            type: integer
                            description: The port number for the service.
                        domain:
                            type: string
                            description: The domain for the record.
                caa:
                    type: object
                    description: A DNS CAA record.
                    required:
                        - tag
                        - value
                    properties:
                        tag:
                            type: string
                            description: The ASCII string that represents the identifier of the property represented by the record.
                        value:
                            type: string
                            description: The value associated with the tag.
                linked:
                    type: object
                    description: A LINKED record is a record special to Cycle.  It represents a URL that points to a specific container or deployment of a container, however the IP address mapping in handled automatically by the platform.
                    allOf:
                        - type: object
                          required:
                              - features
                          properties:
                              features:
                                  type: object
                                  description: Features associated with this record.
                                  required:
                                      - tls
                                      - geodns
                                  properties:
                                      tls:
                                          type: object
                                          description: TLS properties of the record.
                                          required:
                                              - enable
                                          properties:
                                              enable:
                                                  type: boolean
                                                  description: A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform.
                                      geodns:
                                          type: object
                                          description: Options for the GeoDNS LINKED record feature.
                                          required:
                                              - enable
                                          properties:
                                              enable:
                                                  type: boolean
                                                  description: If enabled, Cycle will attempt to match inbound requests to the closest load balancer geographically.
                                      wildcard:
                                          type:
                                              - object
                                              - "null"
                                          required:
                                              - resolve_sub_domains
                                          properties:
                                              resolve_sub_domains:
                                                  description: If enabled, subdomains will resolve for wildcard records. If disabled, only the primary domain will resolve.
                                                  default: false
                                                  type: boolean
                        - oneOf:
                              - type: object
                                properties:
                                    container_id:
                                        type: string
                                        description: The ID of the container this record is related to.
                              - type: object
                                properties:
                                    deployment:
                                        type:
                                            - object
                                            - "null"
                                        description: Information about the deployment this record points to.
                                        required:
                                            - environment_id
                                            - match
                                        properties:
                                            environment_id:
                                                $ref: "#/components/schemas/ID"
                                                description: The ID of the environment with the deployment tag mapping we want to reference.
                                            match:
                                                type: object
                                                description: Describes which container and which tagged deployment this record should target.
                                                required:
                                                    - container
                                                properties:
                                                    container:
                                                        $ref: "#/components/schemas/Identifier"
                                                        description: The identifier of the container in the environment this record should point to.
                                                    tag:
                                                        description: The deployment tag that this record should point to. The tags are set on the root of an environment and map to a deployment version.
                                                        anyOf:
                                                            - $ref: "#/components/schemas/Identifier"
                                                            - type: "null"
        RecordTlsCertificate:
            title: RecordTlsCertificate
            type: object
            description: A TLS certificate assigned to a DNS record.
            required:
                - id
                - generated
                - wildcard_child
                - user_supplied
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                generated:
                    $ref: "#/components/schemas/DateTime"
                wildcard_child:
                    type: boolean
                    description: A value where true represents that the certificate is using a shared wildcard cert.
                user_supplied:
                    type: boolean
                    description: If true, this certificate was manually supplied, and was not auto-generated by the platform.
                expires:
                    $ref: "#/components/schemas/DateTime"
                    description: The time that this certificate expires.
        RecordState:
            title: DNSRecordState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the record.
                          type: string
                          enum:
                              - pending
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Record:
            title: DNSRecord
            type: object
            description: A DNS record.
            required:
                - id
                - hub_id
                - creator
                - zone_id
                - name
                - resolved_domain
                - type
                - features
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                zone_id:
                    type: string
                    description: A unique identifier for the zone
                name:
                    type: string
                    description: A name used for the record, where `@` signifies the use of the root domain.
                resolved_domain:
                    type: string
                    description: The name of the record and the origin as a domain name.
                type:
                    $ref: "#/components/schemas/RecordTypes"
                features:
                    type:
                        - object
                        - "null"
                    description: TLS features for the record.
                    required:
                        - certificate
                    properties:
                        certificate:
                            anyOf:
                                - $ref: "#/components/schemas/RecordTlsCertificate"
                                - type: "null"
                state:
                    $ref: "#/components/schemas/RecordState"
                events:
                    $ref: "#/components/schemas/Events"
        IpState:
            title: IpState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the IP.
                          type: string
                          enum:
                              - assigning
                              - assigned
                              - releasing
                              - available
                - $ref: "#/components/schemas/State"
        Ip:
            title: IP
            type: object
            description: Details about an IP.
            required:
                - id
                - hub_id
                - kind
                - assingment
                - pool_id
                - address
                - gateway
                - cidr
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                kind:
                    type: string
                    description: The type of IP protocol this IP is.
                    enum:
                        - ipv4
                        - ipv6
                assignment:
                    type:
                        - object
                        - "null"
                    description: Information about the assignment of this IP.
                    required:
                        - container_id
                        - instance_id
                        - environment_id
                    properties:
                        container_id:
                            $ref: "#/components/schemas/ID"
                        instance_id:
                            $ref: "#/components/schemas/ID"
                        environment_id:
                            $ref: "#/components/schemas/ID"
                        virtual_machine:
                            type: object
                            description: Details about the virtual machine this IP is assigned to.
                            properties:
                                id:
                                    $ref: "#/components/schemas/ID"
                            required:
                                - id
                pool_id:
                    type: string
                    description: A unique identifier that associates the IP with an IP pool.
                address:
                    type: string
                    description: The IP address.
                gateway:
                    type: string
                    description: The IP gateway.
                cidr:
                    type: string
                    description: The CIDR for the IP.
                state:
                    $ref: "#/components/schemas/IpState"
        ContainersMeta:
            title: ContainersMeta
            type: object
            description: A list of meta fields that can be applied to a container.
            properties:
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                domains:
                    type:
                        - array
                        - "null"
                    items:
                        type: object
                        description: Any associated Linked Records for this container, and their fully-qualified domain name (fqdn).
                        required:
                            - fqdn
                        properties:
                            fqdn:
                                type: string
                                description: The fully qualified domain name.
                            record:
                                $ref: "#/components/schemas/Record"
                ips:
                    description: An array of IP resources.
                    type: array
                    items:
                        $ref: "#/components/schemas/Ip"
        Container:
            title: Container
            type: object
            description: Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
            required:
                - id
                - name
                - identifier
                - creator
                - environment
                - hub_id
                - image
                - config
                - instances
                - stateful
                - state
                - deprecate
                - lock
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this container. Usually used as a key in a stack file.
                name:
                    type: string
                    description: A user defined name for the container resource.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                environment:
                    $ref: "#/components/schemas/ContainerEnvironmentSummary"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                image:
                    $ref: "#/components/schemas/ImageSummary"
                stack:
                    anyOf:
                        - $ref: "#/components/schemas/StackSummary"
                        - type: "null"
                config:
                    $ref: "#/components/schemas/Config"
                deployment:
                    anyOf:
                        - $ref: "#/components/schemas/Deployment"
                        - type: "null"
                instances:
                    type: integer
                    description: The number of instances for a given container.
                volumes:
                    type: array
                    items:
                        $ref: "#/components/schemas/VolumeSummary"
                annotations:
                    type:
                        - object
                        - "null"
                    description: Custom meta data for a given container
                    additionalProperties: {}
                role:
                    description: The role of a given container if it has one.
                    oneOf:
                        - type: string
                          enum:
                              - orchestrator
                        - type: "null"
                stateful:
                    type: boolean
                    description: A boolean where true signifies the container is stateful.
                deprecate:
                    type: boolean
                    description: A boolean where true signifies the container is marked as deprecated.
                lock:
                    type: boolean
                    description: When set to true, prevents this container from being deleted.
                state:
                    $ref: "#/components/schemas/ContainerState"
                events:
                    title: ContainerEvents
                    type: object
                    description: A collection of timestamps for each event in the container's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - started
                    properties:
                        created:
                            description: The timestamp of when the container was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the container was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the container was deleted.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the container was started.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ContainersMeta"
        EnvironmentAbout:
            title: EnvironmentAbout
            type: object
            description: Contains details regarding the environment.
            required:
                - description
                - favorite
            properties:
                description:
                    type: string
                    description: A custom description for this environment.
                favorite:
                    type: boolean
                    description: If true, this environment has been marked as a favorite.
        EnvironmentState:
            title: EnvironmentState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the environment.
                          type: string
                          enum:
                              - new
                              - live
                              - cloning
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        EnvironmentFeatures:
            title: EnvironmentFeatures
            type: object
            description: An object representing specialized features configured for this environment.
            required:
                - legacy_networking
            properties:
                legacy_networking:
                    description: Whether or not legacy networking mode is enabled on this environment.
                    type: boolean
                monitoring:
                    description: The level of monitoring to enable for this environment. There is a cost associated with higher levels of monitoring.
                    type:
                        - object
                        - "null"
                    required:
                        - tier
                    properties:
                        tier:
                            type: string
                            enum:
                                - limited
                                - standard
                                - premium
                                - enterprise
        HaProxyConfigSet:
            title: HAProxyConfigSet
            type: object
            required:
                - frontend
                - backend
            properties:
                frontend:
                    type: object
                    description: Settings that describe how incoming traffic to the load balancer is handled.
                    required:
                        - mode
                        - max_connections
                        - timeouts
                    properties:
                        mode:
                            type: string
                            description: |-
                                The type of traffic expected by the load balancer for this port. Can be either: 
                                 - tcp: Traffic is forwarded without any parsing or additional manipulation. 
                                 - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
                            enum:
                                - tcp
                                - http
                        max_connections:
                            type:
                                - integer
                                - "null"
                            description: The number of simultaneous connections that can be processed at a time.
                        timeouts:
                            type:
                                - object
                                - "null"
                            description: Various options for handling timeouts when communicating with the client.
                            required:
                                - client_secs
                                - client_fin_ms
                                - http_keep_alive_ms
                                - http_request_ms
                            properties:
                                client_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                                client_fin_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                                http_keep_alive_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                                http_request_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                backend:
                    type: object
                    description: Settings related to how the load balancer routes connections to container instances.
                    required:
                        - balance
                        - timeouts
                    properties:
                        balance:
                            type: string
                            description: |-
                                How connections are balanced across your container instances. Can be one of the following: 
                                 - `roundrobin`: Each container instance is used in turns. 
                                 - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
                                 - `leastconn`: Routes traffic to the instance with the least number of active connections. 
                                 - `first`: Routes traffic to the first available instance. 
                                 - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
                            enum:
                                - roundrobin
                                - static-rr
                                - leastconn
                                - first
                                - source
                        timeouts:
                            type:
                                - object
                                - "null"
                            description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
                            required:
                                - server_secs
                                - server_fin_ms
                                - connect_ms
                                - queue_ms
                                - tunnel_secs
                            properties:
                                server_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.
                                server_fin_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.
                                connect_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.
                                queue_ms:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
                                tunnel_secs:
                                    type:
                                        - integer
                                        - "null"
                                    description: The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.
        HaProxyConfig:
            title: HaProxyConfig
            type: object
            description: Describes settings that are passed to HAProxy within the load balancer.
            required:
                - default
                - ports
            properties:
                default:
                    description: Settings that are applied to any port that is not overridden in the following ports section.
                    $ref: "#/components/schemas/HaProxyConfigSet"
                ports:
                    description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/HaProxyConfigSet"
        HaProxyLbType:
            title: HaProxyLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - haproxy
                details:
                    anyOf:
                        - $ref: "#/components/schemas/HaProxyConfig"
                        - type: "null"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type:
                        - boolean
                        - "null"
        WafConfig:
            title: WafConfig
            type: object
            description: Additional configuration options for the web application firewall.
            required:
                - rules
            properties:
                rules:
                    type: array
                    items:
                        type: object
                        required:
                            - description
                            - skip
                            - type
                            - match
                            - conditions
                        properties:
                            description:
                                description: Some information about the rule.
                                type: string
                            skip:
                                description: A boolean that indicates if the rule should be active or skipped.
                                type: boolean
                            type:
                                description: A string that describes if the role should allow or deny traffic based on the conditions.
                                type: string
                                enum:
                                    - allow
                                    - deny
                            match:
                                description: A string that describes if both attributes need to be true (match all) or if only one of the conditions needs to be true (match any).
                                type: string
                                enum:
                                    - any
                                    - all
                            conditions:
                                description: An array of the specific conditions for the rule.
                                type: array
                                items:
                                    type: object
                                    required:
                                        - type
                                        - operator
                                        - value
                                    properties:
                                        type:
                                            description: A string that describes the match type for the condition.
                                            type: string
                                            enum:
                                                - ip-match
                                                - geo-match
                                                - url-match
                                                - method-match
                                                - header-match
                                        operator:
                                            description: A string that indicates the range of values relative to the value property.
                                            type: string
                                            enum:
                                                - "=="
                                                - "!="
                                                - ">"
                                                - <
                                                - ">="
                                                - <=
                                        value:
                                            description: The value corresponding to the condition type.
                                            examples:
                                                - 0.0.0.0/0
                                            type: string
        TcpTransportConfig:
            title: TcpTransportConfig
            description: Additional configuration options for the TCP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    required:
                        - connections
                        - telemetry
                    properties:
                        connections:
                            type: object
                            additionalProperties: {}
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled on the load balancer.
                            additionalProperties: {}
        HttpTransportConfig:
            title: HttpTransportConfig
            description: Additional configuration options for the HTTP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    required:
                        - connections
                        - telemetry
                    properties:
                        connections:
                            type: object
                            required:
                                - max_idle_conns_per_connection
                            description: Defines extra configuration options connections to the load balancer
                            properties:
                                max_idle_conns_per_connection:
                                    type:
                                        - integer
                                        - "null"
                                    description: Maximum number of simultaneous connections (via http/2) per connection.
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled.
                            properties:
                                max_trackable_urls:
                                    description: Determines how many URLs the load balancer will track at one time. Defaults to 150.
                                    type:
                                        - integer
                                        - "null"
                                track_invalid_requests:
                                    description: Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false.
                                    type:
                                        - boolean
                                        - "null"
                                ignore_paths:
                                    description: An array of paths to exclude from tracking.
                                    type:
                                        - array
                                        - "null"
                                    items:
                                        type: string
        UdpTransportConfig:
            title: UdpTransportConfig
            description: Additional configuration options for the UDP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    type: object
                    required:
                        - telemetry
                    properties:
                        telemetry:
                            type: object
                            description: Configuration options for how telemetry is handled on the load balancer.
                            additionalProperties: {}
        TcpRouterConfig:
            title: TcpRouterConfig
            description: Additional configuration options for TCP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    type: object
                    additionalProperties: {}
        UdpRouterConfig:
            title: UdpRouterConfig
            description: Additional configuration options for UDP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    type: object
                    additionalProperties: {}
        HttpRouterConfig:
            title: HttpRouterConfig
            description: Additional configuration options for HTTP mode routers.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    type: object
                    properties:
                        redirect:
                            type:
                                - object
                                - "null"
                            required:
                                - auto_https_redirect
                                - remove_www
                            description: Defines a built-in redirect for HTTP mode routers
                            properties:
                                auto_https_redirect:
                                    type: boolean
                                    description: If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router.
                                remove_www:
                                    description: If true, any request comes in with "www" prefix will be permanently redirected to the same path without www.
                                    type: boolean
                                port:
                                    type:
                                        - integer
                                        - "null"
                                    description: The port to redirect traffic to.
                                scheme:
                                    type:
                                        - string
                                        - "null"
                                    description: The scheme to redirect to. (i.e. `https`)
                                url:
                                    type:
                                        - string
                                        - "null"
                                    description: A specific URL to redirect to.
                        forward:
                            type:
                                - object
                                - "null"
                            properties:
                                scheme:
                                    type:
                                        - string
                                        - "null"
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    type:
                                        - object
                                        - "null"
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            type:
                                                - array
                                                - "null"
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                                url:
                                    type: string
                                    description: |
                                        The URL to forward the request to.

                                        Given a path match of `^/example/(.*)$`, a route such as `/example/wow.jpg` would be forwarded as /wow.jpg.
                                    examples:
                                        - /$$1
                        proxy:
                            type:
                                - object
                                - "null"
                            properties:
                                domain:
                                    type:
                                        - string
                                        - "null"
                                    description: The domain that this router will proxy.
                                url:
                                    description: The full URL that this router will proxy.
                                    type:
                                        - string
                                        - "null"
                                content_mod:
                                    description: Allows the load balancer to modify content before it reaches the user.
                                    type:
                                        - object
                                        - "null"
                                    properties:
                                        replace:
                                            description: An array that describes a list of replacement match/value pairs.
                                            type:
                                                - array
                                                - "null"
                                            items:
                                                type: object
                                                required:
                                                    - match
                                                    - value
                                                properties:
                                                    match:
                                                        description: String that will be replaced.
                                                        type: string
                                                    value:
                                                        description: Replacement value.
                                                        type: string
                        caching:
                            type:
                                - object
                                - "null"
                            properties:
                                files:
                                    type:
                                        - array
                                        - "null"
                                    items:
                                        type: object
                                        required:
                                            - match
                                            - ttl
                                        properties:
                                            match:
                                                description: Regex string that describes the files to cache.
                                                examples:
                                                    - (.*)\.(js|jpg|css|png|svg)$
                                                type: string
                                            ttl:
                                                description: Time string that describes the time to live.
                                                $ref: "#/components/schemas/Duration"
        V1LbConfigRouter:
            title: V1LbRouterConfig
            description: A specific router configuration that describes how traffic matching the rule is handled.
            type: object
            required:
                - match
                - mode
                - config
            properties:
                match:
                    type: object
                    description: The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then this match acts as a wildcard and will match all.
                    required:
                        - domains
                        - internal_ports
                    properties:
                        domains:
                            description: The specific domains to match against.
                            oneOf:
                                - type: array
                                  items:
                                      type: string
                                - type: "null"
                        internal_ports:
                            description: The specific ports to match against.
                            oneOf:
                                - type: array
                                  items:
                                      type: integer
                                - type: "null"
                        path:
                            type:
                                - string
                                - "null"
                        containers:
                            type:
                                - object
                                - "null"
                            description: Match traffic destined (or not destined) for a particular container.
                            properties:
                                include:
                                    description: Match any traffic that would be routed to one of these containers.
                                    oneOf:
                                        - type: array
                                          items:
                                              $ref: "#/components/schemas/HybridIdentifier"
                                        - type: "null"
                                exclude:
                                    description: Match any traffic that would NOT be routed to one of these containers.
                                    oneOf:
                                        - type: array
                                          items:
                                              $ref: "#/components/schemas/HybridIdentifier"
                                        - type: "null"
                mode:
                    type: string
                    description: |
                        How to route the traffic to the destination.
                        `random`: Pick a valid destination at random.
                        `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
                    enum:
                        - random
                        - round-robin
                config:
                    type: object
                    required:
                        - sticky_sessions
                        - destination_retries
                        - timeouts
                    properties:
                        sticky_sessions:
                            type: boolean
                            description: If a request comes in from the same origin, ensure it hits the same destination.
                        destination_retries:
                            type: integer
                            description: If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error.
                        destination_prioritization:
                            default: null
                            oneOf:
                                - type: string
                                  description: |
                                      Hints to the load balancer how to prioritize traffic to instances.
                                      **random**: Chooses a random instance. **latency**: Prioritizes lower latency instances.
                                  enum:
                                      - latency
                                      - random
                                - type: "null"
                        tls:
                            type:
                                - object
                                - "null"
                            description: TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled.
                            properties:
                                server_name:
                                    type:
                                        - string
                                        - "null"
                                    description: |
                                        [Advanced] Change the domain the controller listens on.
                                allow_insecure:
                                    type:
                                        - boolean
                                        - "null"
                                    description: If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use.
                                client_cert_auth:
                                    description: A PEM encoded string of certificates.
                                    type:
                                        - string
                                        - "null"
                                client_auth:
                                    description: |
                                        Defines how to validate the connecting TLS certificate.
                                        `none`: Do not require a TLS certificate to be sent
                                        `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                                        `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                                        `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                                    oneOf:
                                        - type: string
                                          enum:
                                              - none
                                              - request
                                              - require
                                              - require-verify
                                        - type: "null"
                        timeouts:
                            type: object
                            description: Defines how the length of various sorts of timeouts when communicating with the destination.
                            required:
                                - destination_connection
                            properties:
                                destination_connection:
                                    $ref: "#/components/schemas/Duration"
                                    description: The duration the load balancer will wait before timing out while attempting to connect to the destination.
                        extension:
                            anyOf:
                                - type: "null"
                                - type: object
                                  description: Additional configuration options specific to the selected mode (tcp/http).
                                  discriminator:
                                      propertyName: type
                                      mapping:
                                          tcp: "#/components/schemas/TcpRouterConfig"
                                          udp: "#/components/schemas/UdpRouterConfig"
                                          http: "#/components/schemas/HttpRouterConfig"
                                  oneOf:
                                      - $ref: "#/components/schemas/TcpRouterConfig"
                                      - $ref: "#/components/schemas/HttpRouterConfig"
                                      - $ref: "#/components/schemas/UdpRouterConfig"
        V1LbController:
            title: V1LbController
            type: object
            required:
                - identifier
                - port
            properties:
                identifier:
                    type: string
                    description: A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents.
                port:
                    type: integer
                    description: The port inbound trafic is accepted on.
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/WafConfig"
                        - type: "null"
                transport:
                    title: V1LbControllerTransport
                    description: Defines how traffic comes in to the load balancer, and how the load balancer handles it.
                    oneOf:
                        - type: "null"
                        - type: object
                          required:
                              - mode
                              - config
                              - routers
                              - disable
                          properties:
                              disable:
                                  type: boolean
                                  description: When true, this controller is disabled and will not be used.
                              mode:
                                  type: string
                                  description: The kind of traffic (http/tcp/udp) that will be sent to the load balancer.
                                  enum:
                                      - tcp
                                      - udp
                                      - http
                              config:
                                  type: object
                                  description: Defines how the transport for this controller operates.
                                  required:
                                      - performance
                                      - ingress
                                      - timeouts
                                      - verbosity
                                  properties:
                                      performance:
                                          type: boolean
                                          description: |
                                              Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                                              You will not see per-request breakdowns or URL logging if performance mode is enabled.
                                      ingress:
                                          type: object
                                          description: Defines how traffic gets into the load balancer.
                                          properties:
                                              tls:
                                                  type:
                                                      - object
                                                      - "null"
                                                  required:
                                                      - enable
                                                  properties:
                                                      enable:
                                                          type: boolean
                                                          description: Enables or disables TLS.
                                      timeouts:
                                          type: object
                                          description: Defines settings for various types of timeouts.
                                          required:
                                              - idle
                                          properties:
                                              idle:
                                                  description: The total amount of time a connection can be idle before being killed.
                                                  $ref: "#/components/schemas/Duration"
                                      verbosity:
                                          type: string
                                          description: Verbosity describes the level of logging detail for the controller
                                          enum:
                                              - low
                                              - normal
                                              - high
                                              - debug
                                      extension:
                                          type: object
                                          description: Extended configurations for the specified transport mode (http/tcp)
                                          discriminator:
                                              propertyName: type
                                              mapping:
                                                  tcp: "#/components/schemas/TcpTransportConfig"
                                                  http: "#/components/schemas/HttpTransportConfig"
                                                  udp: "#/components/schemas/UdpTransportConfig"
                                          oneOf:
                                              - $ref: "#/components/schemas/TcpTransportConfig"
                                              - $ref: "#/components/schemas/HttpTransportConfig"
                                              - $ref: "#/components/schemas/UdpTransportConfig"
                              routers:
                                  type: array
                                  description: Defines where traffic is sent. Many can be defined per controller.
                                  items:
                                      $ref: "#/components/schemas/V1LbConfigRouter"
        V1LbConfig:
            title: V1LbConfig
            type: object
            required:
                - controllers
            properties:
                controllers:
                    type: array
                    description: A configuration for a specific port.
                    items:
                        $ref: "#/components/schemas/V1LbController"
                controller_template:
                    anyOf:
                        - $ref: "#/components/schemas/V1LbController"
                        - type: "null"
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/WafConfig"
                        - type: "null"
        V1LbType:
            title: V1LbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - v1
                details:
                    $ref: "#/components/schemas/V1LbConfig"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    type:
                        - boolean
                        - "null"
        DefaultLbType:
            title: DefaultLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - default
                details:
                    oneOf:
                        - $ref: "#/components/schemas/HaProxyConfig"
                        - $ref: "#/components/schemas/V1LbConfig"
                        - type: "null"
        LoadBalancerConfig:
            title: LoadBalancerConfig
            type: object
            description: The config object for the loadbalancer service.
            discriminator:
                propertyName: type
                mapping:
                    haproxy: "#/components/schemas/HaProxyLbType"
                    v1: "#/components/schemas/V1LbType"
                    default: "#/components/schemas/DefaultLbType"
            oneOf:
                - $ref: "#/components/schemas/V1LbType"
                - $ref: "#/components/schemas/HaProxyLbType"
                - $ref: "#/components/schemas/DefaultLbType"
        LoadBalancerEnvironmentService:
            title: LoadBalancerEnvironmentService
            type: object
            description: Information about the environments loadbalancer service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the loadbalancer service is enabled.
                container_id:
                    type:
                        - string
                        - "null"
                    description: The ID of the loadbalancer service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    anyOf:
                        - $ref: "#/components/schemas/LoadBalancerConfig"
                        - type: "null"
        DiscoveryConfig:
            title: DiscoveryConfig
            type: object
            description: The config object for the discovery service.
            properties:
                empty_set_delay:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                hosts:
                    type:
                        - object
                        - "null"
                    description: A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom /etc/resolv.conf file that works environment wide.
                    additionalProperties:
                        type: object
                        properties:
                            ipv4:
                                description: The IPv4 address the discovery server should return to any container instance requesting this hostname.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                            ipv6:
                                description: The IPv6 address the discovery server should return to any container instance requesting this hostname.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                custom_resolvers:
                    description: A list of custom DNS resolver strings.  Can specifify domains or ips.
                    type: array
                    items:
                        type: string
        DiscoveryEnvironmentService:
            title: DiscoveryEnvironmentService
            type: object
            description: Information about the environments discovery service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the discovery service is enabled.
                container_id:
                    type: string
                    description: The ID of the discovery service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment discovery service.
                config:
                    description: The config object for the discovery service.
                    anyOf:
                        - $ref: "#/components/schemas/DiscoveryConfig"
                        - type: "null"
        VpnEnvironmentService:
            title: VpnEnvironmentService
            type: object
            description: Information about the environments vpn service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the VPN service is enabled.
                container_id:
                    type: string
                    description: The ID of the VPN service container
                auto_update:
                    type: boolean
                    description: A boolean representing if this service container is set to autoupdate or not
                config:
                    type:
                        - object
                        - "null"
                    description: The config object for the VPN service.
                    required:
                        - allow_internet
                        - auth
                    properties:
                        allow_internet:
                            type: boolean
                            description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                        auth:
                            type: object
                            description: Auth configuration for the VPN.
                            required:
                                - webhook
                                - cycle_accounts
                            properties:
                                webhook:
                                    type:
                                        - string
                                        - "null"
                                    description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                                cycle_accounts:
                                    type: boolean
                                    description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                                vpn_accounts:
                                    type: boolean
                                    description: If true, allows the custom VPN accounts to log in to the VPN.
        SchedulerAccessKey:
            title: SchedulerAccessKey
            description: Custom authorization keys for the scheduler service.
            type: object
            required:
                - name
                - secret
            properties:
                name:
                    type: string
                    description: The name given to this access key
                secret:
                    type: string
                    description: The access key secret. This should be submitted with requests to a publicly accessible scheduler service.
                ips:
                    type: array
                    description: Whitelisted IPs that are allowed to make requests to the scheduler service.
                    items:
                        type: string
        SchedulerConfig:
            title: SchedulerConfig
            description: Configuration options for the scheduler Environment service.
            type: object
            required:
                - public
            properties:
                public:
                    type: boolean
                    description: |
                        If true, this scheduler will be accessible over the public internet. It will enable a LINKED record to be pointed to the scheduler container, and inbound requests to trigger function containers.
                access_keys:
                    type: array
                    items:
                        $ref: "#/components/schemas/SchedulerAccessKey"
        SchedulerEnvironmentService:
            title: SchedulerEnvironmentService
            type: object
            description: Information about the environments scheduler service. The scheduler is used by containers with a function deployment strategy to route requests to the correct instances.
            required:
                - enable
                - container_id
                - high_availablity
            properties:
                enable:
                    type: boolean
                    description: Whether or not the scheduler service is enabled.
                container_id:
                    type:
                        - string
                        - "null"
                    description: The ID of the scheduler service container.
                high_availability:
                    type: boolean
                    description: A boolean representing if the scheduler service container is set to high availability. mode or not. As of Jan 2024, this will always be false because HA is not availiable for the scheduler service.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment scheduler service.
                config:
                    anyOf:
                        - $ref: "#/components/schemas/SchedulerConfig"
                        - type: "null"
        GatewayEnvironmentService:
            title: GatewayEnvironmentService
            type: object
            description: Information about the environments gateway service(s).
            required:
                - enable
                - container_id
                - high_availability
                - config
            properties:
                enable:
                    type: boolean
                    description: Whether or not the gateway service is enabled.
                container_id:
                    type: string
                    description: The ID of the gateway service container
                high_availability:
                    type: boolean
                    description: A boolean representing if this service container is set to high availability mode or not.
                auto_update:
                    type: boolean
                    description: A boolean where `true` represents the desire to automatically update the environment gateway service.
        EnvironmentServices:
            title: EnvironmentServices
            type: object
            description: Service containers run by this environment and their configurations.
            required:
                - loadbalancer
            properties:
                loadbalancer:
                    anyOf:
                        - $ref: "#/components/schemas/LoadBalancerEnvironmentService"
                        - type: "null"
                discovery:
                    anyOf:
                        - $ref: "#/components/schemas/DiscoveryEnvironmentService"
                        - type: "null"
                vpn:
                    anyOf:
                        - $ref: "#/components/schemas/VpnEnvironmentService"
                        - type: "null"
                scheduler:
                    anyOf:
                        - $ref: "#/components/schemas/SchedulerEnvironmentService"
                        - type: "null"
                gateway:
                    anyOf:
                        - $ref: "#/components/schemas/GatewayEnvironmentService"
                        - type: "null"
        ACL:
            title: ACL
            description: An access control list. Defines which roles have which permissions on specific resources.
            type: object
            properties:
                roles:
                    type: object
                    additionalProperties:
                        type: object
                        title: ACLEntry
                        description: Permissions for an ACL entry.
                        required:
                            - view
                            - modify
                            - manage
                        properties:
                            view:
                                type: boolean
                                description: Can the user see / use this resource?
                            modify:
                                type: boolean
                                description: Can the user edit the state / name / identifier of this resource?
                            manage:
                                type: boolean
                                description: Can the user delete / update ACLs for this resource?
        PrivateNetwork:
            title: PrivateNetwork
            type: object
            required:
                - vxlan_tag
                - subnet
                - ipv6
                - legacy
            properties:
                vxlan_tag:
                    type: integer
                    description: The vxlan tag added to each packet to help identify the network.
                subnet:
                    type: string
                    description: The subnet ID.
                ipv6:
                    allOf:
                        - description: The IPv6 interface.
                        - $ref: "#/components/schemas/IPNet"
                legacy:
                    anyOf:
                        - $ref: "#/components/schemas/LegacyNetwork"
                        - type: "null"
        EnvironmentDeploymentTags:
            title: EnvironmentDeploymentTags
            type: object
            description: |
                A map of custom tags to deployment versions. Allows for defining a custom, persistent tag with a changing version number. 
                For example, `dev -> v1.2.3-dev`. This is useful when dealing with DNS LINKED records, where you always want dev.example.com to point to the 
                `dev` version of your app within an environment, where you can continuously deploy and update it without needing to change the record. It is 
                even more useful when you have multiple LINKED records, and you update i.e. `prod`` tag to point to a new version, all records using the `prod` tag
                are switched at once.
            additionalProperties:
                $ref: "#/components/schemas/Version"
        ContainerImageSummary:
            title: ContainerImageSummary
            description: The Id of the image and information on if it is a service.
            type: object
            required:
                - id
                - service
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                service:
                    anyOf:
                        - type: string
                          description: If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
                          enum:
                              - discovery
                              - loadbalancer
                              - vpn
                        - type: "null"
        EnvironmentMeta:
            title: EnvironmentMeta
            type: object
            description: A list of meta fields that can be applied to this environment.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                containers:
                    type: array
                    items:
                        type: object
                        required:
                            - id
                            - name
                            - state
                            - image
                            - environment
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            name:
                                type: string
                                description: A user defined name for the container resource.
                            state:
                                $ref: "#/components/schemas/ContainerState"
                            image:
                                $ref: "#/components/schemas/ContainerImageSummary"
                            environment:
                                $ref: "#/components/schemas/ContainerEnvironmentSummary"
        Environment:
            title: Environment
            type: object
            description: Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://cycle.io/docs/platform/introduction-to-environments).
            required:
                - id
                - identifier
                - name
                - cluster
                - about
                - creator
                - hub_id
                - state
                - events
                - features
                - services
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this environment.
                name:
                    type: string
                    description: A user defined name for the environment resource.
                cluster:
                    type: string
                    description: The cluster this environment is associated with.
                about:
                    $ref: "#/components/schemas/EnvironmentAbout"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    $ref: "#/components/schemas/EnvironmentState"
                events:
                    title: EnvironmentEvents
                    type: object
                    description: A collection of timestamps for each event in the environment's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the environment was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the environment was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the environment was deleted.
                            $ref: "#/components/schemas/DateTime"
                features:
                    $ref: "#/components/schemas/EnvironmentFeatures"
                services:
                    $ref: "#/components/schemas/EnvironmentServices"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                private_network:
                    anyOf:
                        - $ref: "#/components/schemas/PrivateNetwork"
                        - type: "null"
                deployments:
                    type:
                        - object
                        - "null"
                    description: |
                        A map of custom tags to deployment versions.
                    required:
                        - tags
                    properties:
                        tags:
                            $ref: "#/components/schemas/EnvironmentDeploymentTags"
                meta:
                    $ref: "#/components/schemas/EnvironmentMeta"
        Permissions:
            title: Permissions
            description: Permissions information for an API Key
            type: object
            required:
                - all_environments
                - environments
            properties:
                all_environments:
                    type: boolean
                    description: A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments
                environments:
                    title: EnvironmentPermission
                    type: array
                    description: An environment ID and a boolean representing management configuration for an API key
                    items:
                        type: object
                        required:
                            - id
                            - manage
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            manage:
                                type: boolean
                                description: A boolean, where true represents the API keys ability to make changes to the environment components
        ApiKeyCreator:
            title: ApiKeyCreator
            description: An extended resource that has information on a Cycle hub API key
            type: object
            required:
                - id
                - name
                - creator
                - hub_id
                - permissions
                - capabilities
                - ips
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the API key
                hub_id:
                    $ref: "#/components/schemas/ID"
                secret:
                    type: string
                    description: The API key secret
                permissions:
                    $ref: "#/components/schemas/Permissions"
                capabilities:
                    type: object
                    description: The API key capabilities list
                    required:
                        - all
                        - specific
                    properties:
                        all:
                            type: boolean
                        specific:
                            type: array
                            items:
                                type: string
                ips:
                    type:
                        - array
                        - "null"
                    items:
                        type: string
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    $ref: "#/components/schemas/Events"
        CreatorInclude:
            title: CreatorInclude
            description: An identity that created a resource.
            type: object
            properties:
                accounts:
                    type: object
                    description: Included creators that are public accounts, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                employees:
                    type: object
                    description: Included creators that are employees of Cycle, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                visitors:
                    type: object
                    description: Included creators that are not Cycle accounts, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                environments:
                    type: object
                    description: Included creators that are Cycle environments (usually automatically created resources), keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Environment"
                api_keys:
                    type: object
                    description: Included creators that are Cycle API Keys, keyed by ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ApiKeyCreator"
        ExistingSource:
            title: ExistingSource
            type: object
            description: In a stack, specifies an image source ID from which Cycle will derive any values not specified in the stack file. This is useful for avoiding direct placement of credentials in a stack file, for example.
            properties:
                source_id:
                    $ref: "#/components/schemas/ID"
                    description: The ID of the image source this image should be built from.
        DockerHubOrigin:
            title: DockerHubOrigin
            type: object
            description: An image origin where the image is pulled from DockerHub.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-hub
                details:
                    type: object
                    required:
                        - target
                    properties:
                        existing:
                            anyOf:
                                - $ref: "#/components/schemas/ExistingSource"
                                - type: "null"
                        target:
                            type: string
                            description: The DockerHub target string. ex - `mysql:5.7`
                        username:
                            type: string
                            description: For authentication, a username.
                        token:
                            type: string
                            description: For authentication, a token.
        CredentialsHTTP:
            title: HTTPSourceCredentials
            type: object
            required:
                - type
                - credentials
            properties:
                type:
                    type: string
                    enum:
                        - http
                credentials:
                    type: object
                    description: Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
                    required:
                        - username
                        - password
                    properties:
                        username:
                            type: string
                            description: For authentication, the username.
                        password:
                            type: string
                            description: For authentication, the password.
        CredentialsSSH:
            title: SSHSourceCredentials
            type: object
            required:
                - type
                - credentials
            properties:
                type:
                    type: string
                    enum:
                        - ssh
                credentials:
                    type: object
                    description: Authentication credentials for the Dockerfile image source type when authenticating with SSH.
                    required:
                        - username
                        - passphrase
                        - private_key
                    properties:
                        username:
                            type: string
                            description: The username for the repo service, that is used to authenticate an ssh key.
                        passphrase:
                            type: string
                            description: The passphrase used for the key.
                        private_key:
                            type: string
                            description: A pem encoded private key.
        RepoType:
            title: RepoSourceType
            type: object
            description: Information about the repository.
            required:
                - url
            properties:
                url:
                    type: string
                    description: The URL of the repository.
                branch:
                    type: string
                    description: An optional branch arguement.  Default value is `master`.
                auth:
                    anyOf:
                        - type: "null"
                        - type: object
                          description: Authentication information for the repository.
                          discriminator:
                              propertyName: type
                              mapping:
                                  http: "#/components/schemas/CredentialsHTTP"
                                  ssh: "#/components/schemas/CredentialsSSH"
                          oneOf:
                              - $ref: "#/components/schemas/CredentialsHTTP"
                              - $ref: "#/components/schemas/CredentialsSSH"
                ref:
                    type:
                        - object
                        - "null"
                    description: Repository reference information.
                    required:
                        - type
                        - value
                    properties:
                        type:
                            type: string
                            description: The type of reference being used.
                        value:
                            type: string
                            description: The value for the given reference type.
        DockerfileCredentials:
            title: DockerfileCredentails
            description: An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
            type: array
            items:
                type: object
                description: Credentials object used for authentication of indirect resources such as private parent images.
                properties:
                    url:
                        type: string
                        description: The url the resource is located at.
                    username:
                        type: string
                        description: A username for authentication.
                    token:
                        type: string
                        description: A token for authentication.
        DockerFileOrigin:
            title: DockerFileOrigin
            type: object
            description: An image origin where the image is built from a Dockerfile located in a git repository.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-file
                details:
                    type: object
                    properties:
                        existing:
                            anyOf:
                                - $ref: "#/components/schemas/ExistingSource"
                                - type: "null"
                        repo:
                            anyOf:
                                - $ref: "#/components/schemas/RepoType"
                                - type: "null"
                        targz_url:
                            type:
                                - string
                                - "null"
                            description: An endpoint that serves the tar file.
                        context_dir:
                            type:
                                - string
                                - "null"
                            description: The path to the directory to use as the context when building the image.
                        build_file:
                            type:
                                - string
                                - "null"
                            description: The path to the Dockerfile to be used for buiding the image.
                        credentials:
                            anyOf:
                                - $ref: "#/components/schemas/DockerfileCredentials"
                                - type: "null"
        DockerRegistryOrigin:
            title: DockerRegistryOrigin
            type: object
            description: An image origin where the image is pulled from a private Docker registry.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - docker-registry
                details:
                    type: object
                    required:
                        - target
                        - url
                    properties:
                        existing:
                            $ref: "#/components/schemas/ExistingSource"
                        target:
                            type: string
                            description: The image name on the registry.
                        url:
                            type: string
                            description: The url of the remote registry.
                        username:
                            type: string
                            description: For authentication, a username.
                        token:
                            type: string
                            description: For authentication, a token.
                        password:
                            type: string
                            description: For authentication, a password.
        RegistryAuthUser:
            title: RegistryAuthUser
            description: User/token based credentials for authentication to a third-party image source.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - user
                details:
                    type: object
                    properties:
                        username:
                            type: string
                        token:
                            type: string
        RegistryAuthProvider:
            title: RegistryAuthProvider
            description: Credentials for authentication to a provider-native image registry, such as AWS ECR.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - provider
                details:
                    type: object
                    required:
                        - flavor
                        - credentials
                    properties:
                        flavor:
                            type: string
                            enum:
                                - ecr
                        credentials:
                            title: RegistryAuthProviderCredentials
                            type: object
                            properties:
                                region:
                                    type: string
                                namespace:
                                    type: string
                                api_key:
                                    type: string
                                secret:
                                    type: string
                                subscription_id:
                                    type: string
                                client_id:
                                    type: string
                                config:
                                    type: string
                                    description: A base64'd string of additional configuration options.
        RegistryAuthWebhook:
            title: RegistryAuthWebhook
            description: Webhook-based authentication to the provided URL. This webhook expects to receive a base-64 string that when decoded is in the format `username:password`
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - webhook
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
        RegistryAuth:
            title: RegistryAuth
            type: object
            description: Authentication details for a third party image registry/source.
            discriminator:
                propertyName: type
                mapping:
                    user: "#/components/schemas/RegistryAuthUser"
                    provider: "#/components/schemas/RegistryAuthProvider"
                    webhook: "#/components/schemas/RegistryAuthWebhook"
            oneOf:
                - $ref: "#/components/schemas/RegistryAuthUser"
                - $ref: "#/components/schemas/RegistryAuthProvider"
                - $ref: "#/components/schemas/RegistryAuthWebhook"
        OciRegistryOrigin:
            title: OciRegistryOrigin
            type: object
            description: An image origin that pulls images fro an OCI-compatible registry. Also used for provider-native registries, such as AWS ECR.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - oci-registry
                details:
                    type: object
                    required:
                        - target
                        - url
                    properties:
                        existing:
                            $ref: "#/components/schemas/ExistingSource"
                        target:
                            type: string
                            description: The image name on the registry.
                        url:
                            type: string
                            description: The url of the remote registry.
                        auth:
                            oneOf:
                                - $ref: "#/components/schemas/RegistryAuth"
                                - type: "null"
        CycleUploadOrigin:
            title: CycleUploadOrigin
            type: object
            description: |
                An image origin where the image is pushed directly to the factory, bypassing the need for a registry or external source.

                In order to utilize this image origin type, a tar file of an OCI compliant image will need to be generated and pushed directly to the factory. The authentication token is generated when this image is created, and expires at the provided time.
                Once you have a token, it can be uploaded as multipart form data under the key `file.tar`, directly to the factory at `https://factory.cycle.io:9414/v1/images/<IMAGE ID>/upload?hub-id=<HUB ID>&token=<TOKEN>`.
            properties:
                type:
                    type: string
                    enum:
                        - cycle-upload
                details:
                    type: object
                    required:
                        - expires
                        - token
                    properties:
                        expires:
                            $ref: "#/components/schemas/DateTime"
                            description: The date-time at which the authorization token for uploading this image expires.
                        token:
                            type: string
                            description: The token that is required by the factory to accept an upload for this image.
        CycleSourceOrigin:
            title: CycleSourceOrigin
            type: object
            description: |
                An image origin that references an image source on Cycle. 

                This origin will never be embedded in an image source. It is for use in stacks, describing an image which is already a part of an image source on Cycle.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cycle-source
                details:
                    type: object
                    required:
                        - source_id
                    properties:
                        source_id:
                            $ref: "#/components/schemas/ID"
                            description: The ID referencing the image source where this image originated.
        NoneOrigin:
            title: NoneOrigin
            type: object
            description: An empty origin. No details are provided for this image.
            required:
                - type
            properties:
                type:
                    type: string
                    enum:
                        - none
        ImageOrigin:
            title: ImageOrigin
            type: object
            description: The origin of the image.
            discriminator:
                propertyName: type
                mapping:
                    docker-hub: "#/components/schemas/DockerHubOrigin"
                    docker-file: "#/components/schemas/DockerFileOrigin"
                    docker-registry: "#/components/schemas/DockerRegistryOrigin"
                    oci-registry: "#/components/schemas/OciRegistryOrigin"
                    cycle-upload: "#/components/schemas/CycleUploadOrigin"
                    cycle-source: "#/components/schemas/CycleSourceOrigin"
                    none: "#/components/schemas/NoneOrigin"
            oneOf:
                - $ref: "#/components/schemas/DockerHubOrigin"
                - $ref: "#/components/schemas/DockerFileOrigin"
                - $ref: "#/components/schemas/DockerRegistryOrigin"
                - $ref: "#/components/schemas/OciRegistryOrigin"
                - $ref: "#/components/schemas/CycleUploadOrigin"
                - $ref: "#/components/schemas/CycleSourceOrigin"
                - $ref: "#/components/schemas/NoneOrigin"
        StackImageSourceType:
            title: StackImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - stack-build
                details:
                    type: object
                    required:
                        - id
                        - stack_id
                        - containers
                        - origin
                    properties:
                        id:
                            type: string
                        stack_id:
                            type: string
                        containers:
                            type: array
                            items:
                                $ref: "#/components/schemas/Identifier"
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        DirectImageSourceType:
            title: DirectImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - direct
                details:
                    type: object
                    required:
                        - id
                        - origin
                    properties:
                        id:
                            type: string
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        BucketImageSourceType:
            title: BucketImageSource
            type: object
            required:
                - id
                - origin
            properties:
                type:
                    type: string
                    enum:
                        - bucket
                details:
                    type: object
                    required:
                        - id
                        - origin
                    properties:
                        id:
                            type: string
                        origin:
                            $ref: "#/components/schemas/ImageOrigin"
                override:
                    type: object
                    properties:
                        target:
                            type: string
                        targz_url:
                            type: string
        ImageState:
            title: ImageState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the image.
                          type: string
                          enum:
                              - new
                              - uploading
                              - downloading
                              - building
                              - verifying
                              - saving
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ImageMeta:
            title: ImageMeta
            type: object
            description: A list of meta fields that can be applied to the image.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
        Image:
            title: Image
            type: object
            description: An image is a point in time build on a given image source, and what is distributed by Cycle to run containers.
            required:
                - id
                - hub_id
                - name
                - size
                - backend
                - requires
                - config
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A user defined name for the image.
                size:
                    type: integer
                    description: The image size in bytes.
                about:
                    type: object
                    description: An object that holds information about the image.
                    required:
                        - description
                    properties:
                        description:
                            type:
                                - string
                                - "null"
                            description: A description of the image.
                backend:
                    type: object
                    description: Describes where the image is hosted.
                    required:
                        - provider
                        - size
                        - file_name
                        - file_id
                    properties:
                        provider:
                            type: string
                            description: The provider where this image is hosted.
                        size:
                            type: integer
                            description: The size of the image in bytes.
                        file_name:
                            type: string
                            description: A file name for the image, used by the platform.
                        file_id:
                            type: string
                            description: A file id for the image, used by the platform.
                requires:
                    type: object
                    description: Any restrictions or requirements needed to run this image as a container.
                    properties:
                        nvidia_gpu:
                            type: boolean
                build:
                    type:
                        - object
                        - "null"
                    description: Any additional build details for this image
                    properties:
                        args:
                            type: object
                            description: Arguments to pass to the builder during a build of this image.
                            additionalProperties:
                                type: string
                builder:
                    type:
                        - object
                        - "null"
                    description: Configuration options regarding the builder used to create/import this Image.
                    required:
                        - integration_id
                    properties:
                        integration_id:
                            description: The ID of the Integration used to do the build.
                            $ref: "#/components/schemas/ID"
                config:
                    type: object
                    description: Configuration settings for the image.
                    required:
                        - user
                        - ports
                        - env
                        - labels
                        - command
                        - entrypoint
                        - volumes
                        - workdir
                        - signal_stop
                    properties:
                        user:
                            type: string
                            description: The linux user this image runs its processes as.
                        ports:
                            description: The port settings for the image.
                            type: array
                            items:
                                type: object
                                required:
                                    - host
                                    - container
                                    - type
                                properties:
                                    host:
                                        description: Host Port
                                        type: number
                                    container:
                                        type: number
                                    type:
                                        type: string
                        env:
                            type: object
                            description: Image defined environment variables for the image.
                            additionalProperties:
                                type: string
                        labels:
                            type: object
                            description: Image labels.
                            additionalProperties:
                                type: string
                        command:
                            description: The CMD array used to start the container.
                            type: array
                            items:
                                type: string
                        entrypoint:
                            description: An entrypoint command.
                            type: array
                            items:
                                type: string
                        volumes:
                            description: Volumes information for the given image.
                            type: array
                            items:
                                type: object
                                properties:
                                    path:
                                        type: string
                                        description: The path where the volume is mounted.
                                    mode:
                                        type: string
                                        description: Permission settings for the volume.
                                        enum:
                                            - ro
                                            - rw
                        workdir:
                            type: string
                            description: The working directory for the image.
                        signal_stop:
                            type: string
                            description: A set command to be run if a signal is called.
                source:
                    x-ogen-name: ImageSourceDetails
                    type: object
                    discriminator:
                        propertyName: type
                        mapping:
                            stack-build: "#/components/schemas/StackImageSourceType"
                            direct: "#/components/schemas/DirectImageSourceType"
                            bucket: "#/components/schemas/BucketImageSourceType"
                    oneOf:
                        - $ref: "#/components/schemas/DirectImageSourceType"
                        - $ref: "#/components/schemas/StackImageSourceType"
                        - $ref: "#/components/schemas/BucketImageSourceType"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                factory:
                    type:
                        - object
                        - "null"
                    description: Information about the Factory service that built/imported the Image into Cycle.
                    required:
                        - node_id
                        - cached
                        - acknowledged
                    properties:
                        node_id:
                            type: string
                            description: The node holding the factory service that was responsible for building the image.
                        cached:
                            $ref: "#/components/schemas/DateTime"
                            description: A date timestamp for when the node cached the image.
                        acknowledged:
                            $ref: "#/components/schemas/DateTime"
                            description: A date timestamp for when the node acknowledged the image import job.
                state:
                    $ref: "#/components/schemas/ImageState"
                events:
                    title: ImageEvents
                    type: object
                    description: A collection of timestamps for each event in the image's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ImageMeta"
        ImagesIncludes:
            title: ImageIncludes
            description: A resource associated with an image.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Image"
        StackVariable:
            title: StackVariable
            description: A variable specified in a stack spec.
            pattern: \"?{{(\$)?([a-z0-9\-]+)}}\"?
            type: string
            examples:
                - "{{$stack-variable}}"
        StackSpecScopedVariableUrlSource:
            title: StackSpecScopedVariableUrlSource
            type: object
            description: A variable who's value is fetched from a URL when the container starts.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of scoped variable.
                    enum:
                        - url
                details:
                    oneOf:
                        - type: object
                          required:
                              - url
                              - headers
                              - auth_token_url
                          properties:
                              url:
                                  description: The URL to call to fetch the value.
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              headers:
                                  description: Additional headers that can be attached to the URL request. Useful for adding meta-data to third-party services.
                                  oneOf:
                                      - type: object
                                        additionalProperties: {}
                                      - $ref: "#/components/schemas/StackVariable"
                              auth_token_url:
                                  description: A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret.
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecScopedVariableRawSource:
            title: StackSpecScopedVariableRawSource
            type: object
            description: A variable with a hard-coded value.
            required:
                - type
                - details
            properties:
                type:
                    description: The type of scoped variable.
                    type: string
                    enum:
                        - raw
                details:
                    oneOf:
                        - type: object
                          required:
                              - value
                              - blob
                          properties:
                              value:
                                  description: The value of the variable.
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              blob:
                                  description: A boolean where true represents the text the user is entering will be multi line.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              secret:
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            iv:
                                                description: A string describing the IV Hex associated with the encryption of the variable.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                            hint:
                                                description: A user specified hint that will suggest what the encryption key might be
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecScopedVariable:
            title: StackSpecScopedVariable
            type: object
            required:
                - identifier
                - scope
                - access
            properties:
                identifier:
                    oneOf:
                        - $ref: "#/components/schemas/Identifier"
                        - $ref: "#/components/schemas/StackVariable"
                scope:
                    oneOf:
                        - type: object
                          required:
                              - containers
                          properties:
                              containers:
                                  description: Describes the containers that have access to this scoped variable.
                                  oneOf:
                                      - type: object
                                        required:
                                            - global
                                        properties:
                                            global:
                                                description: If true, all containers in the environment will have access to this variable.
                                                oneOf:
                                                    - type: boolean
                                                    - $ref: "#/components/schemas/StackVariable"
                                            ids:
                                                description: A list of container IDs that are granted access to this variable.
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                            identifiers:
                                                description: A list of container identifiers that are granted access to this variable.
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          $ref: "#/components/schemas/Identifier"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                access:
                    oneOf:
                        - type: object
                          properties:
                              env_variable:
                                  description: Grants access to this variable from within a container as an environment variable.
                                  oneOf:
                                      - type: object
                                        required:
                                            - key
                                        properties:
                                            key:
                                                description: The environment variable inside the container that stores the value of the variable.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              internal_api:
                                  description: Grants access to this variable over the Internal API.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            duration:
                                                description: Sets the duration that this variable can be accessed over the Internal API, after container start. Provides additional security as sensitive data can only be accessed for a limited time.
                                                anyOf:
                                                    - $ref: "#/components/schemas/Duration"
                                                    - $ref: "#/components/schemas/StackVariable"
                                                    - type: "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              file:
                                  description: Grants access to this variable as a file inside the container.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        required:
                                            - decode
                                            - path
                                        x-ogen-properties:
                                            decode:
                                                name: DecodeBase64
                                        properties:
                                            decode:
                                                description: When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before writing it to the file inside the container.
                                                oneOf:
                                                    - type: boolean
                                                    - $ref: "#/components/schemas/StackVariable"
                                            path:
                                                description: The absolute path to write the variable to (including file name). If `null`, it will be written to `/var/run/cycle/variables/{variable-identifier}`.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                                examples:
                                                    - /var/run/cycle/variables/<myVariable>
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                source:
                    anyOf:
                        - type: object
                          description: |
                              Describes the source/value of the variable.
                              - **raw**: Directly set the value of the variable in the stack. - **url**: Cycle will fetch the variable content from a remote source when the container starts.
                          discriminator:
                              propertyName: type
                              mapping:
                                  url: "#/components/schemas/StackSpecScopedVariableUrlSource"
                                  raw: "#/components/schemas/StackSpecScopedVariableRawSource"
                          oneOf:
                              - $ref: "#/components/schemas/StackSpecScopedVariableUrlSource"
                              - $ref: "#/components/schemas/StackSpecScopedVariableRawSource"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecImageOrigin:
            title: StackSpecImageOrigin
            type: object
            description: The origin of the image.
            discriminator:
                propertyName: type
                mapping:
                    docker-hub: "#/components/schemas/DockerHubOrigin"
                    docker-file: "#/components/schemas/DockerFileOrigin"
                    docker-registry: "#/components/schemas/DockerRegistryOrigin"
                    oci-registry: "#/components/schemas/OciRegistryOrigin"
                    cycle-source: "#/components/schemas/CycleSourceOrigin"
            oneOf:
                - $ref: "#/components/schemas/DockerHubOrigin"
                - $ref: "#/components/schemas/DockerFileOrigin"
                - $ref: "#/components/schemas/DockerRegistryOrigin"
                - $ref: "#/components/schemas/OciRegistryOrigin"
                - $ref: "#/components/schemas/CycleSourceOrigin"
        StackSpecContainerImage:
            title: StackSpecContainerImage
            type: object
            required:
                - origin
            properties:
                name:
                    description: The human-readable name of this image.
                    oneOf:
                        - type:
                              - string
                              - "null"
                        - $ref: "#/components/schemas/StackVariable"
                origin:
                    description: Instructions on how to fetch or build this image.
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecImageOrigin"
                        - $ref: "#/components/schemas/StackVariable"
                build:
                    description: Additional details applied when building an image.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - args
                          properties:
                              args:
                                  description: A map of build arguments applied to the image at build time.
                                  oneOf:
                                      - type: object
                                        additionalProperties:
                                            type: string
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                builder:
                    description: A specific builder to use. By default, Cycle uses its factory service and a standard build command to build images, but this can be enhanced by using an image builder integration.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - integration_id
                          properties:
                              integration_id:
                                  description: The ID of the integration to use when building the image. The integration must support image building to be compatible.
                                  $ref: "#/components/schemas/HybridIdentifier"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerConfigNetwork:
            title: StackSpecContainerConfigNetwork
            description: Stack configuration options related to the container's network.
            type: object
            required:
                - public
                - hostname
            properties:
                public:
                    description: The level of public network access this container should have.
                    oneOf:
                        - type: string
                          enum:
                              - enable
                              - disable
                              - egress-only
                        - $ref: "#/components/schemas/StackVariable"
                hostname:
                    description: The hostname of the container. This is how it can be referenced by other containers in the same environment.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                ports:
                    description: A list of port mappings on this container.
                    oneOf:
                        - type: array
                          items:
                              type: string
                          examples:
                              - "80:80"
                              - "443:80"
                              - "3000"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerConfigDeploy:
            title: StackSpecContainerConfigDeploy
            type: object
            description: Stack configuration options related to how the container behaves over its lifecycle (startup, shutdown, health checks, etc).
            required:
                - instances
            properties:
                instances:
                    description: The number of desired instances to deploy.
                    oneOf:
                        - type: integer
                        - $ref: "#/components/schemas/StackVariable"
                strategy:
                    description: |
                        The strategy Cycle will apply when deploying instances of this container.

                        - ** resource-density **: Cycle will distribute instances across servers to maintain balanced resource usage.
                        - ** high-availability **: Cycle will deploy instances over servers with an emphasis on geographic and physical separation
                        - ** first-available **: Cycle will deploy one instance to every node that matches the specified criteria. (default)
                        - ** node **: Cycle will deploy one instance to every node that matches the specified criteria.
                        - ** edge **: Cycle will prioritize geographic distribution of instances.
                        - ** function **: Every ingress request/connection receives its own instance. 
                        - ** manual **: Cycle will not make any decisions on where instances are deployed. Instead, instances must be deployed manually using the portal or API.
                    oneOf:
                        - type:
                              - string
                              - "null"
                          enum:
                              - resource-density
                              - manual
                              - high-availability
                              - first-available
                              - node
                              - edge
                              - function
                          default: first-available
                        - $ref: "#/components/schemas/StackVariable"
                function:
                    description: Configuration options for containers using the 'function' deployment strategy.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              max_pool_size:
                                  description: The maximum number of instances that Cycle can pre-allocate (includes auto-scaled instances).
                                  oneOf:
                                      - type:
                                            - integer
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              max_shard_concurrency:
                                  description: For each shard (scheduler), the maximum number of tasks it can run in parallel.
                                  oneOf:
                                      - type:
                                            - integer
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              max_runtime:
                                  description: The maximum amount of time a function instance can run before timing out.
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              max_queue_time:
                                  description: The maximum amount of time Cycle will wait for an instance to be available.
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                        - $ref: "#/components/schemas/StackVariable"
                stateful:
                    description: Configuration options for stateful containers.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - options
                          properties:
                              options:
                                  description: Stateful container options.
                                  type:
                                      - object
                                      - "null"
                                  properties:
                                      use_base_hostname:
                                          description: When enabled, instances will utilize stateless base hostnames instead of being prefixed with a unique ID.
                                          type:
                                              - boolean
                                              - "null"
                        - $ref: "#/components/schemas/StackVariable"
                constraints:
                    description: Configuration options that provide the ability to set restrictions on which nodes instances of this container are able to be deployed to. (i.e. if you have a GPU container, it should only go on nodes with a GPU).
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              node:
                                  type:
                                      - object
                                      - "null"
                                  required:
                                      - tags
                                  properties:
                                      tags:
                                          description: Tags applied to a node. Cycle generates some automatically, but additional, custom tags can be applied on a per-node basis.
                                          oneOf:
                                              - type: object
                                                properties:
                                                    any:
                                                        description: If a node has at least one of these tags, it is considered a valid deployment target for this container.
                                                        oneOf:
                                                            - type: array
                                                              items:
                                                                  type: string
                                                            - $ref: "#/components/schemas/StackVariable"
                                                    all:
                                                        description: A node must have **ALL** of these tags to be considered a valid deployment target for this container.
                                                        oneOf:
                                                            - type: array
                                                              items:
                                                                  type: string
                                                            - $ref: "#/components/schemas/StackVariable"
                                              - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                shutdown:
                    description: Configuration options for how this container behaves during shutdown.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              graceful_timeout:
                                  description: How long the platform will wait for a container to stop gracefully.
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              signals:
                                  oneOf:
                                      - type: array
                                        description: Signals that should be sent to the container on shutdown.
                                        items:
                                            type: string
                                            enum:
                                                - SIGTERM
                                                - SIGINT
                                                - SIGUSR1
                                                - SIGUSR2
                                                - SIGHUB
                                                - SIGKILL
                                                - SIGQUIT
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                startup:
                    description: Configuration options for how this container behaves during startup.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              delay:
                                  description: How long the platform will wait before sending the start signal to the given container.
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                        - $ref: "#/components/schemas/StackVariable"
                update:
                    description: Configurations for how the container behaves during updates.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              stagger:
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                  description: When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here).
                        - $ref: "#/components/schemas/StackVariable"
                restart:
                    description: Configuration options for how Cycle should handle restarting this container (i.e. in case the process inside the container dies).
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - condition
                              - delay
                              - max_attempts
                          properties:
                              condition:
                                  description: Under what circumstances Cycle should try to restart this container.
                                  oneOf:
                                      - type: string
                                        enum:
                                            - always
                                            - never
                                            - failure
                                      - $ref: "#/components/schemas/StackVariable"
                              delay:
                                  description: How long the platform will wait between restart attempts.
                                  oneOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                              max_attempts:
                                  description: The maximum number of restart attempts Cycle will make.
                                  oneOf:
                                      - type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                health_check:
                    description: Configuration options for automated container health checks.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - command
                              - retries
                              - interval
                              - timeout
                              - restart
                          properties:
                              command:
                                  description: |
                                      The command or script to run to verify the health of the container. This script is run inside the container by Cycle.
                                      This command accepts two types of entries:
                                      - The first is a reference to a script that already lives in the container filesystem. This can be defined by giving the full path to the script as the value.   - The second format is an inline script.  If you need the code to execute within a shell, wrap the commands in escaped quotes like this `"\"curl -s -o /dev/console -w \"%{http_code}\" http://localhost:3000/_health | grep '200'  && exit 0 || exit 1\""`.  Do not use the `/bin/sh -c <commands>` format, this will not be accepted.
                                  oneOf:
                                      - type: string
                                        examples:
                                            - /bin/sh healthcheck.sh
                                      - $ref: "#/components/schemas/StackVariable"
                              retries:
                                  description: The number of times to retry the command before marking an instance unhealthy.
                                  oneOf:
                                      - type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                              interval:
                                  description: How long to wait between running health checks.
                                  oneOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                              timeout:
                                  description: How long before a health check attempt times out.
                                  oneOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                              restart:
                                  description: A boolean where true represents the desire for the container to restart if any instance is unhealthy.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              delay:
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                  description: How long to wait after a container start event before running health checks.
                        - $ref: "#/components/schemas/StackVariable"
                telemetry:
                    description: Configuration options for how the instance telemetry (CPU usage, etc) is handled.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - disable
                          properties:
                              retention:
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                  description: How long telemetry data should be retained.
                              interval:
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                  description: The duration between samples.
                              webhook:
                                  description: A URL where Cycle will send telemetry data to. The payload will be an instance resource snapshot.
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              disable:
                                  description: If true, Cycle will not aggregate telemetry for this container's instances.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerScaleThresholdRam:
            title: StackSpecContainerScaleThresholdRam
            type: object
            description: Describes the RAM threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - ram
                details:
                    type: object
                    required:
                        - usage
                    properties:
                        usage:
                            type: string
                            description: The target average RAM usage of all instances of this container. Going above this threshold will trigger a scaling event. This threshold must be greater than 25MB.
                            examples:
                                - 2G
                                - 25MB
        StackSpecContainerScaleThresholdCpu:
            title: StackSpecContainerScaleThresholdCpu
            type: object
            description: Describes the CPU threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - cpu
                details:
                    type: object
                    required:
                        - utilization
                    properties:
                        utilization:
                            type: integer
        StackSpecContainerScaleThresholdCustom:
            title: StackSpecContainerScaleThresholdCustom
            type: object
            description: A custom threshold for defining a scaling event.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - custom
                details:
                    type: object
                    required:
                        - webhook
                    properties:
                        webhook:
                            $ref: "#/components/schemas/WebhookURL"
        StackSpecContainerScaleThresholdNetworkConnections:
            title: StackSpecContainerScaleThresholdNetworkConnections
            type: object
            description: Describes the network connections threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-connections
                details:
                    type: object
                    required:
                        - connections_total
                    properties:
                        connections_total:
                            type: integer
        StackSpecContainerScaleThresholdNetworkRequests:
            title: StackSpecContainerScaleThresholdNetworkRequests
            type: object
            description: Describes the network requests threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-requests
                details:
                    type: object
                    required:
                        - requests_total
                    properties:
                        requests_total:
                            type: integer
        StackSpecContainerScaleThresholdNetworkThroughput:
            title: StackSpecContainerScaleThresholdNetworkThroughput
            type: object
            description: Describes the network throughput threshold at which scaling will occur.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - network-throughput
                details:
                    type: object
                    required:
                        - private
                        - bandwidth
                    properties:
                        private:
                            type: boolean
                        bandwidth:
                            type: string
                            description: The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event.
                            examples:
                                - 1G
                                - 50M
        StackSpecContainerScaleThreshold:
            title: StackSpecContainerScaleThreshold
            type: object
            description: Discriminated union describing the different types of scaling threshold and their respective details
            discriminator:
                propertyName: type
                mapping:
                    ram: "#/components/schemas/StackSpecContainerScaleThresholdRam"
                    cpu: "#/components/schemas/StackSpecContainerScaleThresholdCpu"
                    custom: "#/components/schemas/StackSpecContainerScaleThresholdCustom"
                    network-connections: "#/components/schemas/StackSpecContainerScaleThresholdNetworkConnections"
                    network-requests: "#/components/schemas/StackSpecContainerScaleThresholdNetworkRequests"
                    network-throughput: "#/components/schemas/StackSpecContainerScaleThresholdNetworkThroughput"
            oneOf:
                - $ref: "#/components/schemas/StackSpecContainerScaleThresholdRam"
                - $ref: "#/components/schemas/StackSpecContainerScaleThresholdCpu"
                - $ref: "#/components/schemas/StackSpecContainerScaleThresholdNetworkConnections"
                - $ref: "#/components/schemas/StackSpecContainerScaleThresholdNetworkRequests"
                - $ref: "#/components/schemas/StackSpecContainerScaleThresholdNetworkThroughput"
        StackSpecContainerConfigScaling:
            title: StackSpecContainerConfigScaling
            type: object
            description: Stack configuration options for auto-scaling.
            required:
                - autoscale_group
                - instances
                - window
                - thresholds
            properties:
                autoscale_group:
                    anyOf:
                        - $ref: "#/components/schemas/Identifier"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                    description: The identifier of the auto-scaling group assigned to this container. The auto-scale group determines which infrastructure this container can spin up if it needs more resources to meet demand. Setting it to `null` will limit auto-scaling to only instances.
                instances:
                    oneOf:
                        - type: object
                          description: Describes the criteria for deploying new instances when an auto-scale criteria is met.
                          required:
                              - max
                              - max_server
                              - min_ttl
                          properties:
                              max:
                                  description: Maximum additional instances the auto-scaler will run at any time.
                                  oneOf:
                                      - type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                              max_server:
                                  description: Minimum number of instances per server.
                                  oneOf:
                                      - type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                              min_ttl:
                                  description: Minimum amount of time an instance will live.
                                  oneOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                window:
                    description: Duration in which the auto-scaler will watch for changes.
                    oneOf:
                        - $ref: "#/components/schemas/Duration"
                        - $ref: "#/components/schemas/StackVariable"
                thresholds:
                    description: An array of rules that dictate when a scaling event will be triggered.
                    oneOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/StackSpecContainerScaleThreshold"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerConfigRuntime:
            title: StackSpecContainerConfigRuntime
            description: Configuration options related to how the container behaves while it is running (environment variables, command overrides, kernel capabilities, etc. )
            type: object
            properties:
                workdir:
                    description: The working directory to execute the command in.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                command:
                    description: The command to execute when this container starts. Will override the default specified in the container.
                    oneOf:
                        - type: object
                          properties:
                              path:
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              args:
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                environment_vars:
                    description: A map of environment variables that will be injected into the container.
                    oneOf:
                        - type: object
                          additionalProperties:
                              oneOf:
                                  - type: string
                                  - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                namespaces:
                    description: Container namespaces to apply. By default, all are applied. Removing/changing this can have security implications.
                    oneOf:
                        - type: array
                          items:
                              type: string
                              enum:
                                  - ipc
                                  - pid
                                  - uts
                                  - network
                                  - mount
                                  - user
                                  - cgroup
                        - $ref: "#/components/schemas/StackVariable"
                sysctl:
                    description: Sysctl options to apply.
                    oneOf:
                        - type: object
                          additionalProperties:
                              oneOf:
                                  - type: string
                                  - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                rlimits:
                    description: RLIMIT options to apply.
                    oneOf:
                        - type: object
                          additionalProperties:
                              type: object
                              required:
                                  - hard
                                  - soft
                              properties:
                                  hard:
                                      oneOf:
                                          - type: integer
                                          - $ref: "#/components/schemas/StackVariable"
                                  soft:
                                      oneOf:
                                          - type: integer
                                          - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                seccomp:
                    description: Configuration options for seccomp. Cycle enables seccomp by default.
                    oneOf:
                        - type: object
                          required:
                              - disable
                              - rules
                          properties:
                              disable:
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              rules:
                                  oneOf:
                                      - type: array
                                        items:
                                            oneOf:
                                                - type: object
                                                  required:
                                                      - capabilities
                                                      - syscall
                                                  properties:
                                                      capabilities:
                                                          oneOf:
                                                              - type: object
                                                                required:
                                                                    - includes
                                                                    - excludes
                                                                properties:
                                                                    includes:
                                                                        oneOf:
                                                                            - type: string
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                                    excludes:
                                                                        oneOf:
                                                                            - type: string
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                              - $ref: "#/components/schemas/StackVariable"
                                                      syscall:
                                                          oneOf:
                                                              - type: object
                                                                required:
                                                                    - names
                                                                    - action
                                                                properties:
                                                                    names:
                                                                        type: array
                                                                        items:
                                                                            type: string
                                                                    action:
                                                                        type: string
                                                                        enum:
                                                                            - SCMP_ACT_KILL
                                                                            - SCMP_ACT_KILL_PROCESS
                                                                            - SCMP_ACT_KILL_THREAD
                                                                            - SCMP_ACT_TRAP
                                                                            - SCMP_ACT_ERRNO
                                                                            - SCMP_ACT_TRACE
                                                                            - SCMP_ACT_ALLOW
                                                                            - SCMP_ACT_LOG
                                                                            - SCMP_ACT_NOTIFY
                                                                    errnoRet:
                                                                        type: integer
                                                                    args:
                                                                        type: array
                                                                        items:
                                                                            type: object
                                                                            required:
                                                                                - index
                                                                                - value
                                                                                - op
                                                                            properties:
                                                                                index:
                                                                                    type: integer
                                                                                value:
                                                                                    type: integer
                                                                                valuetwo:
                                                                                    type: integer
                                                                                op:
                                                                                    type: string
                                                                                    enum:
                                                                                        - SCMP_CMP_NE
                                                                                        - SCMP_CMP_LT
                                                                                        - SCMP_CMP_LE
                                                                                        - SCMP_CMP_EQ
                                                                                        - SCMP_CMP_GE
                                                                                        - SCMP_CMP_GT
                                                                                        - SCMP_CMP_MASKED_EQ
                                                              - $ref: "#/components/schemas/StackVariable"
                                                - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                host:
                    description: Configuration options regarding the underlying host.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              expose_proc:
                                  description: If true, Cycle will mount the `/proc` directory into the container, giving it access to the host metrics. This is useful if you're running i.e. a monitoring agent.
                                  oneOf:
                                      - type:
                                            - boolean
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                privileged:
                    description: If true, the container process will run in fully-privileged mode. **WARNING** This is considered insecure, and should only be done if you know what you're doing.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                capabilities:
                    description: Additional Linux kernel capabilities to apply to this container process.
                    oneOf:
                        - type: array
                          items:
                              type: string
                              enum:
                                  - CAP_CHOWN
                                  - CAP_FSETID
                                  - CAP_DAC_OVERRIDE
                                  - CAP_FOWNER
                                  - CAP_SETFCAP
                                  - CAP_SETGID
                                  - CAP_SETUID
                                  - CAP_KILL
                                  - CAP_MKNOD
                                  - CAP_NET_BIND_SERVICE
                                  - CAP_NET_RAW
                                  - CAP_AUDIT_WRITE
                                  - CAP_SYS_CHROOT
                                  - CAP_SETPCAP
                                  - CAP_DAC_READ_SEARCH
                                  - CAP_NET_ADMIN
                                  - CAP_NET_BROADCAST
                                  - CAP_SYS_ADMIN
                                  - CAP_SYS_MODULE
                                  - CAP_SYS_NICE
                                  - CAP_SYS_PACCT
                                  - CAP_SYS_PTRACE
                                  - CAP_SYS_RAWIO
                                  - CAP_SYS_RESOURCE
                                  - CAP_SYS_BOOT
                                  - CAP_SYS_TIME
                                  - CAP_SYS_TTY_CONFIG
                                  - CAP_SYSLOG
                                  - CAP_AUDIT_CONTROL
                                  - CAP_AUDIT_READ
                                  - CAP_IPC_LOCK
                                  - CAP_IPC_OWNER
                                  - CAP_LINUX_IMMUTABLE
                                  - CAP_MAC_ADMIN
                                  - CAP_MAC_OVERRIDE
                                  - CAP_BLOCK_SUSPEND
                                  - CAP_LEASE
                                  - CAP_WAKE_ALARM
                        - $ref: "#/components/schemas/StackVariable"
                rootfs:
                    description: Configuration options for the root filesystem.
                    oneOf:
                        - type: object
                          required:
                              - readonly
                          properties:
                              readonly:
                                  description: If true, the container's filesystem will be read-only.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerConfigResources:
            title: StackSpecContainerConfigResources
            description: Configuration options for container resource limits and reserves.
            type: object
            required:
                - cpu
                - ram
            properties:
                cpu:
                    oneOf:
                        - type: object
                          properties:
                              shares:
                                  oneOf:
                                      - type: object
                                        required:
                                            - limit
                                            - reserve
                                        properties:
                                            limit:
                                                oneOf:
                                                    - type: integer
                                                    - $ref: "#/components/schemas/StackVariable"
                                            reserve:
                                                oneOf:
                                                    - type: integer
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              cpus:
                                  type: string
                        - $ref: "#/components/schemas/StackVariable"
                ram:
                    oneOf:
                        - type: object
                          properties:
                              limit:
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              reserve:
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              swappiness:
                                  oneOf:
                                      - type: number
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerConfigIntegrations:
            title: StackSpecContainerConfigIntegrations
            type: object
            description: Configuration options for additional integrations/features that Cycle provides.
            properties:
                webhooks:
                    description: Enable additional webhooks that Cycle will call out to during the course of a container's lifetime. All webhooks send a payload as an object containing the instance, container, server, and environment IDs.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              events:
                                  description: Webhooks that are triggered during a container event.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            deploy:
                                                description: Cycle will call this endpoint when the container is deployed.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            start:
                                                description: Cycle will call this endpoint when the container is started.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            stop:
                                                description: Cycle will call this endpoint when the container is stopped.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              config:
                                  description: The webhook to hit when the container's configuration is changed.
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                lets_encrypt:
                    description: When enabled, this integration will configure Let's Encrypt certificates that will be injected into the container at runtime. The certificates will be managed by the platform and renewed automatically.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          properties:
                              certificate_path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              chain_path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              key_path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              bundle_path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              additional_certs_path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                files:
                    description: When enabled, Cycle will fetch and inject remote files into the container at the specified destination during runtime.
                    oneOf:
                        - type:
                              - array
                              - "null"
                          items:
                              type: object
                              required:
                                  - source
                                  - destination
                              properties:
                                  source:
                                      oneOf:
                                          - $ref: "#/components/schemas/StackVariable"
                                          - type: string
                                  destination:
                                      oneOf:
                                          - type: string
                                          - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                backups:
                    description: When enabled, Cycle will automatically manage backups of this container. This is only available for stateful containers.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - destination
                              - backup
                              - restore
                              - retention
                          properties:
                              integration_id:
                                  description: An identifier of an integration that supports backups. All backups will be sent to this destination.
                                  oneOf:
                                      - $ref: "#/components/schemas/HybridIdentifier"
                                      - $ref: "#/components/schemas/StackVariable"
                              backup:
                                  description: Configuration options for how the container should be backed up.
                                  oneOf:
                                      - type: object
                                        required:
                                            - command
                                            - timeout
                                            - cron_string
                                        properties:
                                            command:
                                                description: The command to run to capture a backup. The output sent to `STDOUT` will be captured and sent to the specified integration.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                            timeout:
                                                description: How long the backup will attempt to run before timing out.
                                                anyOf:
                                                    - $ref: "#/components/schemas/Duration"
                                                    - $ref: "#/components/schemas/StackVariable"
                                                    - type: "null"
                                            cron_string:
                                                description: A cron string describing how often to run the backup command.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              restore:
                                  description: Configuration options for how the backup should be restored.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        required:
                                            - command
                                            - timeout
                                        properties:
                                            command:
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                            timeout:
                                                description: The time in seconds for the restore to attempt to complete before timing out.
                                                anyOf:
                                                    - $ref: "#/components/schemas/Duration"
                                                    - $ref: "#/components/schemas/StackVariable"
                                                    - type: "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              retention:
                                  description: How long the platform will keep backups. Default is 1 year.
                                  anyOf:
                                      - $ref: "#/components/schemas/Duration"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                  default: 365d
                        - $ref: "#/components/schemas/StackVariable"
                shared_file_systems:
                    description: When enabled, Cycle will mount a shared host directory into this container. The directory will be shared with all other containers that mount it.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          additionalProperties:
                              oneOf:
                                  - type: object
                                    required:
                                        - writable
                                        - mount_point
                                    properties:
                                        writable:
                                            oneOf:
                                                - type: boolean
                                                - $ref: "#/components/schemas/StackVariable"
                                        mount_point:
                                            oneOf:
                                                - $ref: "#/components/schemas/StackVariable"
                                                - type: string
                                  - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                logs:
                    description: When enabled, allows more customization to be applied to logging for the container.
                    oneOf:
                        - type: object
                          properties:
                              drain:
                                  description: When enabled, log drain allows logs to be exported to a third party service.
                                  oneOf:
                                      - type: object
                                        required:
                                            - url
                                        properties:
                                            url:
                                                description: The URL to the third party logging service where logs will be sent.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                                      - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainerVolume:
            title: StackSpecContainerVolume
            description: A container volume configuration.
            type: object
            required:
                - destination
            properties:
                local:
                    description: Configuration options for local volumes.
                    oneOf:
                        - type: object
                          required:
                              - max_size
                          properties:
                              max_size:
                                  description: The maximum size this volume can grow to. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size.
                                  oneOf:
                                      - type: string
                                        examples:
                                            - 5G
                                            - 500M
                                      - $ref: "#/components/schemas/StackVariable"
                              storage_pool:
                                  description: A boolean where true signifies using the largest drive over 2TB for the target server.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                destination:
                    description: The path this volume should be mounted at inside the container.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                read_only:
                    description: If true, the container will be unable to write data to the volume.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                block_device:
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                    description: |
                        Indicates that the volume will be used as unformatted block storage.
                remote_access:
                    description: Configuration options for setting up remote access to this volume via SFTP.
                    oneOf:
                        - type: object
                          required:
                              - enable
                              - password
                          properties:
                              enable:
                                  description: If true, this volume will be accessible over SFTP.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              ips:
                                  description: A list of IPs that SFTP access will be limited to.
                                  oneOf:
                                      - type: array
                                        items:
                                            type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              webhook:
                                  description: If set, Cycle will call out to this URL for authentication. Anything other than a 200 response will be considered a validation failure.
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              password:
                                  description: The password used for logging in to this volume via SFTP.
                                  oneOf:
                                      - type: object
                                        required:
                                            - algorithm
                                            - data
                                        properties:
                                            algorithm:
                                                description: The algorithm the password is encoded with. `raw` means the password is plain-text.
                                                oneOf:
                                                    - type: string
                                                      enum:
                                                          - raw
                                                          - sha512
                                                          - md5
                                                    - $ref: "#/components/schemas/StackVariable"
                                            data:
                                                description: The password string.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecContainer:
            title: StackSpecContainer
            description: A container template defined within a stack.
            type: object
            required:
                - name
                - image
                - config
                - stateful
            properties:
                name:
                    type: string
                    description: The human-readable name of this container.
                image:
                    description: Details about the image used for this container.
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecContainerImage"
                        - $ref: "#/components/schemas/StackVariable"
                annotations:
                    oneOf:
                        - type:
                              - object
                              - "null"
                          description: Additional user-provided meta data about the container.
                          additionalProperties: {}
                        - $ref: "#/components/schemas/StackVariable"
                stateful:
                    description: Whether or not to mark the container as stateful when deployed. Stateful containers can utilize volumes (stateful data) and are generally used for running databases or other data management applications.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                config:
                    oneOf:
                        - type: object
                          description: Configuration options for this container that will be applied when deployed as part of the stack.
                          title: StackContainerConfig
                          required:
                              - network
                              - deploy
                          properties:
                              network:
                                  oneOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigNetwork"
                                      - $ref: "#/components/schemas/StackVariable"
                              deploy:
                                  oneOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigDeploy"
                                      - $ref: "#/components/schemas/StackVariable"
                              scaling:
                                  description: Configuration options for auto-scaling.
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigScaling"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              runtime:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigRuntime"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              resources:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigResources"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              integrations:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecContainerConfigIntegrations"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                        - $ref: "#/components/schemas/StackVariable"
                role:
                    description: The role applied to this container. **Not yet implemented**
                    type:
                        - string
                        - "null"
                    enum:
                        - conductor
                volumes:
                    description: A list of configurations for volumes that will be attached to the container. Only applicable if the container is set to `stateful`.
                    oneOf:
                        - type:
                              - array
                              - "null"
                          items:
                              $ref: "#/components/schemas/StackSpecContainerVolume"
                        - $ref: "#/components/schemas/StackVariable"
                deprecate:
                    description: If true, the container is marked as `deprecated`, and cannot be started anymore. Deprecated containers also don't count toward resource utilization.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                lock:
                    description: If true, the container is marked as `locked` and cannot be deleted in any way until the lock is lifted.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
        StackService:
            title: StackService
            description: Stack spec configuration options common to all environment services. If one of these properties is defined, all must be.
            type: object
            properties:
                enable:
                    description: Whether or not this service should be enabled.
                    type: boolean
                high_availability:
                    description: Whether or not Cycle should run multiple instances of this service for high availability.
                    type: boolean
                auto_update:
                    description: Whether or not Cycle should automatically update this service when a new version is released.
                    type: boolean
        StackSpecDiscoveryConfig:
            title: StackSpecDiscoveryConfig
            type: object
            properties:
                empty_set_delay:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                hosts:
                    description: A custom mapping of hosts - for forced resolution of specific IPs for a domain.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          additionalProperties:
                              type: object
                              properties:
                                  ipv4:
                                      oneOf:
                                          - type:
                                                - array
                                                - "null"
                                            items:
                                                type: string
                                          - $ref: "#/components/schemas/StackVariable"
                                  ipv6:
                                      oneOf:
                                          - type:
                                                - array
                                                - "null"
                                            items:
                                                type: string
                                          - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                custom_resolvers:
                    description: A list of custom DNS resolver strings.  Can specifify domains or ips.
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecDiscoveryService:
            title: StackSpecDiscoveryService
            description: Configuration options for the discovery service.
            type: object
            additionalProperties: false
            properties:
                service:
                    anyOf:
                        - $ref: "#/components/schemas/StackService"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                config:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecDiscoveryConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecHaProxyConfigSet:
            title: StackSpecHAProxyConfigSet
            type: object
            required:
                - frontend
                - backend
            properties:
                frontend:
                    oneOf:
                        - type: object
                          description: Settings that describe how incoming traffic to the load balancer is handled.
                          required:
                              - mode
                              - max_connections
                              - timeouts
                          properties:
                              mode:
                                  description: |-
                                      The type of traffic expected by the load balancer for this port. Can be either: 
                                       - tcp: Traffic is forwarded without any parsing or additional manipulation. 
                                       - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
                                  oneOf:
                                      - type: string
                                        enum:
                                            - tcp
                                            - http
                                      - $ref: "#/components/schemas/StackVariable"
                              max_connections:
                                  description: The number of simultaneous connections that can be processed at a time.
                                  oneOf:
                                      - type:
                                            - integer
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              timeouts:
                                  description: Various options for handling timeouts when communicating with the client.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        required:
                                            - client_secs
                                            - client_fin_ms
                                            - http_keep_alive_ms
                                            - http_request_ms
                                        properties:
                                            client_secs:
                                                description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            client_fin_ms:
                                                description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            http_keep_alive_ms:
                                                description: The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            http_request_ms:
                                                description: The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                backend:
                    oneOf:
                        - type: object
                          description: Settings related to how the load balancer routes connections to container instances.
                          required:
                              - balance
                              - timeouts
                          properties:
                              balance:
                                  description: |-
                                      How connections are balanced across your container instances. Can be one of the following: 
                                       - `roundrobin`: Each container instance is used in turns. 
                                       - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
                                       - `leastconn`: Routes traffic to the instance with the least number of active connections. 
                                       - `first`: Routes traffic to the first available instance. 
                                       - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
                                  oneOf:
                                      - type: string
                                        enum:
                                            - roundrobin
                                            - static-rr
                                            - leastconn
                                            - first
                                            - source
                                      - $ref: "#/components/schemas/StackVariable"
                              timeouts:
                                  description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        required:
                                            - server_secs
                                            - server_fin_ms
                                            - connect_ms
                                            - queue_ms
                                            - tunnel_secs
                                        properties:
                                            server_secs:
                                                description: The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            server_fin_ms:
                                                description: The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            connect_ms:
                                                description: The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            queue_ms:
                                                description: The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            tunnel_secs:
                                                description: The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecHaProxyConfig:
            title: StackSpecHaProxyConfig
            type: object
            description: Describes settings that are passed to HAProxy within the load balancer.
            required:
                - default
                - ports
            properties:
                default:
                    description: Settings that are applied to any port that is not overridden in the following ports section.
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecHaProxyConfigSet"
                        - $ref: "#/components/schemas/StackVariable"
                ports:
                    description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    oneOf:
                        - type: object
                          additionalProperties:
                              oneOf:
                                  - $ref: "#/components/schemas/StackSpecHaProxyConfigSet"
                                  - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecHaProxyLbType:
            title: StackSpecHaProxyLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    description: Allow / disallow traffic to be routed via IPv4.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                ipv6:
                    description: Allow / disallow traffic to be routed via IPv6.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                type:
                    type: string
                    enum:
                        - haproxy
                details:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecHaProxyConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    oneOf:
                        - type:
                              - boolean
                              - "null"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecWafConfig:
            title: StackSpecWafConfig
            type: object
            description: Additional configuration options for the web application firewall.
            required:
                - rules
            properties:
                rules:
                    oneOf:
                        - type: array
                          items:
                              oneOf:
                                  - type: object
                                    required:
                                        - description
                                        - skip
                                        - type
                                        - conditions
                                    properties:
                                        description:
                                            description: Some information about the rule.
                                            oneOf:
                                                - type: string
                                                - $ref: "#/components/schemas/StackVariable"
                                        skip:
                                            description: A boolean that indicates if the rule should be active or skipped.
                                            oneOf:
                                                - type: boolean
                                                - $ref: "#/components/schemas/StackVariable"
                                        type:
                                            description: A string that describes if the role should allow or deny traffic based on the conditions.
                                            oneOf:
                                                - type: string
                                                  enum:
                                                      - allow
                                                      - deny
                                                - $ref: "#/components/schemas/StackVariable"
                                        match:
                                            description: A string that describes if both attributes need to be true (match all) or if only one of the conditions needs to be true (match any).
                                            oneOf:
                                                - type: string
                                                  enum:
                                                      - any
                                                      - all
                                                - $ref: "#/components/schemas/StackVariable"
                                        conditions:
                                            description: An array of the specific conditions for the rule.
                                            oneOf:
                                                - type: array
                                                  items:
                                                      oneOf:
                                                          - type: object
                                                            required:
                                                                - type
                                                                - operator
                                                                - value
                                                            properties:
                                                                type:
                                                                    description: A string that describes the match type for the condition.
                                                                    oneOf:
                                                                        - type: string
                                                                          enum:
                                                                              - ip-match
                                                                              - geo-match
                                                                              - url-match
                                                                              - method-match
                                                                              - header-match
                                                                        - $ref: "#/components/schemas/StackVariable"
                                                                operator:
                                                                    description: A string that indicates the range of values relative to the value property.
                                                                    oneOf:
                                                                        - type: string
                                                                          enum:
                                                                              - "=="
                                                                              - "!="
                                                                              - ">"
                                                                              - <
                                                                              - ">="
                                                                              - <=
                                                                        - $ref: "#/components/schemas/StackVariable"
                                                                value:
                                                                    description: The value corresponding to the condition type.
                                                                    examples:
                                                                        - 0.0.0.0/0
                                                                    oneOf:
                                                                        - type: string
                                                                        - $ref: "#/components/schemas/StackVariable"
                                                          - $ref: "#/components/schemas/StackVariable"
                                                - $ref: "#/components/schemas/StackVariable"
                                  - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecTcpTransportConfig:
            title: StackSpecTcpTransportConfig
            description: Additional configuration options for the TCP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    oneOf:
                        - type: object
                          required:
                              - connections
                              - telemetry
                          properties:
                              connections:
                                  oneOf:
                                      - type: object
                                        additionalProperties: {}
                                      - $ref: "#/components/schemas/StackVariable"
                              telemetry:
                                  description: Configuration options for how telemetry is handled on the load balancer.
                                  oneOf:
                                      - type: object
                                        additionalProperties: {}
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecHttpTransportConfig:
            title: StackSpecHttpTransportConfig
            description: Additional configuration options for the HTTP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    oneOf:
                        - type: object
                          required:
                              - connections
                              - telemetry
                          properties:
                              connections:
                                  oneOf:
                                      - type: object
                                        required:
                                            - max_idle_conns_per_connection
                                        description: Defines extra configuration options connections to the load balancer
                                        properties:
                                            max_idle_conns_per_connection:
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                      description: Maximum number of simultaneous connections (via http/2) per connection.
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              telemetry:
                                  oneOf:
                                      - type: object
                                        description: Configuration options for how telemetry is handled.
                                        properties:
                                            max_trackable_urls:
                                                description: Determines how many URLs the load balancer will track at one time. Defaults to 150.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            track_invalid_requests:
                                                description: Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false.
                                                oneOf:
                                                    - type:
                                                          - boolean
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            ignore_paths:
                                                description: An array of paths to exclude from tracking.
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecUdpTransportConfig:
            title: StackSpecUdpTransportConfig
            description: Additional configuration options for the UDP transport mode.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    oneOf:
                        - type: object
                          required:
                              - telemetry
                          properties:
                              telemetry:
                                  description: Configuration options for how telemetry is handled on the load balancer.
                                  oneOf:
                                      - type: object
                                        additionalProperties: {}
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecTcpRouterConfig:
            title: StackSpecTcpRouterConfig
            description: Additional configuration options for TCP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - tcp
                details:
                    oneOf:
                        - type: object
                          additionalProperties: {}
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecUdpRouterConfig:
            title: StackSpecUdpRouterConfig
            description: Additional configuration options for UDP mode routers
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - udp
                details:
                    oneOf:
                        - type: object
                          additionalProperties: {}
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecHttpRouterConfig:
            title: StackSpecHttpRouterConfig
            description: Additional configuration options for HTTP mode routers.
            type: object
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - http
                details:
                    oneOf:
                        - type: object
                          properties:
                              redirect:
                                  description: Defines a built-in redirect for HTTP mode routers
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        required:
                                            - auto_https_redirect
                                            - remove_www
                                        properties:
                                            auto_https_redirect:
                                                description: If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router.
                                                oneOf:
                                                    - type: boolean
                                                    - $ref: "#/components/schemas/StackVariable"
                                            remove_www:
                                                description: If true, any request comes in with "www" prefix will be permanently redirected to the same path without www.
                                                oneOf:
                                                    - type: boolean
                                                    - $ref: "#/components/schemas/StackVariable"
                                            port:
                                                description: The port to redirect traffic to.
                                                oneOf:
                                                    - type:
                                                          - integer
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            scheme:
                                                description: The scheme to redirect to. (i.e. `https`)
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            url:
                                                description: A specific URL to redirect to.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              forward:
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            scheme:
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            content_mod:
                                                description: Allows the load balancer to modify content before it reaches the user.
                                                oneOf:
                                                    - type:
                                                          - object
                                                          - "null"
                                                      properties:
                                                          replace:
                                                              description: An array that describes a list of replacement match/value pairs.
                                                              oneOf:
                                                                  - type:
                                                                        - array
                                                                        - "null"
                                                                    items:
                                                                        oneOf:
                                                                            - type: object
                                                                              required:
                                                                                  - match
                                                                                  - value
                                                                              properties:
                                                                                  match:
                                                                                      description: String that will be replaced.
                                                                                      oneOf:
                                                                                          - type: string
                                                                                          - $ref: "#/components/schemas/StackVariable"
                                                                                  value:
                                                                                      description: Replacement value.
                                                                                      oneOf:
                                                                                          - type: string
                                                                                          - $ref: "#/components/schemas/StackVariable"
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                                  - $ref: "#/components/schemas/StackVariable"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            url:
                                                description: |
                                                    The URL to forward the request to.

                                                    Given a path match of `^/example/(.*)$`, a route such as `/example/wow.jpg` would be forwarded as /wow.jpg.
                                                examples:
                                                    - /$$1
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              proxy:
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            domain:
                                                description: The domain that this router will proxy.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            url:
                                                description: The full URL that this router will proxy.
                                                oneOf:
                                                    - type: string
                                                    - $ref: "#/components/schemas/StackVariable"
                                                    - type: "null"
                                            content_mod:
                                                description: Allows the load balancer to modify content before it reaches the user.
                                                oneOf:
                                                    - type:
                                                          - object
                                                          - "null"
                                                      properties:
                                                          replace:
                                                              description: An array that describes a list of replacement match/value pairs.
                                                              oneOf:
                                                                  - type:
                                                                        - array
                                                                        - "null"
                                                                    items:
                                                                        oneOf:
                                                                            - type: object
                                                                              required:
                                                                                  - match
                                                                                  - value
                                                                              properties:
                                                                                  match:
                                                                                      description: String that will be replaced.
                                                                                      oneOf:
                                                                                          - type: string
                                                                                          - $ref: "#/components/schemas/StackVariable"
                                                                                  value:
                                                                                      description: Replacement value.
                                                                                      oneOf:
                                                                                          - type: string
                                                                                          - $ref: "#/components/schemas/StackVariable"
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                                  - $ref: "#/components/schemas/StackVariable"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              caching:
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            files:
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          oneOf:
                                                              - type: object
                                                                required:
                                                                    - match
                                                                    - ttl
                                                                properties:
                                                                    match:
                                                                        description: Regex string that describes the files to cache.
                                                                        examples:
                                                                            - (.*)\.(js|jpg|css|png|svg)$
                                                                        oneOf:
                                                                            - type: string
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                                    ttl:
                                                                        description: Time string that describes the time to live.
                                                                        oneOf:
                                                                            - $ref: "#/components/schemas/Duration"
                                                                            - $ref: "#/components/schemas/StackVariable"
                                                              - $ref: "#/components/schemas/StackVariable"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecV1LbRouterConfig:
            title: StackSpecV1LbRouterConfig
            description: A specific router configuration that describes how traffic matching the rule is handled.
            type: object
            required:
                - match
                - mode
                - config
            properties:
                match:
                    oneOf:
                        - type: object
                          description: The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then this match acts as a wildcard and will match all.
                          required:
                              - domains
                              - internal_ports
                          properties:
                              domains:
                                  description: The specific domains to match against.
                                  oneOf:
                                      - type:
                                            - array
                                            - "null"
                                        items:
                                            type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              internal_ports:
                                  description: The specific ports to match against.
                                  oneOf:
                                      - type:
                                            - array
                                            - "null"
                                        items:
                                            type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                              path:
                                  oneOf:
                                      - type:
                                            - string
                                            - "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              containers:
                                  description: Match traffic destined (or not destined) for a particular container.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            include:
                                                description: Match any traffic that would be routed to one of these containers.
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          $ref: "#/components/schemas/HybridIdentifier"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            exclude:
                                                description: Match any traffic that would NOT be routed to one of these containers.
                                                oneOf:
                                                    - type:
                                                          - array
                                                          - "null"
                                                      items:
                                                          $ref: "#/components/schemas/HybridIdentifier"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                mode:
                    description: |
                        How to route the traffic to the destination.
                        `random`: Pick a valid destination at random.
                        `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
                    oneOf:
                        - type: string
                          enum:
                              - random
                              - round-robin
                        - $ref: "#/components/schemas/StackVariable"
                config:
                    oneOf:
                        - type: object
                          required:
                              - sticky_sessions
                              - destination_retries
                              - timeouts
                          properties:
                              sticky_sessions:
                                  description: If a request comes in from the same origin, ensure it hits the same destination.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              destination_retries:
                                  description: If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error.
                                  oneOf:
                                      - type: integer
                                      - $ref: "#/components/schemas/StackVariable"
                              destination_prioritization:
                                  default: null
                                  oneOf:
                                      - type: string
                                        description: |
                                            Hints to the load balancer how to prioritize traffic to instances.
                                            **random**: Chooses a random instance. **latency**: Prioritizes lower latency instances.
                                        enum:
                                            - latency
                                            - random
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              tls:
                                  description: TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled.
                                  oneOf:
                                      - type:
                                            - object
                                            - "null"
                                        properties:
                                            server_name:
                                                description: |
                                                    [Advanced] Change the domain the controller listens on.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            allow_insecure:
                                                description: If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use.
                                                oneOf:
                                                    - type:
                                                          - boolean
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            client_cert_auth:
                                                description: A PEM encoded string of certificates.
                                                oneOf:
                                                    - type:
                                                          - string
                                                          - "null"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            client_auth:
                                                description: |
                                                    Defines how to validate the connecting TLS certificate.
                                                    `none`: Do not require a TLS certificate to be sent
                                                    `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                                                    `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                                                    `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                                                oneOf:
                                                    - type: string
                                                      enum:
                                                          - none
                                                          - request
                                                          - require
                                                          - require-verify
                                                    - $ref: "#/components/schemas/StackVariable"
                                                    - type: "null"
                                      - $ref: "#/components/schemas/StackVariable"
                              timeouts:
                                  description: Defines how the length of various sorts of timeouts when communicating with the destination.
                                  oneOf:
                                      - type: object
                                        required:
                                            - destination_connection
                                        properties:
                                            destination_connection:
                                                description: The duration the load balancer will wait before timing out while attempting to connect to the destination.
                                                oneOf:
                                                    - $ref: "#/components/schemas/Duration"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              extension:
                                  anyOf:
                                      - type: "null"
                                      - type: object
                                        description: Additional configuration options specific to the selected mode (tcp/http).
                                        discriminator:
                                            propertyName: type
                                            mapping:
                                                tcp: "#/components/schemas/StackSpecTcpRouterConfig"
                                                udp: "#/components/schemas/StackSpecUdpRouterConfig"
                                                http: "#/components/schemas/StackSpecHttpRouterConfig"
                                        oneOf:
                                            - $ref: "#/components/schemas/StackSpecTcpRouterConfig"
                                            - $ref: "#/components/schemas/StackSpecHttpRouterConfig"
                                            - $ref: "#/components/schemas/StackSpecUdpRouterConfig"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecV1LbController:
            title: StackSpecV1LbController
            type: object
            required:
                - identifier
                - port
            properties:
                identifier:
                    description: A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                port:
                    description: The port inbound trafic is accepted on.
                    oneOf:
                        - type: integer
                        - $ref: "#/components/schemas/StackVariable"
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecWafConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                transport:
                    title: V1LbControllerTransport
                    description: Defines how traffic comes in to the load balancer, and how the load balancer handles it.
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - mode
                              - config
                              - routers
                              - disable
                          properties:
                              disable:
                                  description: When true, this controller is disabled and will not be used.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              mode:
                                  description: The kind of traffic (http/tcp/udp) that will be sent to the load balancer.
                                  oneOf:
                                      - type: string
                                        enum:
                                            - tcp
                                            - udp
                                            - http
                                      - $ref: "#/components/schemas/StackVariable"
                              config:
                                  description: Defines how the transport for this controller operates.
                                  oneOf:
                                      - type: object
                                        required:
                                            - performance
                                            - ingress
                                            - timeouts
                                            - verbosity
                                        properties:
                                            performance:
                                                description: |
                                                    Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                                                    You will not see per-request breakdowns or URL logging if performance mode is enabled.
                                                oneOf:
                                                    - type: boolean
                                                    - $ref: "#/components/schemas/StackVariable"
                                            ingress:
                                                description: Defines how traffic gets into the load balancer.
                                                oneOf:
                                                    - type: object
                                                      properties:
                                                          tls:
                                                              oneOf:
                                                                  - type:
                                                                        - object
                                                                        - "null"
                                                                    required:
                                                                        - enable
                                                                    properties:
                                                                        enable:
                                                                            description: Enables or disables TLS.
                                                                            oneOf:
                                                                                - type: boolean
                                                                                - $ref: "#/components/schemas/StackVariable"
                                                                  - $ref: "#/components/schemas/StackVariable"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            timeouts:
                                                description: Defines settings for various types of timeouts.
                                                oneOf:
                                                    - type: object
                                                      required:
                                                          - idle
                                                      properties:
                                                          idle:
                                                              description: The total amount of time a connection can be idle before being killed.
                                                              oneOf:
                                                                  - $ref: "#/components/schemas/Duration"
                                                                  - $ref: "#/components/schemas/StackVariable"
                                                    - $ref: "#/components/schemas/StackVariable"
                                            verbosity:
                                                description: Verbosity describes the level of logging detail for the controller
                                                oneOf:
                                                    - type: string
                                                      enum:
                                                          - low
                                                          - normal
                                                          - high
                                                          - debug
                                                    - $ref: "#/components/schemas/StackVariable"
                                            extension:
                                                description: Extended configurations for the specified transport mode (http/tcp)
                                                oneOf:
                                                    - type: object
                                                      discriminator:
                                                          propertyName: type
                                                          mapping:
                                                              tcp: "#/components/schemas/StackSpecTcpTransportConfig"
                                                              http: "#/components/schemas/StackSpecHttpTransportConfig"
                                                              udp: "#/components/schemas/StackSpecUdpTransportConfig"
                                                      oneOf:
                                                          - $ref: "#/components/schemas/StackSpecTcpTransportConfig"
                                                          - $ref: "#/components/schemas/StackSpecHttpTransportConfig"
                                                          - $ref: "#/components/schemas/StackSpecUdpTransportConfig"
                                                    - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                              routers:
                                  description: Defines where traffic is sent. Many can be defined per controller.
                                  oneOf:
                                      - type: array
                                        items:
                                            oneOf:
                                                - $ref: "#/components/schemas/StackSpecV1LbRouterConfig"
                                                - $ref: "#/components/schemas/StackVariable"
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecV1LbConfig:
            title: StackSpecV1LbConfig
            type: object
            required:
                - controllers
            properties:
                controllers:
                    description: A configuration for a specific port.
                    oneOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/StackSpecV1LbController"
                        - $ref: "#/components/schemas/StackVariable"
                controller_template:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecV1LbController"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                waf:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecWafConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecV1LbType:
            title: StackSpecV1LbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    description: Allow / disallow traffic to be routed via IPv4.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                ipv6:
                    description: Allow / disallow traffic to be routed via IPv6.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                type:
                    type: string
                    enum:
                        - v1
                details:
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecV1LbConfig"
                        - $ref: "#/components/schemas/StackVariable"
                bind_host:
                    description: |
                        Binds the load balancer to the host server IP address. 

                        **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
                        **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
                        the same IP as the host, that host can only operate under that environment.
                    oneOf:
                        - type:
                              - boolean
                              - "null"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecDefaultLbType:
            title: StackSpecDefaultLbType
            type: object
            required:
                - type
                - details
                - ipv4
                - ipv6
            properties:
                ipv4:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                    type: boolean
                    description: Allow / disallow traffic to be routed via IPv6.
                type:
                    type: string
                    enum:
                        - default
                details:
                    oneOf:
                        - $ref: "#/components/schemas/StackSpecHaProxyConfig"
                        - $ref: "#/components/schemas/StackSpecV1LbConfig"
                        - type: "null"
        StackSpecLoadBalancerConfig:
            title: StackSpecLoadBalancerConfig
            type: object
            description: The config object for the loadbalancer service.
            discriminator:
                propertyName: type
                mapping:
                    haproxy: "#/components/schemas/StackSpecHaProxyLbType"
                    v1: "#/components/schemas/StackSpecV1LbType"
                    default: "#/components/schemas/StackSpecDefaultLbType"
            oneOf:
                - $ref: "#/components/schemas/StackSpecHaProxyLbType"
                - $ref: "#/components/schemas/StackSpecV1LbType"
                - $ref: "#/components/schemas/StackSpecDefaultLbType"
        StackSpecLoadBalancerService:
            title: StackSpecLoadBalancerService
            description: Configuration options for the load balancer service.
            type: object
            additionalProperties: false
            properties:
                service:
                    anyOf:
                        - $ref: "#/components/schemas/StackService"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                config:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecLoadBalancerConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecSchedulerAccessKey:
            title: StackSpecSchedulerAccessKey
            description: Custom authorization keys for the scheduler service.
            type: object
            required:
                - name
                - secret
            properties:
                name:
                    description: The name given to this access key.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                secret:
                    description: The access key secret. This should be submitted with requests to a publicly accessible scheduler service.
                    oneOf:
                        - type: string
                        - $ref: "#/components/schemas/StackVariable"
                ips:
                    description: Whitelisted IPs that are allowed to make requests to the scheduler service.
                    oneOf:
                        - type: array
                          items:
                              type: string
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecSchedulerConfig:
            title: StackSpecSchedulerConfig
            description: Scheduler specific configuration options.
            type:
                - object
                - "null"
            required:
                - public
            properties:
                public:
                    description: If true, this scheduler will be accessible over the public internet. It will enable a LINKED record to be pointed to the scheduler container, and inbound requests to trigger function containers.
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
                access_keys:
                    oneOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/StackSpecSchedulerAccessKey"
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecSchedulerService:
            title: StackSpecSchedulerService
            description: Configuration options for the scheduler service.
            type: object
            additionalProperties: false
            properties:
                service:
                    anyOf:
                        - $ref: "#/components/schemas/StackService"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                config:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecSchedulerConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpecVpnConfig:
            title: StackSpecVpnConfig
            description: VPN specific configuraiton options.
            type: object
            required:
                - auth
                - allow_internet
            properties:
                auth:
                    oneOf:
                        - type: object
                          required:
                              - cycle_accounts
                              - vpn_accounts
                          properties:
                              webhook:
                                  description: The endpoint to hit when attempting to authorize a VPN account. If the endpoint returns a 200 response, access is granted. Otherwise it is denied.
                                  oneOf:
                                      - type: string
                                      - $ref: "#/components/schemas/StackVariable"
                              cycle_accounts:
                                  description: If true, any account with access to this environment on Cycle can use their Cycle credentials to log in to this VPN.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                              vpn_accounts:
                                  description: If true, Cycle will allow custom accounts to be created for logging into this VPN.
                                  oneOf:
                                      - type: boolean
                                      - $ref: "#/components/schemas/StackVariable"
                        - $ref: "#/components/schemas/StackVariable"
                allow_internet:
                    oneOf:
                        - type: boolean
                        - $ref: "#/components/schemas/StackVariable"
        StackSpecVpnService:
            title: StackSpecVpnService
            description: Configuration options for the VPN service.
            type: object
            additionalProperties: false
            properties:
                service:
                    anyOf:
                        - $ref: "#/components/schemas/StackService"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
                config:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpecVpnConfig"
                        - $ref: "#/components/schemas/StackVariable"
                        - type: "null"
        StackSpec:
            $schema: https://json-schema.org/draft/2020-12/schema
            title: StackSpec
            description: |
                A Cycle stack file is an "environment as code". This allows an environment to be generated consistently based on a fixed specification. 
                Stack files can describe multiple containers and their configurations, environment service settings, scoped variables, and important metadata.
            type: object
            required:
                - version
                - containers
            properties:
                version:
                    type: string
                    description: The version of the Cycle stack file used.
                    enum:
                        - "1.0"
                about:
                    oneOf:
                        - type:
                              - object
                              - "null"
                          required:
                              - description
                              - version
                          properties:
                              version:
                                  type: string
                                  description: A custom, user-defined version of the stack.
                              description:
                                  type: string
                                  description: Custom, user-defined details about this stack.
                        - $ref: "#/components/schemas/StackVariable"
                scoped_variables:
                    description: Describes variables that are assigned to one or more containers at runtime. Can be assigned as an environment variable, written as a file inside the container(s), or accessed over the internal API.
                    oneOf:
                        - type:
                              - array
                              - "null"
                          items:
                              $ref: "#/components/schemas/StackSpecScopedVariable"
                        - $ref: "#/components/schemas/StackVariable"
                containers:
                    oneOf:
                        - type: object
                          description: A mapping of containers that will be deployed as a part of this stack. The key is used as the container's identifier.
                          additionalProperties:
                              $ref: "#/components/schemas/StackSpecContainer"
                        - $ref: "#/components/schemas/StackVariable"
                services:
                    description: Settings for any auxillary services deployed as part of the environment, such as load balancer and discovery services.
                    oneOf:
                        - title: StackSpecServices
                          type:
                              - object
                              - "null"
                          properties:
                              discovery:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecDiscoveryService"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              loadbalancer:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecLoadBalancerService"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              scheduler:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecSchedulerService"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                              vpn:
                                  anyOf:
                                      - $ref: "#/components/schemas/StackSpecVpnService"
                                      - $ref: "#/components/schemas/StackVariable"
                                      - type: "null"
                        - $ref: "#/components/schemas/StackVariable"
                annotations:
                    description: Additional meta info about the stack.
                    oneOf:
                        - type: object
                          additionalProperties: {}
                        - $ref: "#/components/schemas/StackVariable"
        StackGitCommit:
            title: StackGitCommit
            type: object
            description: Information about the git commit this stack build was created from.
            required:
                - hash
                - message
                - time
                - author
            properties:
                hash:
                    type: string
                    description: The commit hash for the given stack build.
                message:
                    type: string
                    description: The commit message for the given stack build hash.
                time:
                    description: The time the commit was made.
                    $ref: "#/components/schemas/DateTime"
                author:
                    type: object
                    description: Inforamtion about the author of the commit.
                    required:
                        - name
                        - email
                    properties:
                        name:
                            type: string
                            description: The commit authors name.
                        email:
                            type: string
                            description: The commit authors email address.
        StackBuildInstructions:
            title: StackBuildInstructions
            x-ogen-name: StackBuildInstructionsDetails
            type: object
            description: Additional instructions used when generating this stack build.
            properties:
                git:
                    type: object
                    description: Git information specifics.
                    required:
                        - type
                        - value
                    properties:
                        type:
                            type: string
                            description: The type of information the user is passing.
                            enum:
                                - hash
                                - tag
                                - branch
                        value:
                            type: string
                            description: The actual value to be passed.
                variables:
                    type: object
                    description: Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map.
                    additionalProperties:
                        type: string
        StackBuildState:
            title: StackBuildState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the stack build.
                          type: string
                          enum:
                              - new
                              - importing
                              - building
                              - verifying
                              - saving
                              - live
                              - deploying
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StackBuildMeta:
            title: StackBuildMeta
            type: object
            description: A list of meta fields that can be applied to a stack build.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
        StackBuild:
            title: StackBuild
            type: object
            description: A stack build resource.
            required:
                - id
                - hub_id
                - stack_id
                - about
                - instructions
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                stack_id:
                    type: string
                    description: An identifier for the stack related to this build.
                spec:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpec"
                        - type: "null"
                about:
                    x-ogen-name: StackBuildAboutDetails
                    type: object
                    description: Information about the stack build.
                    required:
                        - version
                        - description
                    properties:
                        version:
                            type: string
                            description: Information about the version of the stack.
                        description:
                            type: string
                            description: Information describing the stack
                        git_commit:
                            $ref: "#/components/schemas/StackGitCommit"
                instructions:
                    $ref: "#/components/schemas/StackBuildInstructions"
                events:
                    title: StackBuildEvents
                    type: object
                    description: A collection of timestamps for each event in the stack build's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the stack build was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the stack build was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the stack build was deleted.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/StackBuildState"
                meta:
                    $ref: "#/components/schemas/StackBuildMeta"
        StackBuildIncludes:
            title: StackBuildInclude
            description: A resource that is associated with a stack build.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/StackBuild"
        StackRepoSource:
            title: StackRepoSource
            type: object
            description: A repo source type for a stack.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - git-repo
                details:
                    type: object
                    required:
                        - url
                    properties:
                        stack_file:
                            type:
                                - string
                                - "null"
                            description: Specify which file in the repo contains the stack spec. By default, it is `cycle.json` in the root of the repo.
                        url:
                            type: string
                            description: The URL of the repository.
                        branch:
                            type: string
                            description: An optional branch arguement.  Default value is `master`.
                        auth:
                            type: object
                            description: Authentication information for the repository.
                            discriminator:
                                propertyName: type
                                mapping:
                                    http: "#/components/schemas/CredentialsHTTP"
                                    ssh: "#/components/schemas/CredentialsSSH"
                            oneOf:
                                - $ref: "#/components/schemas/CredentialsHTTP"
                                - $ref: "#/components/schemas/CredentialsSSH"
                        ref:
                            type: object
                            description: Repository reference information.
                            required:
                                - type
                                - value
                            properties:
                                type:
                                    type: string
                                    description: The type of reference being used.
                                value:
                                    type: string
                                    description: The value for the given reference type.
        StackRawSource:
            title: StackRawSource
            type: object
            description: A stack spec resource.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    enum:
                        - raw
                details:
                    anyOf:
                        - $ref: "#/components/schemas/StackSpec"
                        - type: "null"
        StackSource:
            title: StackSource
            type: object
            description: A source for a stack to be created from.
            discriminator:
                propertyName: type
                mapping:
                    git-repo: "#/components/schemas/StackRepoSource"
                    raw: "#/components/schemas/StackRawSource"
            oneOf:
                - $ref: "#/components/schemas/StackRepoSource"
                - $ref: "#/components/schemas/StackRawSource"
        StackState:
            title: StackState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the stack.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        StackMeta:
            title: StackMeta
            type: object
            description: A list of meta fields that can be applied to this stack.
            properties:
                containers_count:
                    $ref: "#/components/schemas/StateCountSummary"
                builds_count:
                    $ref: "#/components/schemas/StateCountSummary"
        Stack:
            title: Stack
            type: object
            description: Stacks are a way to orchestrate multiple containers atomically and automatically.
            required:
                - id
                - identifier
                - name
                - hub_id
                - creator
                - source
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this stack.
                name:
                    type: string
                    description: A user defined name for the stack resource.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/UserScope"
                source:
                    $ref: "#/components/schemas/StackSource"
                state:
                    $ref: "#/components/schemas/StackState"
                variables:
                    type: object
                    description: A map of default variable values used when building this stack. A variable can be added anywhere in a stack using the format `{{var}}` where `var` would be a key in this map.
                    additionalProperties:
                        type: string
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                events:
                    title: StackEvents
                    type: object
                    description: A collection of timestamps for each event in the Stacks lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_build
                    properties:
                        created:
                            description: The timestamp of when the stack was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the stack was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the stack was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_build:
                            description: The timestamp for the last build of the stack.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/StackMeta"
        StackIncludes:
            title: StackIncludes
            description: A resource associated with a stack.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Stack"
        IdentifierIncludes:
            title: IdentifierIncludes
            type: object
            description: A map of identifiers to an array of resource IDs that are associated with it. All IDs point to the same type of resource.
            additionalProperties:
                type: array
                items:
                    $ref: "#/components/schemas/ID"
        EnvironmentIncludes:
            title: EnvironmentInclude
            description: An identity that is associated with an environment.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Environment"
        ContainerIncludes:
            title: ContainerIncludes
            description: All includable resources linkable to the given container.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                images:
                    $ref: "#/components/schemas/ImagesIncludes"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                stacks:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
                environments:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        ContainerStartAction:
            title: ContainerStartActionTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - start
                    description: The name of the action to perform.
        ContainerStopAction:
            title: ContainerStopActionTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - stop
                    description: The name of the action to perform.
        ReconfigureContainer:
            title: ReconfigureContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reconfigure
                    description: The action to take.
                contents:
                    $ref: "#/components/schemas/Config"
        ReconfigureVolumes:
            title: ReconfigureVolumeTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - volumes.reconfigure
                    description: The action to take.
                contents:
                    description: An array of volume objects to be reconfigured.
                    type: array
                    items:
                        $ref: "#/components/schemas/VolumeSummary"
        Reimage:
            title: ReimageContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reimage
                    description: The action to take.
                contents:
                    type: object
                    description: Additional information needed to complete the job.
                    required:
                        - image_id
                    properties:
                        image_id:
                            type: string
                            description: The ID of the image to use when reimaging.
                        allow_incompatible:
                            type: boolean
                            description: A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced.
                        overwrite_runtime_config:
                            type: boolean
                            description: A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process.
        Scale:
            title: ScaleContainer
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - scale
                contents:
                    type: object
                    description: Additional information needed to complete the job.
                    required:
                        - instances
                    properties:
                        instances:
                            type: integer
                            description: The number of desired instances to scale to.
        ServerInstancesSummary:
            title: ServerInstancesSummary
            type: object
            description: A Server ID and number of Instances of a specific Container it hosts.
            required:
                - server_id
                - instances
            properties:
                server_id:
                    $ref: "#/components/schemas/ID"
                instances:
                    type: integer
        ServerSharedFileSystems:
            title: ServerSharedFileSystems
            type: object
            properties:
                mounts:
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: object
                        required:
                            - type
                            - options
                            - source
                        properties:
                            type:
                                type: string
                                description: String describing the server mount type.
                            options:
                                type: string
                                description: Comma separated string describing the server mount options.
                                examples:
                                    - key1=value1,key2=value2
                            source:
                                type: string
                                description: String describing the server mount source.
                directories:
                    type:
                        - object
                        - "null"
                    description: An object describing directory identifiers with value {}.
                    additionalProperties: {}
        ServerProvider:
            title: ServerProvider
            type: object
            description: A resource regarding the provider a given server is deployed from.
            required:
                - vendor
                - integration_id
                - model
                - location
                - server
            properties:
                vendor:
                    type: string
                    description: The vendor for the provider this server is deployed from.
                integration_id:
                    $ref: "#/components/schemas/ID"
                model:
                    type: string
                    description: The model of the server that is deployed.
                zone:
                    type:
                        - string
                        - "null"
                    description: The zone of the server that is deployed, if defined.
                location:
                    type: string
                    description: A location where the server is deployed.
                server:
                    type: string
                    description: A provider specific identifier for the server.
                init_ips:
                    description: The IP's assigned to this server during provisioning.
                    type: array
                    items:
                        type: string
                mac_addr:
                    type: string
                    description: The mac address for the server.
                extra:
                    type: object
                    additionalProperties: true
                provision_options:
                    type: object
                    properties:
                        encrypt_storage:
                            type: boolean
                        storage_size:
                            type: number
                        reservation_id:
                            type: string
        ServerFeatures:
            title: ServerFeatures
            type: object
            description: A set of features a given server can have and their information.
            required:
                - sftp
            properties:
                sftp:
                    type: boolean
                    description: A boolean where true means the server accepts incoming SFTP connections through the remote volume integration.
                base_volume_gb:
                    type:
                        - integer
                        - "null"
                    description: The size of the base volume (where Cycle stores container images on this server).
                gateway:
                    type:
                        - object
                        - "null"
                    description: Configuration options for running gateway services on this server.
                    properties:
                        type:
                            type: string
                            description: The type of gateway service that can be run on this server.
                            enum:
                                - bgp
                                - static
                    required:
                        - type
        ServerConstraints:
            title: ServerConstraints
            type: object
            description: Constraints to apply to the server.
            required:
                - tags
                - allow
            properties:
                tags:
                    description: A list of server tags to put on the given server.
                    type: array
                    items:
                        type: string
                allow:
                    type: object
                    description: Settings for the server, things that are or are not allowed.
                    required:
                        - pool
                        - services
                        - overcommit
                    properties:
                        pool:
                            type: boolean
                            description: A boolean where true means - allow containers with no tags specified to be deployed to this server.
                        services:
                            type: boolean
                            description: A boolean where true means - allow service containers to be deployed to this container.
                        overcommit:
                            type: boolean
                            description: A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server.
        ServerState:
            title: ServerState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the server.
                          type: string
                          enum:
                              - new
                              - provisioning
                              - configuring
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        NodeState:
            title: NodeState
            allOf:
                - required:
                      - current
                      - changed
                  properties:
                      current:
                          description: The current state of the node.
                          type: string
                          enum:
                              - new
                              - offline
                              - authorizing
                              - online
                              - decommissioned
                      changed:
                          $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/schemas/State"
        ServerStatsNetwork:
            title: ServerStatsNetwork
            type: object
            description: Statistics about the networks on a given server.
            required:
                - external_ipv4
                - external_ipv6
            properties:
                interfaces:
                    type: object
                    description: Network interfaces for a given server.
                    additionalProperties:
                        type: object
                        description: Network interface.
                        properties:
                            interface:
                                type: string
                                description: The interface name.
                            flags:
                                type: string
                                description: Flags for the given interface.
                            mtu:
                                type: integer
                                description: The maximum transmission unit for the interface.
                            mac_addr:
                                type: string
                                description: The mac address for the interface.
                            addrs:
                                description: An array of IP addresses associated with the interface.
                                type:
                                    - array
                                    - "null"
                                items:
                                    type: string
                external_ipv4:
                    type: string
                    description: The public IPv4 address used to connect to this server.
                external_ipv6:
                    type: string
                    description: The public IPv6 address used to connect to this server.
        ServerStatsUptime:
            title: ServerStatsUptime
            type: object
            description: Statistics describing the uptime of a given server.
            properties:
                seconds:
                    type: number
                    description: The amount in seconds the server has been up (resets on restart).
                cpu_idle:
                    type: number
                    description: CPU idle time.
        ServerStatsCpuUsage:
            title: ServerStatsCpuUsage
            type: object
            properties:
                user:
                    type: integer
                nice:
                    type: integer
                system:
                    type: integer
                idle:
                    type: integer
                iowait:
                    type: integer
                irq:
                    type: integer
                soft_irq:
                    type: integer
                steal:
                    type: integer
                guest:
                    type: integer
                guest_nice:
                    type: integer
        ServerStatsCpu:
            title: ServerStatsCpu
            type: object
            description: Statistics about the CPU resources on a server.
            properties:
                cores:
                    type: integer
                    description: The number of CPU's or vCPU's for a given server.
                processors:
                    description: An array of processor information objects.
                    type: array
                    items:
                        type: object
                        description: Processor information.
                        properties:
                            model:
                                type: string
                                description: The model of the processor.
                            speed:
                                type: number
                                format: float
                                description: The speed of the processor.
                usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsage"
        ServerStatsLoad:
            title: ServerStatsLoad
            type: object
            description: Statistics about the current load on the server.
            required:
                - avg1m
                - avg5m
                - avg15m
            properties:
                avg1m:
                    type: number
                    format: float
                    description: The 1 minute load average.
                avg5m:
                    type: number
                    format: float
                    description: The 5 minute load average.
                avg15m:
                    type: number
                    format: float
                    description: the 15 minute load average.
        ServerStatsRam:
            title: ServerStatsRam
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: integer
                    description: The available RAM on the server.
                free:
                    type: integer
                    description: The free RAM on the server.
                total:
                    type: integer
                    description: The total RAM on the server.
        ServerStatsStorage:
            title: ServerStatsStorage
            type: object
            description: Statistics about storage for a given server.
            required:
                - volume_groups
                - mounts
            properties:
                volume_groups:
                    description: An array of volume group objects.
                    type: object
                    additionalProperties:
                        type: object
                        description: Volume group
                        required:
                            - name
                            - size
                            - volumes
                        properties:
                            name:
                                type: string
                                description: A name for the volume group.
                            size:
                                type: integer
                                description: A number representing the aggregate group volume size in megabytes.
                            volumes:
                                description: The actual volumes.
                                type: object
                                additionalProperties:
                                    type: object
                                    required:
                                        - name
                                        - size
                                        - data_percent
                                        - meta_percent
                                        - pool
                                    properties:
                                        name:
                                            type: string
                                            description: The name of the volume.
                                        size:
                                            type: integer
                                            description: The size in megabytes of the volume.
                                        data_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by data.
                                        meta_percent:
                                            type: integer
                                            description: The percent of the volumes size being used by meta data.
                                        pool:
                                            type: string
                                            description: The name of the volume pool this volume is associated with.
                mounts:
                    type: object
                    description: Records that show information about mounted filesystems where the key is the path to the mount.
                    additionalProperties:
                        title: MountedFS
                        type: object
                        description: Mounted filesystem information.
                        required:
                            - type
                            - total
                            - free
                            - used
                        properties:
                            device:
                                type: string
                                description: The device assocaited with the mount.
                            type:
                                type: string
                                description: The type of filesystem in use by the mount.
                            mountpoint:
                                type: string
                                description: The path the mount is associated with.
                            total:
                                type: integer
                                description: The total amount of storage in KB available at this mount.
                            free:
                                type: integer
                                description: The amount of uninitialized storage in KB.
                            used:
                                type: integer
                                description: The amount of storage being used in KB.
        ServerStatsOS:
            title: ServerStatsOS
            type: object
            description: Statistics about the operating system installed on the server (CycleOS).
            properties:
                release:
                    type: string
                    description: The currently installed release version of the OS.
                kernel:
                    type: string
                    description: The currently installed kernel version.
                hostname:
                    type: string
                    description: The hostname as set by the given server's OS.
        ServerStatsVersions:
            title: ServerStatsVersions
            type: object
            description: Information about the versions of Cycle services on a given server.
            required:
                - services
            properties:
                services:
                    description: A list of records about Cycle services.
                    type: object
                    additionalProperties:
                        type: string
        NodeMetaStats:
            title: NodeMetaStats
            type: object
            description: Statistics that pertain to a specific node.
            required:
                - network
                - uptime
                - cpu
                - load
                - ram
                - storage
                - os
                - versions
            properties:
                network:
                    $ref: "#/components/schemas/ServerStatsNetwork"
                uptime:
                    $ref: "#/components/schemas/ServerStatsUptime"
                cpu:
                    $ref: "#/components/schemas/ServerStatsCpu"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRam"
                storage:
                    $ref: "#/components/schemas/ServerStatsStorage"
                os:
                    $ref: "#/components/schemas/ServerStatsOS"
                versions:
                    $ref: "#/components/schemas/ServerStatsVersions"
        ServerMeta:
            title: ServerMeta
            type: object
            description: A list of meta fields that can be applied to a server.
            properties:
                node:
                    type: object
                    description: Infrormation about the status of the server.
                    required:
                        - last_checkin
                        - drivers
                        - state
                        - stats
                        - healthy
                        - online
                    properties:
                        last_checkin:
                            description: The last time this server checked in with the platform.
                            $ref: "#/components/schemas/DateTime"
                        drivers:
                            description: An array a drivers associated with the given server.
                            type: array
                            items:
                                type: string
                        state:
                            $ref: "#/components/schemas/NodeState"
                        stats:
                            $ref: "#/components/schemas/NodeMetaStats"
                        healthy:
                            type: boolean
                            description: A boolean where true means the platform is reporting the server as healthy.
                        online:
                            type: boolean
                            description: A boolean where true means the server is online and reachable by the platform.
                instances_count:
                    $ref: "#/components/schemas/StateCountSummary"
                allocations:
                    type: object
                    required:
                        - cpu_shares
                        - ram
                    properties:
                        cpu_shares:
                            type: object
                            required:
                                - total
                                - allocatable
                                - allocated
                            properties:
                                total:
                                    type: integer
                                allocatable:
                                    type: integer
                                allocated:
                                    type: integer
                        ram:
                            type: object
                            required:
                                - total_mb
                                - allocatable_mb
                                - allocated_mb
                            properties:
                                total_mb:
                                    type: integer
                                allocatable_mb:
                                    type: integer
                                allocated_mb:
                                    type: integer
        Server:
            title: Server
            x-ogen-name: InfraServer
            type: object
            description: The server resource, referring to servers that have been deployed to a Cycle hub.
            required:
                - id
                - hub_id
                - location_id
                - model_id
                - node_id
                - shared_file_systems
                - hostname
                - creator
                - provider
                - cluster
                - features
                - constraints
                - ephemeral
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                location_id:
                    type: string
                    description: An identifier for the location this server is deployed to.
                model_id:
                    type: string
                    description: An identifier for the model of server that is deployed.
                node_id:
                    type: string
                    description: An identifier for the node.
                shared_file_systems:
                    $ref: "#/components/schemas/ServerSharedFileSystems"
                hostname:
                    type: string
                    description: The server hostname.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                provider:
                    $ref: "#/components/schemas/ServerProvider"
                cluster:
                    type: string
                    description: The cluster the given server is deployed to.
                features:
                    $ref: "#/components/schemas/ServerFeatures"
                constraints:
                    $ref: "#/components/schemas/ServerConstraints"
                autoscale:
                    type:
                        - object
                        - "null"
                    required:
                        - group_id
                    properties:
                        group_id:
                            $ref: "#/components/schemas/ID"
                ephemeral:
                    type: boolean
                    description: Set to true when a server is created as part of an auto-scale event.
                evacuate:
                    type:
                        - object
                        - "null"
                    description: Details about a server's evacuation status. When an evacuation is in progress, no new container instances will be permitted on the server.
                    required:
                        - started
                    properties:
                        started:
                            description: The time when this server began evacuating instances.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/ServerState"
                events:
                    title: ServerEvents
                    type: object
                    description: A collection of timestamps for each event in the server's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - latest_instance
                        - provisioning
                    properties:
                        created:
                            description: The timestamp of when the server was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the server was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the server was deleted.
                            $ref: "#/components/schemas/DateTime"
                        latest_instance:
                            description: The timestamp of when the latest instance was deployed to this server.
                            $ref: "#/components/schemas/DateTime"
                        provisioning:
                            type: object
                            description: Information about the provisioning of the server.
                            required:
                                - started
                                - failed
                                - completed
                            properties:
                                started:
                                    description: A timestamp of when the server started provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                failed:
                                    description: A timestamp of when the server failed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                                completed:
                                    description: A timestamp of when the server completed provisioning.
                                    $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ServerMeta"
        ProviderLocationGeography:
            title: ProviderLocationGeography
            type: object
            description: Geographic information about a provider location.
            required:
                - latitude
                - longitude
                - city
                - state
                - country
                - region
            properties:
                latitude:
                    type: integer
                    description: The latitude of the given provider datacenter.
                longitude:
                    type: integer
                    description: The longitude of the given provider datacenter.
                city:
                    type: string
                    description: The city the datacenter resides in.
                state:
                    type: string
                    description: The state the datacenter resides in.
                country:
                    type: string
                    description: The country the datacenter resides in.
                region:
                    type: string
                    description: The region the datacenter resides in.
        ProviderLocationDetails:
            title: LocationProvider
            type: object
            description: Information about the locaiton of the provider.
            required:
                - identifier
                - location
                - code
            properties:
                identifier:
                    type: string
                    description: An identifier for the given provider
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: The ID of the provider integration associated with this location.
                location:
                    type: string
                    description: A location name returned from the provider.
                code:
                    type: string
                    description: A location code returned from the provider.
                availability_zones:
                    type: array
                    items:
                        type: string
        ProviderLocation:
            title: ProviderLocation
            type: object
            description: Location information for a given provider.
            required:
                - id
                - name
                - provider
                - compatible
                - features
                - abbreviation
                - annotations
            properties:
                id:
                    type: string
                name:
                    type: string
                    description: A name for the location.
                geographic:
                    anyOf:
                        - $ref: "#/components/schemas/ProviderLocationGeography"
                        - type: "null"
                provider:
                    $ref: "#/components/schemas/ProviderLocationDetails"
                compatible:
                    type: boolean
                    description: A boolean where true means the locaiton is supported by the platform.
                features:
                    type: object
                    description: Additional information about available and supported features of the provider location.
                    required:
                        - available
                        - supported
                    properties:
                        available:
                            description: Available features for the provider location.
                            type: array
                            items:
                                type: string
                        supported:
                            description: Supported features for the provider location.
                            type: array
                            items:
                                type: string
                abbreviation:
                    type: string
                    description: An abbreviation for the given provider locaiton.
                annotations:
                    type: object
                    description: Additional information about the given provider locaiton.
                    additionalProperties: {}
        LocationsIncludes:
            title: LocationIncludes
            description: A resource that is associated with a provider location.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderLocation"
        ClusterState:
            title: ClusterState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the cluster.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Cluster:
            title: Cluster
            type: object
            description: Clusters are groups of servers that allow physical separation of resources.
            required:
                - id
                - identifier
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    type: string
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this cluster.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/ClusterState"
                events:
                    title: ClusterEvents
                    type: object
                    description: A collection of timestamps for each event in the cluster's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the cluster was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the cluster was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the cluster was deleted.
                            $ref: "#/components/schemas/DateTime"
        CPUSpec:
            title: CPUServerSpec
            type: object
            description: Information about the CPU for a given server.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of CPUs.
                cores:
                    type: integer
                    description: The number of cores.
                threads:
                    type: integer
                    description: The number of threads.
                type:
                    type: string
                    description: The type of the CPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the CPU is shared.
                extra:
                    type: object
                    description: Extra information about the CPU if there is any.
                    additionalProperties:
                        type: string
        GPUSpec:
            title: GPUServerSpec
            type: object
            description: Information about a given servers GPU resources.
            required:
                - count
                - type
            properties:
                count:
                    type: integer
                    description: The number of GPUs.
                cores:
                    type: integer
                    description: The number of cores.
                vram_gb:
                    type: integer
                    description: The amount of virtaul RAM for the GPU.
                type:
                    type: string
                    description: The type of the GPU.
                shared:
                    type: boolean
                    description: A boolean where true represents the GPU is shared.
                extra:
                    type: object
                    description: Extra information about the GPU if there is any.
                    additionalProperties:
                        type: string
        MemorySpec:
            title: MemoryServerSpec
            type: object
            description: Information about the memory resources of a given server.
            required:
                - size_gb
                - type
                - extra
            properties:
                size_gb:
                    type: integer
                    description: A number that represents the memory resources in GB.
                type:
                    type: string
                    description: The type of the memory resources.
                extra:
                    type: object
                    description: Extra inforamtion about the memory resources.
                    additionalProperties:
                        type: string
        StorageSpec:
            title: StorageServerSpec
            type: object
            description: Information about the storage resources for a given server.
            required:
                - count
                - size_gb
                - type
                - extra
            properties:
                count:
                    type: integer
                    description: The number of storage devices for a given server.
                size_gb:
                    type: integer
                    description: The total amount of storage on a given server, in GB.
                type:
                    type: string
                    description: The type of the storage device(s).
                extra:
                    type: object
                    description: Extra information about the storage resources for a given server.
                    additionalProperties:
                        type: string
        NetworkSpec:
            title: NetworkServerSpec
            type: object
            description: Information about the network resources for a given server.
            required:
                - count
                - scope
                - throughput
                - type
            properties:
                count:
                    type: integer
                    description: The number of network resources for a given server.
                scope:
                    type: string
                    description: The scope of the interfaces.
                    enum:
                        - public
                        - private
                        - shared
                throughput:
                    type: integer
                    description: The network throughput in MB(per second).
                type:
                    type: string
                    description: The type of the NIC.
        FeaturesSpec:
            title: FeaturesServerSpec
            type: object
            required:
                - raid
            description: The spec for server features.
            properties:
                raid:
                    type:
                        - string
                        - "null"
                    description: The type of RAID supported, if any.
                hypervisor:
                    description: Indicates if the model supports virtual machines.
                    type:
                        - boolean
                        - "null"
                extra:
                    type:
                        - object
                        - "null"
                    description: Provider specific features, allowing for additional, unspecified properties. This is an open map for any key-value pairs, accommodating various types of values.
                    additionalProperties: true
        ServerSpecs:
            title: ServerSpecs
            description: Specs for a given server
            type: object
            required:
                - cpu
                - gpu
                - memory
                - storage
                - network
                - features
            properties:
                cpu:
                    $ref: "#/components/schemas/CPUSpec"
                gpu:
                    $ref: "#/components/schemas/GPUSpec"
                memory:
                    $ref: "#/components/schemas/MemorySpec"
                storage:
                    type: array
                    items:
                        $ref: "#/components/schemas/StorageSpec"
                network:
                    type: array
                    items:
                        $ref: "#/components/schemas/NetworkSpec"
                features:
                    $ref: "#/components/schemas/FeaturesSpec"
        ProviderServerSpec:
            title: ProviderServerSpec
            type: object
            description: Higher level information about a providers server.
            required:
                - identifier
                - category
                - model
                - locations
            properties:
                identifier:
                    type: string
                    description: A provider identifier
                integration_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                category:
                    type: string
                    description: A category for the server.
                class:
                    type: string
                    description: A class for the server.
                model:
                    type: string
                    description: The model of the server.
                locations:
                    description: A list of location ID's this server is available.
                    type: array
                    items:
                        type: string
                availability_zones:
                    type: object
                    additionalProperties:
                        type: array
                        items:
                            type: string
        ProviderServerModel:
            title: ProviderServerModel
            type: object
            description: A server from a provider.
            required:
                - id
                - name
                - description
                - specs
                - provider
                - price
                - compatible
                - low_resource
                - location_ids
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A name for the server.
                description:
                    type: string
                    description: A description of the server.
                specs:
                    $ref: "#/components/schemas/ServerSpecs"
                provider:
                    $ref: "#/components/schemas/ProviderServerSpec"
                price:
                    $ref: "#/components/schemas/BillingAmount"
                compatible:
                    type: boolean
                    description: A boolean where true signifies this server is compatible with the platform.
                low_resource:
                    type: boolean
                    description: A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads.
                location_ids:
                    description: An array of location IDs where this server type is available.
                    type: array
                    items:
                        type: string
        ServerModelIncludes:
            title: ServerModelIncludes
            description: A resources that assocaited with a provider server.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderServerModel"
        IntegrationAuth:
            title: IntegrationAuth
            type: object
            properties:
                region:
                    type:
                        - string
                        - "null"
                    description: The region associated with the Integration.
                namespace:
                    type:
                        - string
                        - "null"
                    description: The namespace associated with the Integration.
                api_key:
                    type:
                        - string
                        - "null"
                    description: API key for accessing the Integration.
                key_id:
                    type:
                        - string
                        - "null"
                    description: Key ID for accessing the Integration.
                secret:
                    type:
                        - string
                        - "null"
                    description: Secret for accessing the Integration.
                subscription_id:
                    type:
                        - string
                        - "null"
                    description: Subscription ID for the Integration.
                client_id:
                    type:
                        - string
                        - "null"
                    description: Client ID for the Integration.
                base64_config:
                    type:
                        - string
                        - "null"
                    description: Base64 encoded configuration for the Integration.
        IntegrationState:
            title: IntegrationState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the integration.
                          type: string
                          enum:
                              - new
                              - verifying
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        IntegrationAdvancedOptionBoolean:
            title: IntegrationAdvancedOptionBoolean
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - bool
                default:
                    type:
                        - boolean
                        - "null"
        IntegrationAdvancedOptionInt:
            title: IntegrationAdvancedOptionInt
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - int
                default:
                    type:
                        - integer
                        - "null"
        IntegrationAdvancedOptionString:
            title: IntegrationAdvancedOptionString
            type: object
            required:
                - title
                - key
                - type
            properties:
                title:
                    type: string
                key:
                    type: string
                type:
                    type: string
                    enum:
                        - string
                default:
                    type:
                        - string
                        - "null"
        IntegrationDefinition:
            title: IntegrationDefinition
            description: Describes an integration for a Cycle Hub that can be enabled by the Hub owner.
            type: object
            required:
                - vendor
                - name
                - supports_verification
                - supports_multiple
                - required_fields
                - url
                - public
                - usable
                - editable
            properties:
                vendor:
                    type: string
                name:
                    type: string
                supports_verification:
                    type: boolean
                supports_multiple:
                    type: boolean
                features:
                    type:
                        - array
                        - "null"
                    description: A list of additional features supported by this Integration.
                    items:
                        type: string
                extends:
                    type:
                        - array
                        - "null"
                    description: A list of functionality that this integration extends. i.e. ["backups"]
                    items:
                        type: string
                extended_configuration:
                    type:
                        - object
                        - "null"
                    description: Additional configuration options that are available when using this Integration. These describe additional functionality that Cycle may utilize.
                    properties:
                        options:
                            type:
                                - array
                                - "null"
                            items:
                                type: object
                                discriminator:
                                    propertyName: type
                                    mapping:
                                        bool: "#/components/schemas/IntegrationAdvancedOptionBoolean"
                                        int: "#/components/schemas/IntegrationAdvancedOptionInt"
                                        string: "#/components/schemas/IntegrationAdvancedOptionString"
                                oneOf:
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionBoolean"
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionInt"
                                    - $ref: "#/components/schemas/IntegrationAdvancedOptionString"
                fields:
                    type: object
                    properties:
                        extra:
                            type:
                                - object
                                - "null"
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type:
                                            - string
                                            - "null"
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                        auth:
                            type:
                                - object
                                - "null"
                            additionalProperties:
                                type: object
                                required:
                                    - description
                                    - required
                                properties:
                                    regex:
                                        type:
                                            - string
                                            - "null"
                                    required:
                                        type: boolean
                                    description:
                                        type: string
                url:
                    type: string
                    format: uri
                public:
                    type: boolean
                usable:
                    type: boolean
                editable:
                    type: boolean
                    description: If true, the Integration can be edited. Otherwise, to make a change it will need to be deleted and recreated.
        IntegrationMeta:
            title: IntegrationMeta
            type: object
            description: Additional fields that can be requested for an Integration on fetch.
            properties:
                definition:
                    $ref: "#/components/schemas/IntegrationDefinition"
                    description: The full Integration definition associated with this Integration.
        Integration:
            title: Integration
            type: object
            required:
                - id
                - identifier
                - name
                - vendor
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: Name of the integration.
                vendor:
                    type: string
                    description: Which vendor this integration is associated with.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                auth:
                    description: Authentication information for the integration, can be null.
                    anyOf:
                        - $ref: "#/components/schemas/IntegrationAuth"
                        - type: "null"
                extra:
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: string
                    description: Additional key-value pairs associated with the integration.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/ID"
                    description: Identifier of the hub associated with the integration.
                state:
                    $ref: "#/components/schemas/IntegrationState"
                events:
                    title: IntegrationEvents
                    type: object
                    description: A collection of timestamps for each event in the integration's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the integration was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the integration was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the integration was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    anyOf:
                        - $ref: "#/components/schemas/IntegrationMeta"
                        - type: "null"
        IntegrationsIncludes:
            title: IntegrationsIncludes
            description: A resource that is associated with an integration.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Integration"
        ServerIncludes:
            title: ServerIncludes
            type: object
            description: A resource associated with a server.
            properties:
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
                clusters:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Cluster"
                models:
                    $ref: "#/components/schemas/ServerModelIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
        EnvironmentNetworkSummary:
            title: EnvironmentNetworkSummary
            type: object
            description: Details about the environment network this instance is a member of.
            required:
                - id
                - network_subnet
                - subnet
                - ipv6
                - legacy
                - mac_addr
                - vxlan_tag
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                network_subnet:
                    type: string
                subnet:
                    type: string
                ipv6:
                    anyOf:
                        - $ref: "#/components/schemas/IPNet"
                        - type: "null"
                legacy:
                    type:
                        - object
                        - "null"
                    required:
                        - host
                        - subnet
                        - ipv4
                    properties:
                        host:
                            type: integer
                        subnet:
                            type: integer
                        ipv4:
                            anyOf:
                                - $ref: "#/components/schemas/IPNet"
                                - type: "null"
                mac_addr:
                    type: string
                vxlan_tag:
                    type: integer
        InstanceProvider:
            title: InstanceProvider
            type: object
            required:
                - vendor
                - integration_id
                - location
            properties:
                vendor:
                    type: string
                    description: The vendor of the hub provider integration related to the server this instance runs on.
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: An ID of the provider Hub integration that this instance's host node is related to.
                location:
                    type: string
                    description: The identifier of the location related to the server this instance runs on.
        InstanceState:
            title: InstanceState
            description: Information about the state of an instance.
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the instance.
                          type: string
                          enum:
                              - new
                              - starting
                              - migrating
                              - running
                              - stopping
                              - stopped
                              - failed
                              - deleting
                              - deleted
                      health:
                          type:
                              - object
                              - "null"
                          description: information about the health of the instance.
                          required:
                              - healthy
                              - updated
                          properties:
                              healthy:
                                  type:
                                      - boolean
                                      - "null"
                                  description: |
                                      Describes the healthiness of the instance. Health checks can be configured at the container level. 
                                      - `true`: The instance is considered healthy.
                                      - `false`: The instance is considered unhealthy.
                                      - `null`: The instance has not yet reported its health, or a health check has not yet been performed.
                              updated:
                                  description: A timestamp of the last time the instance health was updated.
                                  $ref: "#/components/schemas/DateTime"
                - $ref: "#/components/schemas/State"
        InstanceAutoScale:
            title: InstanceAutoScale
            description: Auto-scale details for instances created by auto-scale events.
            type: object
            required:
                - min_ttl
            properties:
                min_ttl:
                    $ref: "#/components/schemas/DateTime"
        MigrationInstance:
            title: MigrationInstance
            type: object
            description: Information about a migrated instance.
            required:
                - instance_id
                - server_id
            properties:
                instance_id:
                    type: string
                    description: The ID of the instance.
                server_id:
                    type: string
                    description: The ID of the server.
        InstanceMigration:
            title: InstanceMigration
            type: object
            description: Information regarding the migration of an instance, such as the server that the instance came from or the server that the instance was moved to.
            required:
                - key
                - copy_volumes
            properties:
                to:
                    anyOf:
                        - $ref: "#/components/schemas/MigrationInstance"
                        - type: "null"
                from:
                    anyOf:
                        - $ref: "#/components/schemas/MigrationInstance"
                        - type: "null"
                started:
                    description: A timestamp of when the migration was started.
                    $ref: "#/components/schemas/DateTime"
                completed:
                    description: A timestamp of when the migration was completed.
                    $ref: "#/components/schemas/DateTime"
                key:
                    type: string
                    description: A key used by the platform to verify the migration.
                copy_volumes:
                    type: boolean
                    description: A boolean where true represents the volumes for the instance should be copied to the new server as well.
        Instance:
            title: Instance
            type: object
            description: An instance of a Container.
            required:
                - id
                - creator
                - hub_id
                - container_id
                - location_id
                - environment
                - provider
                - server_id
                - ready_state
                - hostname
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                container_id:
                    type: string
                    description: A container identifier for the container that is associated with this instance.
                location_id:
                    type: string
                    description: A location identifier that's associated with the server this instance is deployed to.
                environment:
                    $ref: "#/components/schemas/EnvironmentNetworkSummary"
                stateful:
                    type:
                        - object
                        - "null"
                    description: If the instance is stateful, additional details relating to its stateful properties.
                    required:
                        - id
                        - base_hostname
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        base_hostname:
                            type: string
                            description: The base hostname for the given instance.
                function:
                    type: object
                    description: If the instance is a function, additional details relating to its function properties
                    required:
                        - seed
                    properties:
                        seed:
                            type: integer
                            description: The seed used for this function.
                provider:
                    $ref: "#/components/schemas/InstanceProvider"
                server_id:
                    $ref: "#/components/schemas/ID"
                    description: An identifier for the server this instance is deployed to.
                ready_state:
                    type: string
                    description: The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run. * `configuring` - this instance is not allowed to start yet
                    enum:
                        - active
                        - purge
                        - hibernate
                        - configuring
                purge_time:
                    description: The timestamp of when the instance was purged.
                    anyOf:
                        - $ref: "#/components/schemas/DateTime"
                        - type: "null"
                hostname:
                    type: string
                    description: The hostname of the instance.
                service:
                    $ref: "#/components/schemas/ServiceContainerIdentifier"
                    description: The type of service this instance is within the environment, if any.
                extension:
                    anyOf:
                        - $ref: "#/components/schemas/ContainerExtension"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/InstanceState"
                autoscale:
                    anyOf:
                        - $ref: "#/components/schemas/InstanceAutoScale"
                        - type: "null"
                migration:
                    anyOf:
                        - $ref: "#/components/schemas/InstanceMigration"
                        - type: "null"
                deployment:
                    anyOf:
                        - $ref: "#/components/schemas/Deployment"
                        - type: "null"
                events:
                    title: InstanceEvents
                    description: A collection of timestamps for each event in the instance's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the instance was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the instance was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the instance was deleted.
                            $ref: "#/components/schemas/DateTime"
        ServersIncludes:
            title: ServerIncludes
            description: A resource that is associated with a server.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/Server"
        ContainersIncludes:
            title: ContainersIncludes
            type: object
            description: A resource that is associated with a container.
            additionalProperties:
                $ref: "#/components/schemas/Container"
        InstanceIncludes:
            title: InstanceIncludes
            description: A resource associated with an instance.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                servers:
                    $ref: "#/components/schemas/ServersIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                containers:
                    $ref: "#/components/schemas/ContainersIncludes"
                containers:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
                environments:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        SSHToken:
            title: SSHToken
            type: object
            description: An Instance SSH token.
            required:
                - id
                - instance_id
                - container_id
                - hub_id
                - creator
                - events
                - valid
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                instance_id:
                    type: string
                    description: The ID of the instance being connected to.
                container_id:
                    type: string
                    description: The ID of the container from which the instance was created.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    title: SSHTokenEvents
                    type: object
                    description: A collection of timestamps for each event in the SSH token's lifetime.
                    required:
                        - created
                        - used
                        - expires
                    properties:
                        created:
                            description: The timestamp of when the SSH token was created.
                            $ref: "#/components/schemas/DateTime"
                        used:
                            description: The timestamp of when the SSH token was used.
                            $ref: "#/components/schemas/DateTime"
                        expires:
                            description: The timestamp of when the SSH token expires.
                            $ref: "#/components/schemas/DateTime"
                valid:
                    type: boolean
                    description: A boolean where true represents the token as being a valid token to be used for connection.
        SSHResponse:
            title: SSHConnectionResponse
            type: object
            description: SSH connection information for a given container instance.
            required:
                - token
                - secret
                - address
            properties:
                token:
                    $ref: "#/components/schemas/SSHToken"
                secret:
                    type: string
                    description: The SSH connection response secret.
                address:
                    type: string
                    description: The SSH connection response address.
        Migrate:
            title: MigrateAction
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - migration.start
                    description: The name of the action to perform.
                contents:
                    type: object
                    required:
                        - destination_server_id
                    properties:
                        destination_server_id:
                            type: string
                            description: The ID of the server being migrated to.
                        stateful:
                            type: object
                            description: Information about additonal configuration settings used when migrating a stateful instance.
                            required:
                                - copy_volumes
                            properties:
                                copy_volumes:
                                    type: boolean
                                    description: A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration.
        RevertMigration:
            title: RevertMigrationAction
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - migration.revert
                    description: The name of the action to perform.
        ExtendVolume:
            title: ExtendVolumeAction
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - volume.extend
                    description: The name of the action to perform.
                contents:
                    type: object
                    required:
                        - volume_id
                        - extend_size
                    properties:
                        volume_id:
                            description: The ID of the volume that will be extended through this task.
                            type: string
                        extend_size:
                            type: string
                            description: The amount of storage to extend the volume by. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size.
                            examples:
                                - 10G
        DeployedVolume:
            title: DeployedVolume
            type: object
            description: A deployed volume resource.
            required:
                - id
                - server_id
                - container_id
                - container_volume_id
                - instance_id
                - hash
                - path
                - storage
                - last_updated
            properties:
                id:
                    type: string
                    description: The ID of the deployed volume.
                server_id:
                    type: string
                    description: The ID of the server the instance is deployed to.
                container_id:
                    type: string
                    description: The ID of the container the instance was created from.
                container_volume_id:
                    type: string
                    description: The ID for the volume withing the context of the container.
                instance_id:
                    type: string
                    description: The ID for the container instance this volume is attached to.
                hash:
                    type: string
                    description: A hash used as part of the identification mechanisms for the platform and API.
                path:
                    type: string
                    description: The path where the volume is mounted on the instnace filesystem.
                storage:
                    type: object
                    description: Storage information for the volume.
                    required:
                        - used
                        - total
                    properties:
                        used:
                            type: integer
                            description: The amount of volume storage used, in MB's
                        total:
                            type: integer
                            description: The total amount of volume storage available, in MB's.
        SFTP:
            title: InstanceVolumeSFTP
            type: object
            description: Information about connecting to a instance volume over SFTP.
            required:
                - host
                - port
                - username
                - password
            properties:
                host:
                    type: string
                    description: The hostname for connecting to the volume over SFTP.
                port:
                    type: number
                    description: The port number to use when connecting.
                username:
                    type: string
                    description: The username to use when connecting.
                password:
                    type: object
                    description: Password configuration settings for the remote access of the container volume.
                    required:
                        - algorithm
                        - data
                    properties:
                        algorithm:
                            type: string
                            description: The hashing algorithm used to has the password.
                            enum:
                                - raw
                                - sha512
                                - md5
                        data:
                            type: string
                            description: The raw or hashed password.
        InstanceVolume:
            title: InstanceVolume
            type: object
            description: A container instance volume resource.
            required:
                - id
                - config
                - deployed
                - sftp
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                config:
                    $ref: "#/components/schemas/ContainerVolume"
                deployed:
                    $ref: "#/components/schemas/DeployedVolume"
                sftp:
                    $ref: "#/components/schemas/SFTP"
        TelemetryReportRequest:
            title: InstanceTelemetryReportRequest
            type: object
            description: A summary of report requests and when they occured.
            required:
                - instance_id
                - start
                - end
            properties:
                instance_id:
                    type: string
                    description: The ID of the instance this telemetry reporting pertains to.
                start:
                    description: A timestamp of when the snapshot began.
                    $ref: "#/components/schemas/DateTime"
                end:
                    description: A timestamp of when the snapshot ended.
                    $ref: "#/components/schemas/DateTime"
        CPUSnapshot:
            title: InstanceTelemetryCPUSnapshot
            type: object
            description: A telemetry snapshot pertaining to CPU usage.
            required:
                - num_cores
                - usage
                - throttling
            properties:
                num_cores:
                    type: integer
                    description: The total number of cores on the originating node the instance is running on.
                usage:
                    type: object
                    description: Usage statistics.
                    required:
                        - total
                        - kernel
                        - user
                    properties:
                        total:
                            type: integer
                            description: Total amount of VPU time since last restart.
                        kernel:
                            type: integer
                            description: The amount of time in nanoseconds used by the kernel since last restart.
                        user:
                            type: number
                            description: The amount of time in nanoseconds taken up for user processes.
                throttling:
                    type: object
                    description: Throttling statistics.
                    properties:
                        periods:
                            type: integer
                            description: The amount of periods that have passed since the last restart.
                        throttled_periods:
                            type: integer
                            description: How many times the instance has been throttled for using all its alloted CPU during a period.
                        throttled_time:
                            type: integer
                            description: The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
        MemoryData:
            title: MemoryData
            type: object
            properties:
                usage:
                    type: number
                    description: The number in bytes of memory being used by the instance at the time of the snapshot.
                max_usage:
                    type: number
                    description: The highest amoun tof memory usage since the last restart.
                fail_count:
                    type: number
                    description: The number of times the memory liimit was exceeded for the instance.
                limit:
                    type: number
                    description: The maximum number of bytes of memory this instance has acess to.
        MemorySnapshot:
            title: InstanceTelemetryMemorySnapshot
            type: object
            description: A snapshot of memory usage statistics.
            properties:
                cache:
                    type: number
                    description: The number of bytes of page cache memory being used by this instance.
                usage:
                    description: The memory usage data.
                    $ref: "#/components/schemas/MemoryData"
                swap_usage:
                    description: Memory swap usage data.
                    $ref: "#/components/schemas/MemoryData"
                kernel_usage:
                    description: Kernal memory usage.
                    $ref: "#/components/schemas/MemoryData"
                kernel_tcp_usage:
                    description: Kernel TCP buffer usage.
                    $ref: "#/components/schemas/MemoryData"
        ProcessesSnapshot:
            title: InstanceTelemetryProcessesSnapshot
            type: object
            description: Process information for a given snapshot.
            properties:
                current:
                    type: number
                    description: The current number of running processes in the instance.
                limit:
                    type: number
                    description: The maximum number of running processes for the instance.
        NetworkSnapshot:
            title: InstanceTelemetryNetworkSnapshot
            type: object
            description: A snapshot of network usage statistics.
            required:
                - interfaces
            properties:
                interfaces:
                    type: array
                    description: An array of network interfaces attached to this instance.
                    items:
                        type: object
                        title: InstanceTelemetryNetworkInterfaceSnapshot
                        required:
                            - name
                            - rx_bytes
                            - tx_bytes
                        properties:
                            name:
                                type: string
                            rx_bytes:
                                type: integer
                            tx_bytes:
                                type: integer
        HugeTLB:
            title: HugeTLB
            type: object
            description: HugeTLB data.
            properties:
                usage:
                    type: integer
                    description: The number of bytes being consumed by huge pages of all sizes.
                max:
                    type: integer
                    description: The maximum number of bytes allowed to be used for huge pages for this instance.
                fail_count:
                    type: integer
                    description: The number of times the hugeTLB memory limit has been exceeded by this instance.
        ResourceSnapshot:
            title: InstanceTelemetryResourceSnapshot
            description: A resource snapshot that shows instance telemetry.
            type: object
            required:
                - time
                - cpu
                - memory
                - processes
                - network
            properties:
                time:
                    description: A timestamp of the time this snapshot was captured at.
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    anyOf:
                        - $ref: "#/components/schemas/HubID"
                        - type: "null"
                container_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                instance_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                environment_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                server_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                cluster:
                    anyOf:
                        - $ref: "#/components/schemas/Identifier"
                        - type: "null"
                cpu:
                    $ref: "#/components/schemas/CPUSnapshot"
                memory:
                    $ref: "#/components/schemas/MemorySnapshot"
                processes:
                    $ref: "#/components/schemas/ProcessesSnapshot"
                network:
                    $ref: "#/components/schemas/NetworkSnapshot"
                hugetlb:
                    $ref: "#/components/schemas/HugeTLB"
        InstanceTelemetryReport:
            title: InstanceTelemetryReport
            type: object
            description: An Instance telemetry report.
            required:
                - request
                - snapshots
            properties:
                request:
                    $ref: "#/components/schemas/TelemetryReportRequest"
                snapshots:
                    description: An array of telemetry snapshots.
                    type: array
                    items:
                        $ref: "#/components/schemas/ResourceSnapshot"
        FunctionRuntimeVariables:
            title: FunctionRuntimeVariables
            description: Variables that affect the runtime of a function container.
            type: object
            properties:
                environment_variables:
                    description: Environment variables to inject into the container.
                    type:
                        - object
                        - "null"
                    additionalProperties:
                        type: string
        trigger:
            title: TriggerAction
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - trigger
                    description: The name of the action to perform.
                contents:
                    type: object
                    required:
                        - token
                        - runtime_variables
                    properties:
                        token:
                            description: A custom token used for identifying and managing a claim. Can be any valid string 5 characters or more.
                            type: string
                        runtime_variables:
                            $ref: "#/components/schemas/FunctionRuntimeVariables"
        ContainerBackupTarget:
            title: ContainerBackupTarget
            type: object
            description: A target for the given Container Backup.
            required:
                - integration_id
                - path
                - size
                - file_id
            properties:
                integration_id:
                    $ref: "#/components/schemas/HybridIdentifier"
                path:
                    type: string
                    description: The target for where to store the Container Backup on the destination service.
                file_id:
                    type: string
                size:
                    type: integer
                    description: The total size of the backup.
        ContainerBackupState:
            title: ContainerBackupState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the Container Backup.
                          type: string
                          enum:
                              - saving
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ContainerBackup:
            title: ContainerBackup
            type: object
            description: A Container Backup.
            required:
                - id
                - hub_id
                - container_id
                - instance_id
                - target
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                container_id:
                    type: string
                    description: The ID of the given container.
                instance_id:
                    type: string
                    description: The ID of the instance the backup belongs to.
                target:
                    $ref: "#/components/schemas/ContainerBackupTarget"
                state:
                    $ref: "#/components/schemas/ContainerBackupState"
                events:
                    title: BackupEvents
                    type: object
                    description: A collection of timestamps for each event in the backup's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the backup was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the backup was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the backup was deleted.
                            $ref: "#/components/schemas/DateTime"
        ContainerBackupIncludes:
            title: ContainerBackupIncludes
            description: All includable resources linkable to the given Zone.
            type: object
            properties:
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
        ContainerBackupLogs:
            title: ContainerBackupLogs
            type: object
            description: Backup logs for a given container.
            required:
                - id
                - container_id
                - instance_id
                - backup_id
                - hub_id
                - type
                - log
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                container_id:
                    type: string
                    description: An identifier for the container.
                instance_id:
                    type: string
                    description: An identifier for the instance.
                backup_id:
                    type: string
                    description: An identifier for the backup.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                type:
                    type: string
                    description: The type of the backup log.
                    enum:
                        - restore
                        - backup
                log:
                    type: string
                    description: The log.
                error:
                    type:
                        - object
                        - "null"
                    required:
                        - message
                    properties:
                        message:
                            type: string
                        message_internal:
                            type: string
                        stack:
                            type: array
                            items:
                                type: object
                                required:
                                    - file
                                    - function
                                    - line
                                properties:
                                    file:
                                        type: string
                                    function:
                                        type: string
                                    line:
                                        type: integer
                events:
                    title: BackupLogEvents
                    type: object
                    description: A collection of timestamps for each event in the backup log's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the backup log was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the backup log was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the backup log was deleted.
                            $ref: "#/components/schemas/DateTime"
        ZoneState:
            title: DNSZoneState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the zone.
                          type: string
                          enum:
                              - new
                              - pending
                              - verifying
                              - live
                              - disabled
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Zone:
            title: DNSZone
            type: object
            description: DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.
            required:
                - id
                - hub_id
                - creator
                - origin
                - hosted
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                origin:
                    type: string
                    description: The origin for the given DNS zone.
                hosted:
                    type: boolean
                    description: A boolean where true represents this zone is a hosted zone.
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/ZoneState"
                events:
                    title: ZoneEvents
                    type: object
                    description: A collection of timestamps for each event in the DNS zone's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_verification
                        - verified
                    properties:
                        created:
                            description: The timestamp of when the DNS zone was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the DNS zone was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the DNS zone was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_verification:
                            description: The timestamp of when the DNS zone was last_verification.
                            $ref: "#/components/schemas/DateTime"
                        verified:
                            description: The timestamp of when the DNS zone was verified.
                            $ref: "#/components/schemas/DateTime"
        ZoneIncludes:
            title: ZoneIncludes
            description: All includable resources linkable to the given Zone.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        RecordIncludes:
            title: RecordIncludes
            description: All includable resources linkable to the given records.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                containers:
                    $ref: "#/components/schemas/ContainersIncludes"
                containers:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        Attempt:
            title: DNSTLSAttempt
            type: object
            description: A DNS TLS certificate generation attempt resource.
            required:
                - id
                - hub_id
                - domains
                - time
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                domains:
                    description: A list of domains associated with the attempt.
                    type: array
                    items:
                        type: string
                time:
                    description: A timestamp for when the attempt took place.
                    $ref: "#/components/schemas/DateTime"
                success:
                    description: A boolean where true means the attept was successful at creating the TLS certificate.
                    type: boolean
                error:
                    type: string
                    description: If success is false this property will be populated with an error.
        TlsCertificate:
            title: TlsCertificate
            type: object
            description: A TLS certificate.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                user_supplied:
                    type: boolean
                    description: Whether or not this certificate was uploaded instead of generated by the platform.
                domains:
                    anyOf:
                        - description: A list of domains associated with the certificate.
                          type: array
                          items:
                              type: string
                        - type: "null"
                hub_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                expires:
                    $ref: "#/components/schemas/DateTime"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the TLS certificate.
                                  type: string
                                  enum:
                                      - new
                                      - processing
                                      - live
                                      - deprecated
                        - $ref: "#/components/schemas/State"
                events:
                    title: TlsCertificateEvents
                    type: object
                    description: A collection of timestamps for each event in the TLS certificate's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - generated
                    properties:
                        created:
                            description: The timestamp of when the TLS certificate was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the TLS certificate was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the TLS certificate was deleted.
                            $ref: "#/components/schemas/DateTime"
                        generated:
                            description: The timestamp of when the TLS certificate was generated.
                            $ref: "#/components/schemas/DateTime"
            required:
                - id
                - user_supplied
                - domains
                - state
                - events
                - expires
        MonitoringTierDetails:
            title: MonitoringTierDetails
            type: object
            description: Detailed information about a monitoring tier's features.
            required:
                - enabled
                - metrics
                - events
                - logs
                - features
                - cost_mills
            properties:
                enabled:
                    type: boolean
                    description: Whether or not this tier is a selectable monitoring tier for an environment. A disabled tier may be either one coming in the future, or a legacy tier that is no longer available, but saved for historical reasons.
                metrics:
                    type: object
                    description: Details on how metrics are handled for this tier.
                    required:
                        - service_granularity
                        - container_telemetry_granularity
                        - retention_period
                        - downsample_period
                        - custom
                    properties:
                        service_granularity:
                            $ref: "#/components/schemas/Duration"
                        container_telemetry_granularity:
                            $ref: "#/components/schemas/Duration"
                        retention_period:
                            $ref: "#/components/schemas/Duration"
                        downsample_period:
                            $ref: "#/components/schemas/Duration"
                        custom:
                            type: boolean
                            description: Whether or not custom user-submitted metrics are supported on this tier.
                events:
                    type: object
                    description: Details on how events are handled for this tier.
                    required:
                        - retention_period
                        - custom
                    properties:
                        retention_period:
                            $ref: "#/components/schemas/Duration"
                        custom:
                            type: boolean
                            description: Whether or not custom user-submitted events are supported on this tier.
                logs:
                    type: object
                    description: Details on how logs are handled for this tier.
                    required:
                        - analysis
                        - aggregation
                        - custom
                    properties:
                        analysis:
                            type: boolean
                            description: Whether or not log analysis is enabled on this tier.
                        aggregation:
                            type: boolean
                            description: Whether or not log aggregation is enabled on this tier.
                        custom:
                            type: boolean
                            description: Whether or not custom user-submitted logs are supported on this tier.
                features:
                    type: object
                    required:
                        - public_ping_monitor
                    properties:
                        public_ping_monitor:
                            type: boolean
                cost_mills:
                    type: integer
                    description: The monthly cost (in mills) of enabling this tier on an environment.
        EnvironmentStartAction:
            title: EnvironmentStartAction
            description: A task to start an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - start
                    description: The name of the action to perform.
        EnvironmentStopAction:
            title: EnvironmentStopAction
            description: A task to stop an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - stop
                    description: The name of the action to perform.
        EnvironmentInitializeAction:
            title: EnvironmentInitializeAction
            description: A task to initialize an environment.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - initialize
                    description: The name of the action to perform.
        EnvironmentReconfigureDeploymentsAction:
            title: EnvironmentReconfigureDeploymentsAction
            description: A task to reconfigure deployment mappings on an environment.
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - deployments.reconfigure
                    description: The action to take.
                contents:
                    type: object
                    required:
                        - tags
                    properties:
                        tags:
                            $ref: "#/components/schemas/EnvironmentDeploymentTags"
        EnvironmentServiceContainerSummary:
            title: EnvironmentServiceContainerSummary
            type: object
            description: An object containing information about a service container associated with this environment.
            required:
                - enable
                - state
                - high_availability
            properties:
                enable:
                    type: boolean
                    description: Whether or not the service is enabled.
                container_id:
                    anyOf:
                        - $ref: "#/components/schemas/ID"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/ContainerState"
                high_availability:
                    type: boolean
                    description: Whether or not the service is deployed in high availability
                auto_update:
                    type: boolean
                    description: Whether or not the service will be automatically updated as new versions are released. Otherwise, the service will need to be restarted manually.
        EnvironmentSummary:
            title: EnvironmentSummary
            type: object
            description: Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
            required:
                - id
                - state
                - services
                - stats
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                state:
                    $ref: "#/components/schemas/EnvironmentState"
                services:
                    title: EnvironmentServiceSummary
                    type: object
                    description: An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
                    properties:
                        loadbalancer:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                                - type: "null"
                        discovery:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                                - type: "null"
                        vpn:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                                - type: "null"
                        scheduler:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                                - type: "null"
                        gateway:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentServiceContainerSummary"
                                - type: "null"
                stats:
                    title: EnvironmentSummaryStats
                    type: object
                    description: Statistics about the containers and instances associated with this environment.
                    required:
                        - containers
                        - instances
                    properties:
                        containers:
                            $ref: "#/components/schemas/StateCountSummary"
                        instances:
                            $ref: "#/components/schemas/StateCountSummary"
        ScopedVariableScope:
            title: ScopedVariableScope
            type: object
            description: Information about the assignment of the scoped variable and how it is invoked.
            required:
                - containers
            properties:
                containers:
                    type: object
                    description: Information about the assignment of the scoped variable to different containers in the environment.
                    required:
                        - global
                        - ids
                        - identifiers
                    properties:
                        global:
                            type: boolean
                            description: A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment.
                        ids:
                            type: array
                            description: An array of container IDs, where each container identified will have access to the scoped variable.
                            items:
                                type: string
                        identifiers:
                            type: array
                            description: An array of container identifiers, where each container identfied will have access to the scoped variable.
                            items:
                                type: string
        ScopedVariableAccess:
            title: ScopedVariableAccess
            type: object
            description: The way the scoped variable is accessed.
            properties:
                env_variable:
                    type:
                        - object
                        - "null"
                    required:
                        - key
                    properties:
                        key:
                            description: The name of the environment variable set on the target container.
                            type: string
                    description: When set to true, this scoped variable is set as an environment variable inside the container.
                internal_api:
                    description: If set, this scoped variable will be available over the internal API. Contains settings for accessing this variable over the internal API.
                    type:
                        - object
                        - "null"
                    properties:
                        duration:
                            description: Duration is a time string that the internal API will serve that variable after runtime starts.
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
                file:
                    description: File is an object that describes a path to mount the file to inside the container.
                    type:
                        - object
                        - "null"
                    x-ogen-properties:
                        decode:
                            name: DecodeBase64
                    required:
                        - decode
                        - path
                    properties:
                        decode:
                            description: When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before passing it into the container.
                            type: boolean
                        path:
                            type:
                                - string
                                - "null"
                            description: The path to mount the file to inside the container.
                            examples:
                                - /var/run/cycle/variables/<myVariable>
        URLSource:
            title: URLScopedVariableSource
            type: object
            description: The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of source value, can be either `raw` or `url`.
                    enum:
                        - url
                details:
                    type: object
                    required:
                        - url
                        - headers
                        - auth_token_url
                    properties:
                        url:
                            type: string
                            description: The URL to call to produce the value.
                        headers:
                            type: object
                            description: Additional headers that can be attached to the URL request. Useful for adding metadata to third-party services.
                            additionalProperties: {}
                        auth_token_url:
                            type:
                                - string
                                - "null"
                            description: A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret.
        RawSource:
            title: RawScopedVariableSource
            type: object
            description: The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is static, not the result of a call to an external or internal URL.
            required:
                - type
                - details
            properties:
                type:
                    type: string
                    description: The type of source value, can be either `raw` or `url`.
                    enum:
                        - raw
                details:
                    type: object
                    required:
                        - value
                        - blob
                    properties:
                        value:
                            type: string
                            description: The value of the variable.
                        blob:
                            type: boolean
                            description: A boolean where true represents the text the user is entering will be multi line.
                        secret:
                            type:
                                - object
                                - "null"
                            properties:
                                iv:
                                    type: string
                                    description: A string describing the IV Hex associated with the encryption of the variable
                                hint:
                                    type:
                                        - string
                                        - "null"
                                    description: A user specified hint that will suggest what the encryption key might be
        ScopedVariableState:
            title: ScopedVariableState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the scoped variable.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ScopedVariable:
            title: ScopedVariable
            type: object
            description: Scoped variables are a way for users to dynamically allocate runtime specific environment variables across any number of containers in an environment.
            required:
                - id
                - creator
                - hub_id
                - environment_id
                - identifier
                - scope
                - source
                - access
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    type: string
                    description: An identifier used to reference the environment this resource is scoped to.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                scope:
                    $ref: "#/components/schemas/ScopedVariableScope"
                access:
                    $ref: "#/components/schemas/ScopedVariableAccess"
                source:
                    anyOf:
                        - type: "null"
                        - type: object
                          description: The source or value of the scoped variable.
                          discriminator:
                              propertyName: type
                              mapping:
                                  url: "#/components/schemas/URLSource"
                                  raw: "#/components/schemas/RawSource"
                          oneOf:
                              - $ref: "#/components/schemas/URLSource"
                              - $ref: "#/components/schemas/RawSource"
                state:
                    $ref: "#/components/schemas/ScopedVariableState"
                events:
                    title: ScopedVariableEvents
                    type: object
                    description: A collection of timestamps for each event in the Scoped Variable's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the scoped variable was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the scoped variable was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the scoped variable was deleted.
                            $ref: "#/components/schemas/DateTime"
        Range:
            title: Range
            type: object
            description: A start and end date-time pair indicating a range of time
            required:
                - start
                - end
            properties:
                start:
                    $ref: "#/components/schemas/DateTime"
                end:
                    $ref: "#/components/schemas/DateTime"
        LoadBalancerTelemetryControllerMetrics:
            title: LoadBalancerTelemetryControllerMetrics
            type: object
            required:
                - disconnects
                - connections
                - requests
                - bytes_transmitted
                - bytes_received
            properties:
                disconnects:
                    title: LoadBalancerTelemetryControllerDisconnectsMetrics
                    type: object
                    required:
                        - no_error
                        - request_invalid
                        - timeout_idle
                        - router_none
                        - router_nomatch
                        - destination_unavailable
                        - unknown_error
                    properties:
                        no_error:
                            type: integer
                        request_invalid:
                            type: integer
                        timeout_idle:
                            type: integer
                        router_none:
                            type: integer
                        router_nomatch:
                            type: integer
                        destination_unavailable:
                            type: integer
                        unknown_error:
                            type: integer
                connections:
                    type: integer
                requests:
                    type: integer
                bytes_transmitted:
                    type: integer
                bytes_received:
                    type: integer
        LoadBalancerTelemetryReport:
            title: LoadBalancerTelemetryReport
            description: Aggregated load balancer telemetry across all instances for a given range.
            type: object
            required:
                - created
                - range
                - snapshots
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                range:
                    $ref: "#/components/schemas/Range"
                snapshots:
                    type:
                        - array
                        - "null"
                    items:
                        type: object
                        title: LoadBalancerTelemetryReportMergedSnapshot
                        required:
                            - time
                            - controller
                            - metrics
                        properties:
                            time:
                                $ref: "#/components/schemas/DateTime"
                            controller:
                                $ref: "#/components/schemas/Identifier"
                            metrics:
                                $ref: "#/components/schemas/LoadBalancerTelemetryControllerMetrics"
        LoadBalancerTelemetryRouterMetrics:
            title: LoadBalancerTelemetryRouterMetrics
            type: object
            required:
                - destinations
            properties:
                destinations:
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - connections
                            - requests
                            - instance_id
                            - container_id
                        properties:
                            connections:
                                type:
                                    - object
                                    - "null"
                                required:
                                    - success
                                    - unavailable
                                properties:
                                    success:
                                        type: integer
                                    unavailable:
                                        type: integer
                                    errors:
                                        type: object
                                        additionalProperties:
                                            type: integer
                                    bytes_transmitted:
                                        type: integer
                                    bytes_received:
                                        type: integer
                            requests:
                                type:
                                    - object
                                    - "null"
                                required:
                                    - total
                                properties:
                                    total:
                                        type: integer
                                    responses:
                                        type: object
                                        additionalProperties:
                                            type: integer
                                    errors:
                                        type: object
                                        additionalProperties:
                                            type: integer
                            latency_ms:
                                type: array
                                items:
                                    type: integer
                            instance_id:
                                type: string
                            container_id:
                                type: string
        LoadBalancerTelemetryUrlRequestHandler:
            title: LoadBalancerTelemetryUrlRequestHandler
            type: object
            required:
                - hits
                - timing_ms
            properties:
                hits:
                    description: The number of hits to a specific URL handler.
                    type: integer
                timing_ms:
                    description: The cumulative ms of response time across all hits.
                    type: integer
        LoadBalancerTelemetryUrlMetrics:
            title: LoadBalancerTelemetryUrlMetrics
            type: object
            required:
                - destinations
            properties:
                destinations:
                    type: object
                    additionalProperties:
                        type: object
                        required:
                            - requests
                        properties:
                            requests:
                                type:
                                    - object
                                    - "null"
                                required:
                                    - host
                                    - method
                                    - path
                                    - total
                                    - last_hit
                                    - handlers
                                properties:
                                    host:
                                        type: string
                                        description: The host name of the URL request.
                                        examples:
                                            - abc.cycle.io
                                    method:
                                        type: string
                                        description: The HTTP method of the URL request.
                                        examples:
                                            - GET
                                    path:
                                        type: string
                                        description: The path portion of the inbound URL request.
                                        examples:
                                            - /pathname
                                    total:
                                        type: integer
                                        description: The number of requests to a this URL.
                                        examples:
                                            - 5
                                            - 10
                                    last_hit:
                                        description: The date of the most recent hit to the URL.
                                        $ref: "#/components/schemas/DateTime"
                                    handlers:
                                        type: object
                                        description: An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
                                        required:
                                            - proxy
                                            - cache
                                            - forward
                                            - redirect
                                        properties:
                                            proxy:
                                                description: Object containing hit count and timing data for proxy responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            cache:
                                                description: Object containing hit count and timing data for cache responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            forward:
                                                description: Object containing hit count and timing data for forward responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                            redirect:
                                                description: Object containing hit count and timing data for redirect responses.
                                                $ref: "#/components/schemas/LoadBalancerTelemetryUrlRequestHandler"
                                    responses:
                                        type: object
                                        examples:
                                            - http:404: 10
                                        description: An object where the key is the response type and the value is the number of hits with that response.
                                        additionalProperties:
                                            type: integer
                                    errors:
                                        type: object
                                        examples:
                                            - i/o timeout: 1
                                        description: An object where the key is the error type and the value is the number of hits with that error.
                                        additionalProperties:
                                            type: integer
        LoadBalancerTelemetrySnapshot:
            title: LoadBalancerTelemetrySnapshot
            type: object
            required:
                - time
                - started
                - dataset_id
                - current
                - cumulative
            properties:
                time:
                    $ref: "#/components/schemas/DateTime"
                started:
                    $ref: "#/components/schemas/DateTime"
                version:
                    type: string
                dataset_id:
                    type: integer
                current:
                    type: object
                    required:
                        - metrics
                    properties:
                        router:
                            anyOf:
                                - $ref: "#/components/schemas/LoadBalancerTelemetryRouterMetrics"
                                - type: "null"
                        urls:
                            anyOf:
                                - $ref: "#/components/schemas/LoadBalancerTelemetryUrlMetrics"
                                - type: "null"
                        metrics:
                            $ref: "#/components/schemas/LoadBalancerTelemetryControllerMetrics"
                cumulative:
                    type: object
                    required:
                        - metrics
                    properties:
                        router:
                            anyOf:
                                - $ref: "#/components/schemas/LoadBalancerTelemetryRouterMetrics"
                                - type: "null"
                        urls:
                            anyOf:
                                - $ref: "#/components/schemas/LoadBalancerTelemetryUrlMetrics"
                                - type: "null"
                        metrics:
                            $ref: "#/components/schemas/LoadBalancerTelemetryControllerMetrics"
        LoadBalancerLatestTelemetryInstance:
            title: LoadBalancerLatestTelemetryInstance
            description: Detailed telemetry for a load balancer instance at a point in time.
            type: object
            required:
                - id
                - hub_id
                - environment_id
                - container_id
                - instance_id
                - server_id
                - cluster
                - time
                - controller
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    $ref: "#/components/schemas/ID"
                container_id:
                    $ref: "#/components/schemas/ID"
                instance_id:
                    $ref: "#/components/schemas/ID"
                server_id:
                    $ref: "#/components/schemas/ID"
                cluster:
                    $ref: "#/components/schemas/Identifier"
                time:
                    $ref: "#/components/schemas/DateTime"
                controller:
                    $ref: "#/components/schemas/Identifier"
                latest:
                    anyOf:
                        - $ref: "#/components/schemas/LoadBalancerTelemetrySnapshot"
                        - type: "null"
                snapshots:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LoadBalancerTelemetrySnapshot"
        LoadBalancerLatestTelemetryController:
            title: LoadBalancerLatestTelemetryController
            type: object
            required:
                - time
                - controller
            properties:
                time:
                    $ref: "#/components/schemas/DateTime"
                controller:
                    $ref: "#/components/schemas/Identifier"
                instances:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryInstance"
        LoadBalancerLatestTelemetry:
            title: LoadBalancerLatestTelemetry
            description: Snapshots of the latest load balancer telemetry
            type: object
            required:
                - created
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                controllers:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryController"
        LoadBalancerLatestControllers:
            title: LoadBalancerLatestControllers
            description: Information about the latest controllers that generated traffic.
            type: object
            required:
                - created
            properties:
                created:
                    $ref: "#/components/schemas/DateTime"
                controllers:
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/LoadBalancerLatestTelemetryController"
        ImageSourceType:
            title: ImageSourceType
            type: string
            description: The type of images in this source.
            enum:
                - stack-build
                - direct
                - bucket
        ImageSourceAbout:
            title: ImageSourceAbout
            type: object
            description: Information about the image source resource.
            properties:
                description:
                    type:
                        - string
                        - "null"
                    description: Some information about the image source resource.
        ImageSourceState:
            title: ImageSourceState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the image source.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ImageSourceMeta:
            title: ImageSourceMeta
            type: object
            description: A list of meta fields that can be applied to this environment.
            properties:
                images_count:
                    type: object
                    required:
                        - state
                        - total
                    properties:
                        total:
                            description: Number of image sources
                            type: number
                        state:
                            type: object
                            required:
                                - new
                                - downloading
                                - building
                                - verifying
                                - saving
                                - live
                                - deleting
                            properties:
                                new:
                                    description: Number of images in this source with state new
                                    type: number
                                downloading:
                                    description: Number of images in this source with state downloading
                                    type: number
                                building:
                                    description: Number of images in this source with state building
                                    type: number
                                verifying:
                                    description: Number of images in this source with state verifying
                                    type: number
                                saving:
                                    description: Number of images in this source with state saving
                                    type: number
                                live:
                                    description: Number of images in this source with state live
                                    type: number
                                deleting:
                                    description: Number of images in this source with state deleting
                                    type: number
        ImageSource:
            title: ImageSource
            type: object
            description: An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
            required:
                - id
                - type
                - identifier
                - name
                - origin
                - hub_id
                - state
                - events
                - creator
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                    description: A human readable slugged identifier for this image source.
                type:
                    $ref: "#/components/schemas/ImageSourceType"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A name for the image source resource.
                about:
                    $ref: "#/components/schemas/ImageSourceAbout"
                origin:
                    $ref: "#/components/schemas/ImageOrigin"
                builder:
                    type:
                        - object
                        - "null"
                    description: Configuration options regarding the builder used to create/import Images using this Image Source.
                    properties:
                        integration_id:
                            anyOf:
                                - $ref: "#/components/schemas/HybridIdentifier"
                                - type: "null"
                            description: The ID or Identifier of the Integration used to do the build.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/ImageSourceState"
                events:
                    title: ImageSourceEvents
                    type: object
                    description: A collection of timestamps for each event in the image source's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image source was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image source was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image source was deleted.
                            $ref: "#/components/schemas/DateTime"
                meta:
                    $ref: "#/components/schemas/ImageSourceMeta"
        ImageSourceIncludes:
            title: ImageSourceIncludes
            description: A resource associated with an image source.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ImageSource"
        controllers:
            title: LoadBalancerLatestControllersIncludes
            description: Optionally included resources for load balancer controllers
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                sources:
                    $ref: "#/components/schemas/ImageSourceIncludes"
        VPNInfoReturn:
            title: VPNInfo
            type: object
            description: A summary of a VPN service for a given environment.
            required:
                - url
                - service
            properties:
                url:
                    type: string
                    description: A url associated with the VPN service.
                service:
                    anyOf:
                        - $ref: "#/components/schemas/VpnEnvironmentService"
                        - type: "null"
        VPNLogin:
            title: VPNLogin
            type: object
            description: A VPN login event record.
            required:
                - id
                - username
                - environment_id
                - ip
                - time
                - success
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                username:
                    type: string
                    description: The username used when logging in.
                environment_id:
                    type: string
                    description: The ID of the environment the VPN service is in.
                ip:
                    type: string
                    description: The IP address of the machine the user has logged in from.
                time:
                    description: The timestamp for when the login occured.
                    $ref: "#/components/schemas/DateTime"
                success:
                    type: boolean
                    description: A boolean where true means the login attempt was successful.
        VPNUsers:
            title: VPNUser
            type: object
            description: A VPN user for a given VPN.
            required:
                - id
                - username
                - creator
                - last_login
                - hub_id
                - environment_id
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                username:
                    type: string
                    description: The username for the login.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                last_login:
                    description: A timestamp of the last time the user logged into the VPN.
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                environment_id:
                    type: string
                    description: An identifier for the environment the VPN service is associated with.
                events:
                    title: VPNUserEvents
                    type: object
                    description: A collection of timestamps for each event in the VPN user's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the VPN user was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the VPN user was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the VPN user was deleted.
                            $ref: "#/components/schemas/DateTime"
        VpnResetTask:
            title: VpnResetTask
            description: This will reset the VPN certificates and restart the container. Should be done when the certificates expire, every 1000 days. Then, you will need to redownload the VPN config in order to connect.
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - reset
                    description: The name of the action to perform.
        VpnReconfigureTask:
            title: VpnReconfigureTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reconfigure
                    description: The action to take.
                contents:
                    type: object
                    description: Additional information the platform needs to create this job.
                    properties:
                        enable:
                            type: boolean
                            description: A boolean where true means the VPN service is enabled.
                        high_availability:
                            type:
                                - boolean
                                - "null"
                            description: A boolean where `true` represents the desire to run the environment vpn service in high availability mode.
                        auto_update:
                            type:
                                - boolean
                                - "null"
                            description: A boolean representing if this service container is set to autoupdate or not
                        config:
                            type:
                                - object
                                - "null"
                            description: The config object for the VPN service, in this case without the required fields normally found in a VPN config object.
                            properties:
                                allow_internet:
                                    type: boolean
                                    description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                                auth:
                                    type: object
                                    description: Auth configuration for the VPN.
                                    required:
                                        - webhook
                                        - cycle_accounts
                                    properties:
                                        webhook:
                                            type:
                                                - string
                                                - "null"
                                            description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                                        cycle_accounts:
                                            type: boolean
                                            description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                                        vpn_accounts:
                                            type: boolean
                                            description: If true, allows the custom VPN accounts to log in to the VPN.
        HubUsageDatum:
            title: HubUsageDatum
            description: A hub usage data point
            type: object
            required:
                - time
                - servers
                - members
                - environments
                - containers
            properties:
                time:
                    type: string
                servers:
                    type: number
                members:
                    type: number
                environments:
                    type: number
                containers:
                    type: number
        Context:
            title: ActivityContext
            type: object
            description: ID context for resources associated with an activity.
            properties:
                environment_id:
                    type: string
                    description: An ID for the given resource.
                container_id:
                    type: string
                    description: An ID for the given resource.
                cluster:
                    type: string
                    description: The identifier of a specific cluster.
                instance_id:
                    type: string
                    description: An ID for the given resource.
                server_id:
                    type: string
                    description: An ID for the given resource.
                stack_id:
                    type: string
                    description: An ID for the given resource.
                dns_zone_id:
                    type: string
                    description: An ID for the given resource.
                virtual_machine_id:
                    type: string
                    description: A virtual machine ID.
        Session:
            title: ActivitySession
            type: object
            description: Session info about the activity entry.
            required:
                - url
                - ip
                - token
                - api_key
            properties:
                url:
                    type: string
                    description: URL endpoint assocaited with the activity context - does not include domain.
                ip:
                    type: string
                    description: The IP of the account associated with the session.
                token:
                    type:
                        - object
                        - "null"
                    required:
                        - application_id
                        - application_capabilities_version
                    properties:
                        application_id:
                            $ref: "#/components/schemas/ID"
                        application_capabilities_version:
                            type: integer
                api_key:
                    type:
                        - string
                        - "null"
                    description: The API key ID.
        Detail:
            title: ActivityDetail
            type: object
            description: Details about a given event that is part of an activity.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                number:
                    type: integer
                    description: A number describing the amount of the resource that exists.
                string:
                    type: string
                    description: Additional information.
        Change:
            title: ActivityChange
            type: object
            description: An object with information of details for before and after a resource changed.
            required:
                - component
            properties:
                component:
                    type: string
                    description: A description of the resource that was changed.
                before:
                    $ref: "#/components/schemas/Detail"
                after:
                    $ref: "#/components/schemas/Detail"
        ActivitySecurity:
            title: ActivitySecurity
            type: object
            description: Security information pertaining to this activity.
            required:
                - risk
                - surface
                - event
                - attack
            properties:
                risk:
                    type: string
                    description: |
                        A risk level assessed by the platform. Depending on the nature of the incident, this may change even if the event type is the same.
                    enum:
                        - info
                        - low
                        - medium
                        - high
                        - critical
                surface:
                    type: string
                    description: From where the platform has determined this security event originated from.
                    enum:
                        - network
                        - service
                        - fs
                        - api
                event:
                    type: string
                    description: How the platform has handled this security event.
                    enum:
                        - suggestion
                        - notice
                        - prevention
                        - detection
                        - reaction
                attack:
                    type: string
                    description: The type of attack the platform has determined has occurred.
                    enum:
                        - none
                        - auth-failure
                        - brute-force
                        - exploit-vulnerability
                        - social-engineer
                        - service-interruption
                        - access-elevation
        ActivityMonitor:
            title: ActivityMonitor
            type: object
            description: Details related to the monitor that raised this activity event.
            required:
                - level
                - event
                - state
            properties:
                level:
                    type: string
                    description: |
                        The severity of the event.
                    enum:
                        - info
                        - low
                        - medium
                        - high
                        - critical
                event:
                    type: string
                    description: How the platform has handled this monitor event.
                    enum:
                        - suggestion
                        - notice
                        - prevention
                        - detection
                        - reaction
                state:
                    type: string
                    description: The current state of the monitored resource
                    enum:
                        - none
                        - unknown
                        - unreachable
                        - flux
                        - recovered
        Activity:
            title: Activity
            type: object
            description: A resource representing information about activity taking place on a given hub.
            required:
                - id
                - hub_id
                - user
                - verbosity
                - context
                - session
                - changes
                - annotations
                - error
                - component
                - status
                - event
                - time
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                user:
                    type: object
                    description: Userscope
                    required:
                        - type
                        - id
                    properties:
                        type:
                            type: string
                            description: The type of user.
                            enum:
                                - account
                                - environment
                                - platform
                                - platform-pipeline
                                - employee
                                - api-key
                                - visitor
                        id:
                            type: string
                            description: The given user's ID.
                verbosity:
                    type: integer
                    description: |
                        A number representing the detail level (verbosity) of this activity.

                        ## Levels
                        - 0: activity that other users would find useful
                        - 1: activity that can be useful in tracking down how a user did something
                        - 2: full activity, can be useful in debugging problems
                context:
                    $ref: "#/components/schemas/Context"
                session:
                    anyOf:
                        - $ref: "#/components/schemas/Session"
                        - type: "null"
                changes:
                    type: array
                    description: An array of changes.
                    items:
                        $ref: "#/components/schemas/Change"
                annotations:
                    type: object
                    description: A record of additional annotations for the activity.
                    additionalProperties: {}
                error:
                    type:
                        - object
                        - "null"
                    description: An object describing a given activity error.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: The error message.
                component:
                    type:
                        - object
                        - "null"
                    description: An object holding information about a component.
                    required:
                        - id
                        - type
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        type:
                            type: string
                            description: The type of component.
                tags:
                    type: array
                    description: An array of tags that denote things such as a type of security event, or can be user-provided.
                    items:
                        type: string
                status:
                    type: string
                    description: A status for the given activity.
                    enum:
                        - info
                        - warn
                        - request
                        - success
                        - error
                        - alert
                security:
                    $ref: "#/components/schemas/ActivitySecurity"
                monitor:
                    $ref: "#/components/schemas/ActivityMonitor"
                event:
                    type: string
                    description: The activity event.
                    enum:
                        - hub.images.prune
                        - hub.update
                        - hub.create
                        - hub.task.delete
                        - hub.task.images.prune
                        - environment.services.discovery.reconfigure
                        - environment.services.lb.reconfigure
                        - environment.services.vpn.reconfigure
                        - environment.services.scheduler.reconfigure
                        - environment.delete
                        - environment.initialize
                        - environment.start
                        - environment.stop
                        - environment.create
                        - environment.update
                        - environment.task.delete
                        - environment.services.discovery.task.reconfigure
                        - environment.services.lb.task.reconfigure
                        - environment.services.vpn.task.reconfigure
                        - environment.services.scheduler.task.reconfigure
                        - environment.services.vpn.user.create
                        - environment.services.vpn.login
                        - environment.services.vpn.reset
                        - environment.services.vpn.task.reset
                        - environment.task.initialize
                        - environment.task.start
                        - environment.task.stop
                        - environment.task.deployments.reconfigure
                        - environment.deployments.reconfigure
                        - environment.deployments.prune
                        - environment.deployment.start
                        - environment.deployment.stop
                        - environment.scoped-variable.delete
                        - environment.scoped-variable.update
                        - environment.scoped-variable.task.delete
                        - environment.scoped-variable.create
                        - image.delete
                        - image.import
                        - image.create
                        - image.update
                        - image.task.delete
                        - image.task.import
                        - image.source.delete
                        - image.source.create
                        - image.source.update
                        - image.source.task.delete
                        - billing.invoice.task.void
                        - billing.invoice.task.credit
                        - billing.invoice.task.refund
                        - billing.invoice.pay
                        - billing.invoice.task.pay
                        - billing.order.confirm
                        - billing.order.task.confirm
                        - billing.method.update
                        - billing.method.delete
                        - billing.method.task.delete
                        - billing.method.create
                        - hub.apikey.update
                        - hub.apikey.delete
                        - hub.apikey.create
                        - hub.role.update
                        - hub.role.delete
                        - hub.role.create
                        - hub.role.task.delete
                        - hub.membership.delete
                        - hub.membership.create
                        - hub.membership.update
                        - hub.integration.create
                        - hub.integration.update
                        - hub.integration.delete
                        - hub.inactive
                        - container.initialize
                        - container.task.start
                        - container.start
                        - container.task.stop
                        - container.stop
                        - container.task.reconfigure
                        - container.reconfigure
                        - container.task.volumes.reconfigure
                        - container.function.trigger
                        - container.function.task.trigger
                        - container.volumes.reconfigure
                        - container.create
                        - container.restart
                        - container.task.reimage
                        - container.reimage
                        - container.update
                        - container.task.delete
                        - container.delete
                        - container.task.scale
                        - container.scale
                        - container.instances.create
                        - container.instances.delete
                        - container.instances.autoscale.up
                        - container.instances.autoscale.down
                        - container.instance.healthcheck.restarted
                        - container.instance.volume.extend
                        - container.instance.task.volume.extend
                        - container.instance.healthcheck.failed
                        - container.instance.error
                        - container.instance.ssh.login
                        - container.instance.migration.start
                        - container.instance.migration.revert
                        - container.instance.delete
                        - container.instance.task.migration.revert
                        - container.instance.task.migration.start
                        - container.backup.create
                        - container.backup.restore
                        - container.backup.delete
                        - container.backup.task.delete
                        - container.backup.task.restore
                        - dns.zone.verify
                        - dns.zone.delete
                        - dns.zone.task.verify
                        - dns.zone.update
                        - dns.zone.task.delete
                        - dns.zone.create
                        - dns.zone.record.delete
                        - dns.zone.record.cert.generate
                        - dns.zone.record.cert.generate.auto
                        - dns.zone.record.task.cert.generate
                        - dns.zone.record.update
                        - dns.zone.record.task.delete
                        - dns.zone.record.create
                        - dns.certificate.associate
                        - dns.certificate.deprecate
                        - dns.certificate.create
                        - dns.certificate.task.deprecate
                        - stack.update
                        - stack.task.delete
                        - stack.delete
                        - stack.create
                        - stack.task.prune
                        - stack.prune
                        - stack.build.create
                        - stack.build.generate
                        - stack.build.deploy
                        - stack.build.delete
                        - stack.build.task.delete
                        - stack.build.task.generate
                        - stack.build.task.deploy
                        - infrastructure.provider.update
                        - infrastructure.provider.task.delete
                        - infrastructure.provider.create
                        - infrastructure.provider.task.verify
                        - infrastructure.server.task.delete
                        - infrastructure.server.task.restart
                        - infrastructure.server.services.sftp.auth
                        - infrastructure.server.live
                        - infrastructure.server.delete
                        - infrastructure.server.restart
                        - infrastructure.server.compute.restart
                        - infrastructure.server.compute.spawner.restart
                        - infrastructure.server.features.reconfigure
                        - infrastructure.server.sharedfs.reconfigure
                        - infrastructure.server.provision
                        - infrastructure.server.console
                        - infrastructure.server.update
                        - infrastructure.server.task.provision
                        - infrastructure.server.ssh.token
                        - infrastructure.server.task.features.reconfigure
                        - infrastructure.server.task.sharedfs.reconfigure
                        - infrastructure.server.services.sftp.lockdown
                        - infrastructure.server.services.internal-api.throttle
                        - infrastructure.server.evacuation.start
                        - infrastructure.server.task.evacuation.start
                        - infrastructure.server.evacuation.reset
                        - infrastructure.server.task.evacuation.reset
                        - infrastructure.autoscale.group.create
                        - infrastructure.autoscale.group.update
                        - infrastructure.autoscale.group.task.delete
                        - infrastructure.autoscale.group.delete
                        - infrastructure.cluster.create
                        - infrastructure.cluster.update
                        - infrastructure.cluster.delete
                        - infrastructure.ips.pool.task.delete
                        - sdn.network.update
                        - sdn.network.task.delete
                        - sdn.network.create
                        - sdn.network.task.reconfigure
                        - pipeline.delete
                        - pipeline.trigger
                        - pipeline.update
                        - pipeline.task.delete
                        - pipeline.create
                        - pipeline.task.trigger
                        - pipeline.run.completed
                        - pipeline.key.update
                        - pipeline.key.delete
                        - pipeline.key.create
                        - virtual-machine.create
                        - virtual-machine.initialize
                        - virtual-machine.task.start
                        - virtual-machine.start
                        - virtual-machine.task.stop
                        - virtual-machine.stop
                        - virtual-machine.reconfigure
                        - virtual-machine.update
                        - virtual-machine.task.delete
                        - virtual-machine.delete
                        - virtual-machine.sos.login
                        - virtual-machine.ssh-key.create
                        - virtual-machine.ssh-key.update
                        - virtual-machine.ssh-key.task.delete
                        - virtual-machine.ssh-key.delete
                        - virtual-machine.ip.allocate
                        - virtual-machine.task.ip.allocate
                        - virtual-machine.ip.unallocate
                        - virtual-machine.task.ip.unallocate
                time:
                    description: A timestamp for when the activity took place.
                    $ref: "#/components/schemas/DateTime"
        VirtualMachineNetworkConfig:
            title: VirtualMachineNetworkConfig
            type: object
            description: |
                Defines the network settings for a virtual machine, including public access mode, hostname, and ports.
            properties:
                public:
                    type: string
                    enum:
                        - enable
                        - disable
                        - egress-only
                    description: Controls the public network mode for the virtual machine.
                hostname:
                    type: string
                    description: The hostname assigned to the virtual machine.
                ports:
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - type: "null"
                    description: Port configurations for the virtual machine.
            required:
                - public
                - hostname
        VirtualMachineDeployTags:
            title: VirtualMachineDeployTags
            type: object
            description: |
                Tags that define node requirements for the deployment. The `any` tag must match at least one condition, while `all` must match all conditions.
            properties:
                any:
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - type: "null"
                all:
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - type: "null"
        VirtualMachineNodeConstraints:
            title: VirtualMachineNodeConstraints
            type: object
            description: |
                Node-level constraints for the virtual machine deployment, specifying tags that must or must not be present.
            properties:
                tags:
                    $ref: "#/components/schemas/VirtualMachineDeployTags"
            required:
                - tags
        VirtualMachineDeployConstraints:
            title: VirtualMachineDeployConstraints
            type: object
            description: |
                Constraints define node-level and resource restrictions for the virtual machine deployment.
            properties:
                node:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineNodeConstraints"
                        - type: "null"
                secrets:
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - type: "null"
                containers:
                    anyOf:
                        - type: array
                          items:
                              type: string
                        - type: "null"
        VirtualMachineShutdownPolicy:
            title: VirtualMachineShutdownPolicy
            type: object
            description: |
                The shutdown policy defines how the virtual machine should handle shutdown, including a timeout and signals to be sent during shutdown.
            properties:
                graceful_timeout:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                    description: The timeout period for graceful shutdown.
        VirtualMachineStartupPolicy:
            title: VirtualMachineStartupPolicy
            type: object
            description: |
                The startup policy defines how the virtual machine should handle startup, including a possible delay before starting the machine.
            properties:
                delay:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                    description: Delay before startup.
        VirtualMachineTelemetryConfig:
            title: VirtualMachineTelemetryConfig
            type: object
            description: |
                The telemetry configuration defines how telemetry data is handled, including retention, interval, and whether telemetry is disabled.
            properties:
                retention:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                    description: Data retention duration for telemetry.
                interval:
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                    description: Telemetry collection interval.
                disable:
                    type: boolean
                    description: Whether telemetry collection is disabled.
            required:
                - disable
        VirtualMachineDeployConfig:
            title: VirtualMachineDeployConfig
            type: object
            description: |
                Represents the deployment configuration for a virtual machine, including constraints, shutdown/startup policies, restart conditions, and telemetry settings.
            properties:
                constraints:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineDeployConstraints"
                        - type: "null"
                shutdown:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineShutdownPolicy"
                        - type: "null"
                startup:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineStartupPolicy"
                        - type: "null"
                telemetry:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineTelemetryConfig"
                        - type: "null"
        VirtualMachineRamResources:
            title: VirtualMachineRamResources
            type: object
            description: |
                Defines the RAM configuration of a virtual machine.
            properties:
                limit:
                    type: string
                    description: The limit (maximum) amount of RAM the virtual machine can consume. Must be at least 512M and less than 65GB.
                    examples:
                        - 1G
                        - 512M
                allocate:
                    type:
                        - boolean
                        - "null"
                    description: Whether or not the RAM set in limit should be preallocated.
            required:
                - limit
        VirtualMachineCpuResources:
            title: VirtualMachineCpuResources
            type: object
            description: |
                Defines the CPU configuration of a virtual machine. Set **either** `cores` or `cpus`.
            properties:
                cores:
                    anyOf:
                        - type: object
                          properties:
                              number:
                                  type: integer
                                  description: The number of cores to assign to this virtual machine. Must be between 1 and 32.
                                  examples:
                                      - 1
                                      - 2
                              allocate:
                                  type:
                                      - boolean
                                      - "null"
                                  description: If true, reserves the cores so they cannot be used by any other virtual machine.
                          required:
                              - number
                        - type: "null"
                cpus:
                    type:
                        - string
                        - "null"
                    description: The specific cores/range of cores to allocate to the virtual machine. An 'x' indicates the maximum core for a given machine.
                    examples:
                        - "1"
                        - 1-3
                        - 2-x
        VirtualMachineResourcesConfig:
            title: VirtualMachineResourcesConfig
            type: object
            description: |
                Defines the resource settings for a virtual machine, including CPU and RAM.
            properties:
                ram:
                    $ref: "#/components/schemas/VirtualMachineRamResources"
                cpu:
                    $ref: "#/components/schemas/VirtualMachineCpuResources"
            required:
                - ram
                - cpu
        VirtualMachineConfig:
            title: VirtualMachineConfig
            type: object
            description: |
                Defines the network and deployment configurations for a virtual machine.
            properties:
                network:
                    $ref: "#/components/schemas/VirtualMachineNetworkConfig"
                deploy:
                    $ref: "#/components/schemas/VirtualMachineDeployConfig"
                resources:
                    $ref: "#/components/schemas/VirtualMachineResourcesConfig"
            required:
                - network
                - deploy
                - resources
        VirtualMachineImageSourceUrl:
            title: VirtualMachineImageSourceUrl
            description: A virtual machine image sourced from a URL.
            type: object
            properties:
                type:
                    type: string
                    enum:
                        - url
                details:
                    type: object
                    properties:
                        url:
                            type: string
                            description: The URL where a custom image is located.
                    required:
                        - url
            required:
                - type
                - details
        VirtualMachineImageSourceIpxe:
            title: VirtualMachineImageSourceIpxe
            description: A virtual machine image sourced from an IPXE script.
            type: object
            properties:
                type:
                    type: string
                    enum:
                        - ipxe
                details:
                    type: object
                    properties:
                        chain_url:
                            type:
                                - string
                                - "null"
                            description: A URL that points to an IPXE script.
                        script:
                            type:
                                - string
                                - "null"
                            description: An inline IPXE script.
            required:
                - type
                - details
        VirtualMachineImageSourceBase:
            title: VirtualMachineImageSourceBase
            description: A virtual machine image sourced from a Cycle base image.
            type: object
            properties:
                type:
                    type: string
                    enum:
                        - base
                details:
                    type: object
                    properties:
                        identifier:
                            type: string
                            description: The base image identifier.
                    required:
                        - identifier
            required:
                - type
                - details
        VirtualMachineImage:
            title: VirtualMachineImage
            type: object
            description: |
                Represents the image used by a virtual machine. It can either reference a URL where the image is located or specify a base image provided by Cycle. The `base` field allows users to specify the name of a desired Cycle-hosted base image, removing the need for a custom image URL.
            discriminator:
                propertyName: type
                mapping:
                    url: "#/components/schemas/VirtualMachineImageSourceUrl"
                    ipxe: "#/components/schemas/VirtualMachineImageSourceIpxe"
                    base: "#/components/schemas/VirtualMachineImageSourceBase"
            oneOf:
                - $ref: "#/components/schemas/VirtualMachineImageSourceUrl"
                - $ref: "#/components/schemas/VirtualMachineImageSourceIpxe"
                - $ref: "#/components/schemas/VirtualMachineImageSourceBase"
            required:
                - type
                - details
        VirtualMachineVolumeConfig:
            title: VirtualMachineVolumeConfig
            type: object
            description: |
                Represents the configuration for a volume attached to a virtual machine.
            properties:
                local:
                    anyOf:
                        - type: object
                          properties:
                              max_size:
                                  type: string
                                  description: The maximum size allowed for the local volume.
                                  examples:
                                      - 100G
                              storage_pool:
                                  anyOf:
                                      - type: boolean
                                      - type: "null"
                                  description: Indicates if the volume is part of a storage pool.
                          required:
                              - max_size
                        - type: "null"
                    description: Configuration details for a local volume, if applicable.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                read_only:
                    type: boolean
                    description: Specifies if the volume is mounted as read-only.
            required:
                - identifier
                - read_only
        VirtualMachineVolume:
            title: VirtualMachineVolume
            type: object
            description: |
                Represents a storage volume attached to a virtual machine.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hash:
                    type: string
                    description: A unique hash identifying the volume for the virtual machine.
                config:
                    $ref: "#/components/schemas/VirtualMachineVolumeConfig"
                    description: The configuration details for the virtual machine's volume.
            required:
                - id
                - hash
                - config
        VirtualMachineState:
            title: VirtualMachineState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the virtual machine.
                          type: string
                          enum:
                              - new
                              - starting
                              - running
                              - stopping
                              - stopped
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        VirtualMachineMeta:
            title: VirtualMachineMeta
            type: object
            description: Fields that can be included on a per-virtual machine basis, specific to that virtual machine.
            properties:
                domains:
                    anyOf:
                        - type: array
                          items:
                              type: object
                              description: Any associated LINKED records for this virtual machine, and their fully-qualified domain name (fqdn).
                              properties:
                                  fqdn:
                                      type: string
                                      description: The fully qualified domain name.
                                  record:
                                      anyOf:
                                          - $ref: "#/components/schemas/Record"
                                          - type: "null"
                              required:
                                  - fqdn
                        - type: "null"
                ips:
                    description: An array of IP addresses associated with this virtual machine.
                    anyOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/Ip"
                        - type: "null"
                server:
                    description: The server the virtual machine is deployed to.
                    anyOf:
                        - $ref: "#/components/schemas/Server"
                        - type: "null"
        VirtualMachine:
            title: VirtualMachine
            type: object
            description: |
                Describes a virtual machine running on the Cycle Platform.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A user-defined name for the virtual machine.
                identifier:
                    $ref: "#/components/schemas/Identifier"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                environment:
                    type: object
                    description: |
                        Basic information about the environment this virtual machine is in.
                    properties:
                        id:
                            $ref: "#/components/schemas/ID"
                        cluster:
                            $ref: "#/components/schemas/Identifier"
                            description: The cluster this environment is associated with.
                    required:
                        - id
                        - cluster
                hub_id:
                    $ref: "#/components/schemas/HubID"
                config:
                    $ref: "#/components/schemas/VirtualMachineConfig"
                image:
                    $ref: "#/components/schemas/VirtualMachineImage"
                container_id:
                    $ref: "#/components/schemas/ID"
                volumes:
                    anyOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/VirtualMachineVolume"
                        - type: "null"
                annotations:
                    type:
                        - object
                        - "null"
                    additionalProperties: {}
                    description: Metadata annotations for the virtual machine.
                base_disk_size:
                    type: string
                    description: The size of the base disk. Must be between 10G and 100G.
                    examples:
                        - 10G
                root_password:
                    type: object
                    description: The generated root password for the virtual machine. Only visible by the owner, or if it was created in the last ten minutes.
                    properties:
                        changed:
                            $ref: "#/components/schemas/DateTime"
                        current:
                            type:
                                - string
                                - "null"
                            description: The root password.
                    required:
                        - changed
                        - current
                ssh_keys:
                    description: An array of IDs corresponding to SSH keys that have been assigned to this virtual machine.
                    anyOf:
                        - type: array
                          items:
                              $ref: "#/components/schemas/ID"
                        - type: "null"
                state:
                    $ref: "#/components/schemas/VirtualMachineState"
                events:
                    title: VirtualMachineEvents
                    type: object
                    description: A collection of timestamps for each event in the virtual machine's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - started
                    properties:
                        created:
                            description: The timestamp of when the virtual machine was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the virtual machine was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the virtual machine was deleted.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the virtual machine was started.
                            $ref: "#/components/schemas/DateTime"
                deprecate:
                    type: boolean
                    description: A boolean flag indicating if this virtual machine is deprecated.
                lock:
                    type: boolean
                    description: Prevents this virtual machine from being deleted when true.
                meta:
                    anyOf:
                        - $ref: "#/components/schemas/VirtualMachineMeta"
                        - type: "null"
            required:
                - id
                - name
                - identifier
                - creator
                - environment
                - hub_id
                - config
                - image
                - state
                - events
                - deprecate
                - lock
        PoolProvider:
            title: IPPoolProvider
            type: object
            description: A IP Pool provider.
            required:
                - integration_id
                - location
                - reservation
                - server
                - server_assignment
                - vendor
            properties:
                vendor:
                    type: string
                    description: A vendor for a provider.
                integration_id:
                    $ref: "#/components/schemas/ID"
                    description: ID of the provider integration used to provision the IP.
                location:
                    type: string
                    description: Information about the location of the provider this pool is associated with.
                reservation:
                    type: string
                    description: A reservation identifier associated with the pool reservation.
                server:
                    type: string
                    description: A server identifier associated with the pool.
                server_assignment:
                    type: string
                    description: An identifier linked to the server assingment of the IP pool.
        PoolState:
            title: PoolState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pool.
                          type: string
                          enum:
                              - live
                              - releasing
                              - released
                - $ref: "#/components/schemas/State"
        Pool:
            title: InfrastructureIPPool
            type: object
            description: An IP Pool
            required:
                - id
                - hub_id
                - kind
                - provider
                - server_id
                - floating
                - location_id
                - ips
                - block
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                server_id:
                    type: string
                    description: An ID associated with a server resource.
                location_id:
                    type: string
                    description: An ID associated with a location resource.
                kind:
                    type: string
                    description: The type of IP pool.
                    enum:
                        - ipv4
                        - ipv6
                provider:
                    $ref: "#/components/schemas/PoolProvider"
                floating:
                    type: boolean
                    description: A boolean where true represents the pool as a floating IP pool.
                ips:
                    type: object
                    description: Data about IPs in the pool.
                    required:
                        - total
                        - available
                    properties:
                        total:
                            type: integer
                            description: The total number of IPs in the pool.
                        available:
                            type: integer
                            description: Of the total number of IP's how many are available to be assigned.
                block:
                    type: object
                    description: Network information about the pool.
                    required:
                        - cidr
                        - gateway
                        - netmask
                        - network
                    properties:
                        cidr:
                            type: string
                            description: A cidr for the pool.
                        gateway:
                            type: string
                            description: A gateway for the pool.
                        netmask:
                            type: string
                            description: A netmask for the pool.
                        network:
                            type: string
                            description: A network for the pool.
                state:
                    $ref: "#/components/schemas/PoolState"
        ApiKeyState:
            title: ApiKeyState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the API key.
                          type: string
                          enum:
                              - new
                              - configuring
                              - live
                              - inactive
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        ApiKey:
            title: ApiKey
            description: An API key resource
            type: object
            required:
                - id
                - hub_id
                - name
                - creator
                - secret
                - role_id
                - ips
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                name:
                    type: string
                    description: A name for the API key.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                secret:
                    type: string
                    description: The API key secret.
                role_id:
                    $ref: "#/components/schemas/ID"
                ips:
                    type:
                        - array
                        - "null"
                    description: An array of IP's this API key can make calls from.
                    items:
                        type: string
                state:
                    $ref: "#/components/schemas/ApiKeyState"
                events:
                    title: ApiKeyEvents
                    type: object
                    description: A collection of timestamps for each event in the API key's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the API key was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the API key was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the API key was deleted.
                            $ref: "#/components/schemas/DateTime"
        NetworkState:
            title: NetworkState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the network.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        NetworkPrivacySettings:
            title: NetworkPrivacySettings
            type: object
            description: Private network information for a Cycle SDN.
            required:
                - vxlan_tag
                - subnet
                - mac_addr_suffix
                - ipv6
            properties:
                vxlan_tag:
                    type: integer
                    description: A tag used to ensure proper routing.
                subnet:
                    type: string
                    description: The subnet of the private network.
                mac_addr_suffix:
                    type: integer
                    description: A number used to ensure a MAC address exists for each network.
                ipv6:
                    type: object
                    description: IPv6 infromation for the network.
                    required:
                        - ip
                        - cidr
                    properties:
                        ip:
                            type: string
                            description: The networks IPv6 base.
                        cidr:
                            type: string
                            description: The private network CIDR.
        Network:
            title: Network
            type: object
            description: SDN Network resource.
            required:
                - id
                - name
                - identifier
                - cluster
                - creator
                - hub_id
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the network.
                identifier:
                    type: string
                    description: A network identifier used to construct http calls that specifically use this network over another.
                cluster:
                    type: string
                    description: The infrastructure cluster the environments belonging to this network belong to.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                state:
                    $ref: "#/components/schemas/NetworkState"
                private_network:
                    anyOf:
                        - $ref: "#/components/schemas/NetworkPrivacySettings"
                        - type: "null"
                environments:
                    description: An array of environments and timestamps.
                    type:
                        - array
                        - "null"
                    items:
                        type: object
                        required:
                            - id
                            - added
                        properties:
                            id:
                                $ref: "#/components/schemas/ID"
                            added:
                                description: A timestamp of when the environment was added.
                                $ref: "#/components/schemas/DateTime"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                events:
                    title: NetworkEvents
                    type: object
                    description: A collection of timestamps for each event in the network's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the image was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the image was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the image was deleted.
                            $ref: "#/components/schemas/DateTime"
        FluidIdentifier:
            title: FluidIdentifier
            type: string
            description: |
                An identifier used in pipelines to refer to different kinds of resources across Cycle.

                ## Types:
                - `id:<mongo id>`: A raw resource ID
                - `resource:<a resource identifier>`: A compound identifier pointing to a resource.
                - `from:<stage/step>`: For referencing a previous pipeline step.
            examples:
                - id:6515098637b66c233ed164e7
                - resource:cluster:dev,env:demo,container:api
                - from:/image-create
        ImageCreateStep:
            title: ImageCreateStep
            type: object
            description: Settings for the image create step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.create
                details:
                    type: object
                    required:
                        - source
                    properties:
                        name:
                            type:
                                - string
                                - "null"
                        source:
                            $ref: "#/components/schemas/FluidIdentifier"
                        build:
                            type: object
                            description: Optional build-time options for when this image is built on pipeline run.
                            properties:
                                args:
                                    type:
                                        - object
                                        - "null"
                                    description: Build args passed into the container image build process during pipeline run.
                                    additionalProperties:
                                        type: string
                        override:
                            type:
                                - object
                                - "null"
                            description: An override object to be used for a single image create request.
                            properties:
                                target:
                                    description: For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag.
                                    type:
                                        - string
                                        - "null"
                                targz_url:
                                    description: For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
                                    type:
                                        - string
                                        - "null"
        ImageImportStep:
            title: ImageImportStep
            type: object
            description: Settings for the image import step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.import
                details:
                    type: object
                    required:
                        - image
                    properties:
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
        ImagesPruneStep:
            title: ImagePruneStep
            type: object
            description: Settings for the images prune step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - images.prune
                details:
                    type: object
                    required:
                        - source_ids
                    properties:
                        source_ids:
                            type: array
                            items:
                                $ref: "#/components/schemas/ID"
        ImageCreateImportStep:
            title: ImageCreateImportStep
            type: object
            description: A pipeline step for creating and importing an image in one go.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - image.create-import
                details:
                    type: object
                    required:
                        - source
                    properties:
                        name:
                            type:
                                - string
                                - "null"
                        source:
                            $ref: "#/components/schemas/FluidIdentifier"
                        build:
                            type: object
                            description: Optional build-time options for when this image is built on pipeline run.
                            properties:
                                args:
                                    type:
                                        - object
                                        - "null"
                                    description: Build args passed into the container image build process during pipeline run.
                                    additionalProperties:
                                        type: string
                        override:
                            type:
                                - object
                                - "null"
                            description: An override object to be used for a single image create request.
                            properties:
                                target:
                                    description: For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag.
                                    type:
                                        - string
                                        - "null"
                                targz_url:
                                    description: For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
                                    type:
                                        - string
                                        - "null"
        ContainerCreateStep:
            title: ContainerCreateStep
            type: object
            description: Settings for the create container step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.create
                details:
                    type: object
                    required:
                        - name
                        - environment
                        - image
                        - stateful
                        - config
                        - volumes
                    properties:
                        name:
                            type: string
                        identifier:
                            type:
                                - string
                                - "null"
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
                        stateful:
                            type: boolean
                        annotations:
                            type:
                                - object
                                - "null"
                            description: Additional information about a container
                            additionalProperties: {}
                        config:
                            $ref: "#/components/schemas/Config"
                        volumes:
                            type: array
                            items:
                                $ref: "#/components/schemas/ContainerVolume"
                        deployment:
                            anyOf:
                                - $ref: "#/components/schemas/Deployment"
                                - type: "null"
        ContainerStartStep:
            title: ContainerStartStep
            type: object
            description: Settings for starting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.start
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerStopStep:
            title: ContainerStopStep
            type: object
            description: Settings for stopping a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.stop
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerDeleteStep:
            title: ContainerDeleteStep
            type: object
            description: Settings for deleting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.delete
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        ContainerReimageStep:
            title: ContainerReimageStep
            type: object
            description: Settings for reimaging a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.reimage
                details:
                    type: object
                    required:
                        - image
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
                        image:
                            $ref: "#/components/schemas/FluidIdentifier"
                        options:
                            type: object
                            required:
                                - allow_incompatible
                                - overwrite_runtime_config
                            properties:
                                allow_incompatible:
                                    type: boolean
                                    description: A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced.
                                overwrite_runtime_config:
                                    type: boolean
                                    description: A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process.
        ContainerRestartStep:
            title: ContainerRestartStep
            type: object
            description: Settings for restarting a container in a pipeline
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.restart
                details:
                    type: object
                    required:
                        - container
                    properties:
                        container:
                            $ref: "#/components/schemas/FluidIdentifier"
        VariableString:
            title: VariableString
            description: |
                A string value for a pipeline that supports a variable. To use as a variable, set this string to `{{variable}}` where `variable` is a custom name.
            type: string
        ContainerFunctionTriggerStep:
            title: ContainerFunctionTriggerStep
            type: object
            description: Settings for triggering a function in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - container.function.trigger
                details:
                    type: object
                    required:
                        - container
                        - runtime_variables
                    properties:
                        container:
                            description: The container to trigger.
                            $ref: "#/components/schemas/FluidIdentifier"
                        token:
                            description: A custom token used for identifying and managing a claim. Can be any valid string.
                            anyOf:
                                - $ref: "#/components/schemas/VariableString"
                                - type: "null"
                        runtime_variables:
                            $ref: "#/components/schemas/FunctionRuntimeVariables"
        EnvironmentCreateStep:
            title: EnvironmentCreateStep
            type: object
            description: Settings for creating an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.create
                details:
                    type: object
                    required:
                        - name
                        - cluster
                        - features
                    properties:
                        name:
                            type: string
                        about:
                            anyOf:
                                - $ref: "#/components/schemas/EnvironmentAbout"
                                - type: "null"
                        cluster:
                            type: string
                        features:
                            $ref: "#/components/schemas/EnvironmentFeatures"
        EnvironmentStartStep:
            title: EnvironmentStartStep
            type: object
            description: Settings for starting an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.start
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentStopStep:
            title: EnvironmentStopStep
            type: object
            description: Settings for stopping an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.stop
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeleteStep:
            title: EnvironmentDeleteStep
            type: object
            description: Settings for deleting an environment in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.delete
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeploymentStartStep:
            title: EnvironmentDeploymentStartStep
            type: object
            description: Start all containers with a specific deployment version/tag within an environment.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.start
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type:
                                - string
                                - "null"
                        version:
                            type:
                                - string
                                - "null"
        EnvironmentDeploymentStopStep:
            title: EnvironmentDeploymentStopStep
            type: object
            description: Stop all containers with a specific deployment version/tag within an environment.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.stop
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type:
                                - string
                                - "null"
                        version:
                            type:
                                - string
                                - "null"
        EnvironmentDeploymentsTagStep:
            title: EnvironmentDeploymentsTagStep
            type: object
            description: Settings for updating a deployment tag to another deployment version.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployments.tag
                details:
                    type: object
                    required:
                        - environment
                        - tag
                        - deployment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            $ref: "#/components/schemas/Identifier"
                        deployment:
                            description: The selector for which deployment to apply the new tag to.
                            oneOf:
                                - type: object
                                  properties:
                                      version:
                                          description: Targets the deployment with this exact version.
                                          $ref: "#/components/schemas/Version"
                                - type: object
                                  properties:
                                      tag:
                                          description: Targets the deployment with this exact tag applied to it.
                                          type: string
        EnvironmentDeploymentsPruneStep:
            title: EnvironmentDeploymentsPruneStep
            type: object
            description: Remove any containers that are part of a deployment that does NOT have a tag associated with it.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployments.prune
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
        EnvironmentDeploymentHealthyWatchStep:
            title: EnvironmentDeploymentHealthyWatchStep
            type: object
            description: |
                Waits for a deployment to be considered 'healthy' before allowing the pipeline to continue.
                A deployement is considered 'healthy' when all instances of all containers that have had a state change in the last 15 minutes
                that have health checks defined, become healthy.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - environment.deployment.healthy.watch
                details:
                    type: object
                    required:
                        - environment
                    properties:
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        tag:
                            type:
                                - string
                                - "null"
                        version:
                            type:
                                - string
                                - "null"
                        max_wait:
                            description: The maximum amount of time to wait for the deployment to become healthy before failing this step.
                            anyOf:
                                - $ref: "#/components/schemas/Duration"
                                - type: "null"
        StackBuildCreateStep:
            title: StackBuildCreateStep
            type: object
            description: Settings for creating a stack build in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.create
                details:
                    type: object
                    required:
                        - stack
                    properties:
                        stack:
                            $ref: "#/components/schemas/FluidIdentifier"
                        instructions:
                            type:
                                - object
                                - "null"
                            description: Additional instructions used when generating this stack build.
                            properties:
                                git:
                                    type: object
                                    description: Git information specifics.
                                    required:
                                        - type
                                        - value
                                    properties:
                                        type:
                                            type: string
                                            description: The type of information the user is passing.
                                            enum:
                                                - branch
                                                - hash
                                                - tag
                                        value:
                                            type: string
                                            description: The actual value to be passed.
                                variables:
                                    type: object
                                    description: Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map.
                                    additionalProperties:
                                        type: string
                        about:
                            type:
                                - object
                                - "null"
                            description: Information about the stack build.
                            required:
                                - version
                                - description
                            properties:
                                version:
                                    type: string
                                    description: A user defined version of the build.
                                description:
                                    type: string
                                    description: A user defined description for the build.
        StackBuildGenerateStep:
            title: StackBuildGenerateStep
            type: object
            description: Settings for the stack build generate step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.generate
                details:
                    type: object
                    required:
                        - build
                    properties:
                        build:
                            $ref: "#/components/schemas/FluidIdentifier"
        StackDeployContainersObject:
            title: StackDeployContainersObject
            type: object
            description: Options to control how a container behaves when a stack build is deployed.
            required:
                - reimage
                - reconfigure
            properties:
                reimage:
                    type: boolean
                    description: A boolean where true represents the container is to be reimaged.
                reconfigure:
                    type: boolean
                    description: A boolean where true represents the container is to be reconfigured.
        StackBuildDeploymentUpdates:
            title: StackBuildDeploymentUpdates
            type: object
            description: Optional update object used to specify specific params to update from the stack build.
            required:
                - containers
                - scoped_variables
            properties:
                containers:
                    type: object
                    description: A map of the container names to update within the environment.
                    additionalProperties:
                        $ref: "#/components/schemas/StackDeployContainersObject"
                    minProperties: 1
                scoped_variables:
                    type:
                        - object
                        - "null"
                    description: An object that describes configuration options for scoped variables on stack build. If null, scoped variables will be ignored during deployment events.
                    required:
                        - add_new
                        - replace_existing
                    properties:
                        add_new:
                            description: If set to true, any scoped variables that are new to the environment will be created when deployed.
                            type: boolean
                        replace_existing:
                            description: When deploying to the environment, any scoped variables defined in the build that match an existing scoped variable in the environment will cause the existing scoped variable to be updated to the new value.
                            type: boolean
        StackBuildDeployStep:
            title: StackBuildDeployStep
            type: object
            description: Settings for deploying a stack build in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.build.deploy
                details:
                    type: object
                    required:
                        - environment
                        - build
                    properties:
                        build:
                            $ref: "#/components/schemas/FluidIdentifier"
                        environment:
                            $ref: "#/components/schemas/FluidIdentifier"
                        update:
                            anyOf:
                                - $ref: "#/components/schemas/StackBuildDeploymentUpdates"
                                - type: "null"
                        deployment:
                            anyOf:
                                - $ref: "#/components/schemas/Deployment"
                                - type: "null"
        StackPruneStep:
            title: StackPruneStep
            type: object
            description: Settings for pruning a stack in a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - stack.prune
                details:
                    type: object
                    required:
                        - stack
                    properties:
                        stack:
                            $ref: "#/components/schemas/FluidIdentifier"
                        criteria:
                            type:
                                - object
                                - "null"
                            properties:
                                expire:
                                    anyOf:
                                        - $ref: "#/components/schemas/Duration"
                                        - type: "null"
        SleepStep:
            title: SleepStep
            type: object
            description: Settings for the sleep step for a pipeline.
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - sleep
                details:
                    type: object
                    properties:
                        duration:
                            description: Total duration to run this step for, before moving on to the next step.
                            $ref: "#/components/schemas/Duration"
        WebhookStepOptions:
            title: WebhookStepOptions
            description: Options for configuring webhook pipeline steps.
            type: object
            properties:
                max_attempts:
                    type:
                        - integer
                        - "null"
                interval:
                    description: How long to wait between retries on wait.
                    anyOf:
                        - $ref: "#/components/schemas/Duration"
                        - type: "null"
                fail_on:
                    type:
                        - object
                        - "null"
                    required:
                        - not
                    properties:
                        not:
                            type: boolean
                            description: If true, will fail on any codes NOT defined in the http_codes array.
                        http_codes:
                            type:
                                - array
                                - "null"
                            description: A list of http response codes that will trigger a failure.
                            items:
                                type: integer
                retry_on:
                    type:
                        - object
                        - "null"
                    required:
                        - not
                    properties:
                        not:
                            type: boolean
                            description: If true, will retry on any codes NOT defined in the http_codes array.
                        http_codes:
                            type:
                                - array
                                - "null"
                            description: A list of http response codes that will trigger a retry.
                            items:
                                type: integer
        WebhookPostStep:
            title: WebhookPostStep
            description: |
                A pipeline step that will make a POST request to the specified endpoints. The webhook will post the full body of the resource referenced by the step.
                For example if you were to reference a step creating a container, you would receive that container object in the post body. 
                You may also specify a custom body instead.
            type: object
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - webhook.post
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
                            description: The url to submit a POST request to.
                        headers:
                            type:
                                - object
                                - "null"
                            description: An optional map of headers to send with the request.
                            additionalProperties:
                                type: string
                        options:
                            anyOf:
                                - $ref: "#/components/schemas/WebhookStepOptions"
                                - type: "null"
                        body:
                            type:
                                - string
                                - "null"
                            description: An optional POST body to send with the request. Cannot be used with `from``.
                        from:
                            type:
                                - string
                                - "null"
                            description: Takes the output from a previous step and uses it as the body for the POST request. Cannot be used with `body`. String format is <stageIdentifier/stepIdentifier>
                            examples:
                                - init/image-create
        WebhookGetStep:
            title: WebhookGetStep
            description: |
                A pipeline step that will make a GET request to the specified endpoint.
            type: object
            required:
                - action
                - details
            properties:
                identifier:
                    type: string
                    description: An identifier for the step.
                options:
                    type: object
                    properties:
                        skip:
                            type: boolean
                action:
                    type: string
                    description: The action that the step takes.
                    enum:
                        - webhook.get
                details:
                    type: object
                    required:
                        - url
                    properties:
                        url:
                            type: string
                            description: The url to submit a POST request to.
                        headers:
                            type:
                                - object
                                - "null"
                            description: An optional map of headers to send with the request.
                            additionalProperties:
                                type: string
                        options:
                            anyOf:
                                - $ref: "#/components/schemas/WebhookStepOptions"
                                - type: "null"
        PipelineSteps:
            title: PipelineStep
            description: A step for a pipeline stage.
            discriminator:
                propertyName: action
                mapping:
                    image.create: "#/components/schemas/ImageCreateStep"
                    image.import: "#/components/schemas/ImageImportStep"
                    images.prune: "#/components/schemas/ImagesPruneStep"
                    image.create-import: "#/components/schemas/ImageCreateImportStep"
                    container.create: "#/components/schemas/ContainerCreateStep"
                    container.start: "#/components/schemas/ContainerStartStep"
                    container.stop: "#/components/schemas/ContainerStopStep"
                    container.delete: "#/components/schemas/ContainerDeleteStep"
                    container.reimage: "#/components/schemas/ContainerReimageStep"
                    container.restart: "#/components/schemas/ContainerRestartStep"
                    container.function.trigger: "#/components/schemas/ContainerFunctionTriggerStep"
                    environment.create: "#/components/schemas/EnvironmentCreateStep"
                    environment.start: "#/components/schemas/EnvironmentStartStep"
                    environment.stop: "#/components/schemas/EnvironmentStopStep"
                    environment.delete: "#/components/schemas/EnvironmentDeleteStep"
                    environment.deployment.start: "#/components/schemas/EnvironmentDeploymentStartStep"
                    environment.deployment.stop: "#/components/schemas/EnvironmentDeploymentStopStep"
                    environment.deployments.tag: "#/components/schemas/EnvironmentDeploymentsTagStep"
                    environment.deployments.prune: "#/components/schemas/EnvironmentDeploymentsPruneStep"
                    environment.deployment.healthy.watch: "#/components/schemas/EnvironmentDeploymentHealthyWatchStep"
                    stack.build.create: "#/components/schemas/StackBuildCreateStep"
                    stack.build.generate: "#/components/schemas/StackBuildGenerateStep"
                    stack.build.deploy: "#/components/schemas/StackBuildDeployStep"
                    stack.prune: "#/components/schemas/StackPruneStep"
                    sleep: "#/components/schemas/SleepStep"
                    webhook.post: "#/components/schemas/WebhookPostStep"
                    webhook.get: "#/components/schemas/WebhookGetStep"
            oneOf:
                - $ref: "#/components/schemas/ImageCreateStep"
                - $ref: "#/components/schemas/ImageImportStep"
                - $ref: "#/components/schemas/ImagesPruneStep"
                - $ref: "#/components/schemas/ImageCreateImportStep"
                - $ref: "#/components/schemas/ContainerCreateStep"
                - $ref: "#/components/schemas/ContainerStartStep"
                - $ref: "#/components/schemas/ContainerStopStep"
                - $ref: "#/components/schemas/ContainerDeleteStep"
                - $ref: "#/components/schemas/ContainerReimageStep"
                - $ref: "#/components/schemas/ContainerRestartStep"
                - $ref: "#/components/schemas/ContainerFunctionTriggerStep"
                - $ref: "#/components/schemas/EnvironmentCreateStep"
                - $ref: "#/components/schemas/EnvironmentStartStep"
                - $ref: "#/components/schemas/EnvironmentStopStep"
                - $ref: "#/components/schemas/EnvironmentDeleteStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentStartStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentStopStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentsTagStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentsPruneStep"
                - $ref: "#/components/schemas/EnvironmentDeploymentHealthyWatchStep"
                - $ref: "#/components/schemas/StackBuildCreateStep"
                - $ref: "#/components/schemas/StackBuildGenerateStep"
                - $ref: "#/components/schemas/StackBuildDeployStep"
                - $ref: "#/components/schemas/StackPruneStep"
                - $ref: "#/components/schemas/WebhookPostStep"
                - $ref: "#/components/schemas/WebhookGetStep"
                - $ref: "#/components/schemas/SleepStep"
        PipelineStage:
            title: PipelineStage
            type: object
            description: A stage for a given pipeline.
            required:
                - identifier
                - steps
            properties:
                identifier:
                    type: string
                    description: A stage identifier.
                steps:
                    type: array
                    description: An array of steps for the stage.
                    items:
                        $ref: "#/components/schemas/PipelineSteps"
                options:
                    type: object
                    description: Additonal options for the stage.
                    properties:
                        skip:
                            type: boolean
                            description: A boolean where true indicates the given stage should be skipped when the pipeline is run.
        PipelineState:
            title: PipelineState
            type: object
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pipeline.
                          type: string
                          enum:
                              - live
                              - acquiring
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        Pipeline:
            title: Pipeline
            type: object
            description: A pipeline resource.
            required:
                - id
                - hub_id
                - name
                - creator
                - dynamic
                - disable
                - events
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                identifier:
                    $ref: "#/components/schemas/Identifier"
                name:
                    type: string
                    description: A name for the pipeline.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                disable:
                    type: boolean
                    description: A boolean where true signifies the pipeline is disabled.
                dynamic:
                    type: boolean
                    description: Setting to true enables variable and other advanced logic support on this pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false.
                stages:
                    description: An array of stages.
                    type: array
                    items:
                        $ref: "#/components/schemas/PipelineStage"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                events:
                    title: PipelineEvents
                    type: object
                    description: A collection of timestamps for each event in the pipeline's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_run
                    properties:
                        created:
                            description: The timestamp of when the pipeline was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the pipeline was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the pipeline was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_run:
                            description: The timestamp of when the pipeline was last run.
                            $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/PipelineState"
        TriggerKeyState:
            title: TriggerKeyState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the trigger key.
                          type: string
                          enum:
                              - live
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        TriggerKey:
            title: TriggerKey
            type: object
            description: A pipeline trigger key resource.
            required:
                - id
                - name
                - secret
                - creator
                - hub_id
                - pipeline_id
                - state
                - events
                - ips
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: The name of the trigger key.
                secret:
                    type: string
                    description: The secret used when calling the trigger key programmatically.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                pipeline_id:
                    type: string
                    description: The ID for the pipeline related to this trigger key.
                state:
                    $ref: "#/components/schemas/TriggerKeyState"
                events:
                    title: TriggerKeyEvents
                    type: object
                    description: A collection of timestamps for each event in the trigger key's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the trigger key was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the trigger key was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the trigger key was deleted.
                            $ref: "#/components/schemas/DateTime"
                ips:
                    description: An array of ips this trigger key is usable from.
                    type: array
                    items:
                        type: string
        AutoScaleGroupScale:
            title: AutoScaleGroupScale
            type: object
            properties:
                down:
                    title: AutoScaleGroupScaleDown
                    type: object
                    properties:
                        min_ttl:
                            description: The minimum TTL for the server once deployed through an autoscale event.
                            $ref: "#/components/schemas/Duration"
                        inactivity_period:
                            description: The amount of time between last instance deployed and when the server can begin to get deleted.
                            $ref: "#/components/schemas/Duration"
                        method:
                            type: string
                            enum:
                                - fifo
                                - lifo
                up:
                    title: AutoScaleGroupScaleUp
                    type: object
                    properties:
                        maximum:
                            type: integer
        AutoScaleGroupInfrastructure:
            title: AutoScaleGroupInfrastructure
            type: object
            required:
                - models
            properties:
                models:
                    type: array
                    items:
                        type: object
                        required:
                            - provider
                            - model_id
                            - priority
                            - locations
                        properties:
                            provider:
                                type: string
                                description: The integration identifier for infrastructure provider used.
                            integration_id:
                                $ref: "#/components/schemas/ID"
                                description: The ID of the integration associated with this auto-scale group infrastructure.
                            model_id:
                                type: string
                            priority:
                                type: integer
                            locations:
                                type: array
                                items:
                                    type: object
                                    required:
                                        - id
                                        - availability_zones
                                    properties:
                                        id:
                                            type: string
                                        availability_zones:
                                            type: array
                                            items:
                                                type: string
        AutoScaleGroup:
            title: AutoScaleGroup
            type: object
            required:
                - id
                - name
                - identifier
                - creator
                - hub_id
                - cluster
                - infrastructure
                - state
                - events
                - cache
            properties:
                id:
                    type: string
                name:
                    type: string
                identifier:
                    type: string
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    type: string
                cluster:
                    type: string
                scale:
                    $ref: "#/components/schemas/AutoScaleGroupScale"
                acl:
                    anyOf:
                        - $ref: "#/components/schemas/ACL"
                        - type: "null"
                infrastructure:
                    $ref: "#/components/schemas/AutoScaleGroupInfrastructure"
                state:
                    title: AutoScaleGroupState
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the auto-scale group.
                                  type: string
                                  enum:
                                      - new
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                events:
                    title: AutoScaleGroupEvents
                    type: object
                    description: A collection of timestamps for each event in the auto-scale group's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                        - last_sync
                    properties:
                        created:
                            description: The timestamp of when the auto-scale group was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the auto-scale group was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the auto-scale group was deleted.
                            $ref: "#/components/schemas/DateTime"
                        last_sync:
                            description: The timestamp of when the auto-scale group was last synced.
                            $ref: "#/components/schemas/DateTime"
        ResourceType:
            title: ResourceType
            type: string
            enum:
                - account
                - image.source
                - image
                - container
                - container.instance
                - hub
                - hub.api_key
                - hub.membership
                - hub.role
                - sdn.network
                - dns.zone
                - dns.zone.record
                - pipeline
                - pipeline.run
                - stack
                - stack.build
                - infrastructure.provider
                - infrastructure.autoscale.group
                - infrastructure.server
                - infrastructure.cluster
                - infrastructure.ips.pool
                - billing.invoice
                - billing.method
                - environment
                - environment.scoped-variable
        PipelineRunStep:
            title: PipelineRunStep
            type: object
            required:
                - identifier
                - action
                - events
                - success
            properties:
                identifier:
                    type: string
                action:
                    type: string
                    enum:
                        - environment.create
                        - environment.start
                        - environment.stop
                        - environment.delete
                        - environment.deployments.prune
                        - environment.deployments.tag
                        - environment.deployment.start
                        - environment.deployment.stop
                        - environment.deployment.healthy.watch
                        - image.create
                        - image.import
                        - images.prune
                        - image.create-import
                        - container.create
                        - container.reimage
                        - container.start
                        - container.stop
                        - container.restart
                        - container.delete
                        - container.function.trigger
                        - stack.build.create
                        - stack.build.deploy
                        - stack.build.generate
                        - stack.prune
                        - sleep
                        - webhook.post
                        - webhook.get
                events:
                    type: object
                    description: A collection of timestamps for each event in the pipeline run's lifetime.
                    required:
                        - started
                        - finished
                    properties:
                        started:
                            description: The timestamp of when the pipeline step was started.
                            $ref: "#/components/schemas/DateTime"
                        finished:
                            description: The timestamp of when the pipeline step was finished.
                            $ref: "#/components/schemas/DateTime"
                success:
                    type: boolean
                components:
                    type:
                        - array
                        - "null"
                    items:
                        type: object
                        required:
                            - type
                            - id
                        properties:
                            type:
                                $ref: "#/components/schemas/ResourceType"
                            id:
                                type: string
                error:
                    description: An error, if any, that has occurred for this step.
                    type:
                        - object
                        - "null"
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
        RunState:
            title: PipelineRunState
            allOf:
                - required:
                      - current
                  properties:
                      current:
                          description: The current state of the pipeline run.
                          type: string
                          enum:
                              - new
                              - queued
                              - running
                              - deleting
                              - deleted
                - $ref: "#/components/schemas/State"
        PipelineRunEvents:
            title: PipelineRunEvents
            type: object
            description: A collection of timestamps for each event in the pipeline run's lifetime.
            required:
                - started
                - queued
                - finished
            properties:
                started:
                    description: The timestamp of when the pipeline run was started.
                    $ref: "#/components/schemas/DateTime"
                queued:
                    description: The timestamp of when the pipeline run was queued.
                    $ref: "#/components/schemas/DateTime"
                finished:
                    description: The timestamp of when the pipeline run was finished.
                    $ref: "#/components/schemas/DateTime"
        PipelineRun:
            title: PipelineRun
            type: object
            description: A pipeline run resource.
            required:
                - id
                - creator
                - hub_id
                - pipeline_id
                - stages
                - state
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                pipeline_id:
                    type: string
                    description: The ID for the pipeline this run belongs to.
                sub_queue:
                    description: Describes the sub queue defined during pipeline trigger, if present.
                    type:
                        - string
                        - "null"
                skip_locks:
                    description: Describes if a skip lock was defined during pipeline trigger.
                    type: boolean
                stages:
                    type: array
                    description: An array of pipeline stages.
                    items:
                        type: object
                        required:
                            - identifier
                            - steps
                            - events
                        properties:
                            identifier:
                                type: string
                                description: A stage identifier.
                            steps:
                                type: array
                                items:
                                    $ref: "#/components/schemas/PipelineRunStep"
                            events:
                                type: object
                                description: A collection of timestamps for each event in the pipeline run's lifetime.
                                required:
                                    - started
                                    - finished
                                properties:
                                    started:
                                        description: The timestamp of when the pipeline stage was started.
                                        $ref: "#/components/schemas/DateTime"
                                    finished:
                                        description: The timestamp of when the pipeline stage was finished.
                                        $ref: "#/components/schemas/DateTime"
                state:
                    $ref: "#/components/schemas/RunState"
                events:
                    $ref: "#/components/schemas/PipelineRunEvents"
                variables:
                    type: object
                    description: A map of variable values used during pipeline run.
                    additionalProperties:
                        type: string
        VirtualMachineSshKey:
            title: VirtualMachineSshKey
            type: object
            description: |
                Describes an SSH key used to access a virtual machine.
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                name:
                    type: string
                    description: A user-defined name for the SSH key.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                environment_id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/ID"
                state:
                    allOf:
                        - required:
                              - current
                          properties:
                              current:
                                  description: The current state of the SSH key.
                                  type: string
                                  enum:
                                      - live
                                      - deleting
                                      - deleted
                        - $ref: "#/components/schemas/State"
                public_key:
                    type: string
                    description: The public key value of this SSH key.
            required:
                - id
                - name
                - identifier
                - creator
                - environment_id
                - hub_id
                - state
                - public_key
        ComponentsIncludes:
            title: ComponentIncludes
            type: object
            description: A resource that is associated with activity.
            additionalProperties:
                oneOf:
                    - $ref: "#/components/schemas/Container"
                    - $ref: "#/components/schemas/VirtualMachine"
                    - $ref: "#/components/schemas/Instance"
                    - $ref: "#/components/schemas/Environment"
                    - $ref: "#/components/schemas/Image"
                    - $ref: "#/components/schemas/ImageSource"
                    - $ref: "#/components/schemas/Server"
                    - $ref: "#/components/schemas/Pool"
                    - $ref: "#/components/schemas/Integration"
                    - $ref: "#/components/schemas/Stack"
                    - $ref: "#/components/schemas/StackBuild"
                    - $ref: "#/components/schemas/Zone"
                    - $ref: "#/components/schemas/Record"
                    - $ref: "#/components/schemas/TlsCertificate"
                    - $ref: "#/components/schemas/ApiKey"
                    - $ref: "#/components/schemas/Network"
                    - $ref: "#/components/schemas/HubMembership"
                    - $ref: "#/components/schemas/Pipeline"
                    - $ref: "#/components/schemas/TriggerKey"
                    - $ref: "#/components/schemas/ScopedVariable"
                    - $ref: "#/components/schemas/Hub"
                    - $ref: "#/components/schemas/Invoice"
                    - $ref: "#/components/schemas/Method"
                    - $ref: "#/components/schemas/AutoScaleGroup"
                    - $ref: "#/components/schemas/PipelineRun"
                    - $ref: "#/components/schemas/Role"
                    - $ref: "#/components/schemas/PublicAccount"
                    - $ref: "#/components/schemas/VirtualMachineSshKey"
        ActivityIncludes:
            title: ActivityIncludes
            description: All includable resources linkable to the given records.
            type: object
            properties:
                users:
                    $ref: "#/components/schemas/CreatorInclude"
                components:
                    $ref: "#/components/schemas/ComponentsIncludes"
        ApiKeyIncludes:
            title: ApiKeyIncludes
            type: object
            description: A resource that is associated with an API key.
            properties:
                roles:
                    type: object
                    description: A map of roles relevant to this API key, keyed by the role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of roles relevant to this API key, keyed by the role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        HubMembershipIncludes-2:
            title: HubMembershipIncludes
            description: All includable resources for hub memberships.
            type: object
            properties:
                accounts:
                    type: object
                    description: A record with an ID mapped to a public account.
                    additionalProperties:
                        $ref: "#/components/schemas/PublicAccount"
                roles:
                    type: object
                    description: A map of roles relevant to this hub membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of roles relevant to this hub membership, keyed by the role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        HubInviteIncludes:
            title: HubInviteIncludes
            description: All includable resources for invites.
            type: object
            properties:
                senders:
                    type: object
                    description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
                    properties:
                        accounts:
                            type: object
                            description: A record with an ID mapped to a public account.
                            additionalProperties:
                                $ref: "#/components/schemas/PublicAccount"
                roles:
                    type: object
                    description: A map of roles relevant to this hub membership, keyed by the Role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/Role"
                roles:identifiers:
                    type: object
                    description: A map of roles relevant to this hub membership, keyed by the role ID.
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
        ImageIncludes:
            title: ImageIncludes
            description: All includable resources linkable to the given image.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                stack_builds:
                    $ref: "#/components/schemas/StackBuildIncludes"
                stacks:
                    $ref: "#/components/schemas/StackIncludes"
                stacks:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                sources:
                    $ref: "#/components/schemas/ImageSourceIncludes"
                sources:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        BuildLog:
            title: ImageBuildLog
            description: A build log for a given image.
            type: object
            required:
                - id
                - image_id
                - hub_id
                - log
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                image_id:
                    type: string
                    description: The ID of the image the build log pertains to.
                log:
                    type: string
                    description: The log itself.
                events:
                    title: BuildLogEvents
                    type: object
                    description: A collection of timestamps for each event in the build log's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the build log was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the build log was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the build log was deleted.
                            $ref: "#/components/schemas/DateTime"
        SourceIncludes:
            title: SourceIncludes
            description: A resource associate with an image source.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                integrations:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        InfrastructureResourceSummary:
            title: InfrastructureResourceSummary
            type: object
            description: A summary of resource utilization/availability.
            required:
                - ram
                - cpu
            properties:
                ram:
                    type: object
                    description: Information about RAM Resources.
                    required:
                        - total_mb
                        - allocated_mb
                        - used_mb
                    properties:
                        total_mb:
                            type: integer
                            description: The total amount of RAM in MBsr.
                        allocated_mb:
                            type: integer
                            description: The total amount of allocated RAM in MBs.
                        used_mb:
                            type: integer
                            description: The total amount of used RAM in MBs.
                        provisioned_mb:
                            type: integer
                            description: The total amount of provisioned RAM in MBs.
                cpu:
                    type: object
                    description: Information about CPU resources.
                    required:
                        - cores
                        - shares
                        - shares_ratio
                    properties:
                        cores:
                            type: integer
                            description: The number of CPU cores.
                        shares:
                            type: object
                            description: Information about CPU shares.
                            required:
                                - allocated
                                - total
                            properties:
                                allocated:
                                    type: integer
                                    description: The number of shares allocated.
                                total:
                                    type: integer
                                    description: The total number of shares available.
                        share_ratio:
                            type: integer
                            description: The ratio of shares allocated to total shares.
        ClusterVersionServerCount:
            title: ClusterVersionServerCount
            description: A count of servers in a cluster with the given version of Cycle software
            type: object
            required:
                - agent
                - agent-spawner
                - compute
                - compute-spawner
            properties:
                agent:
                    type: object
                    additionalProperties:
                        type: number
                agent-spawner:
                    type: object
                    additionalProperties:
                        type: number
                compute:
                    type: object
                    additionalProperties:
                        type: number
                compute-spawner:
                    type: object
                    additionalProperties:
                        type: number
        InfrastructureSummary:
            title: InfrastructureSummary
            description: An infrastructure summary resource.
            type: object
            required:
                - hub_id
                - images
                - clusters
                - updated
                - servers
            properties:
                hub_id:
                    $ref: "#/components/schemas/HubID"
                servers:
                    type: number
                    description: The number of servers on the cluster
                images:
                    type: object
                    description: Statistics about image usage.
                    required:
                        - tier
                    properties:
                        tier:
                            type: object
                            description: Image tier information.
                            required:
                                - total_mb
                                - allocated_mb
                                - used_mb
                            properties:
                                total_mb:
                                    type: integer
                                    description: A value in MB representing the total MB of space on the infrastructure available for images.
                                allocated_mb:
                                    type: integer
                                    description: A value in MB representing the amount of allocated space for images.
                                used_mb:
                                    type: integer
                                    description: A value in MB representing the total MB of space images are taking up out of the total megabytes available.
                clusters:
                    type: object
                    description: Records pointing to information about clusters that make up this hubs infrastructure.
                    additionalProperties:
                        type: object
                        required:
                            - name
                            - resources
                            - servers
                            - instances
                            - healthy
                            - versions
                        properties:
                            name:
                                type: string
                                description: The name of the cluster
                            resources:
                                $ref: "#/components/schemas/InfrastructureResourceSummary"
                                description: Information about the aggregate resources of the cluster.
                            healthy:
                                type: boolean
                                description: Whether Cycle has determined this cluster to be healthy or not.
                            versions:
                                $ref: "#/components/schemas/ClusterVersionServerCount"
                            instances:
                                $ref: "#/components/schemas/StateCountSummary"
                            servers:
                                type: object
                                required:
                                    - count
                                    - providers
                                properties:
                                    count:
                                        type: number
                                    providers:
                                        type: object
                                        additionalProperties:
                                            type: object
                                            required:
                                                - count
                                            properties:
                                                count:
                                                    type: number
                                                locations:
                                                    type:
                                                        - object
                                                        - "null"
                                                    additionalProperties:
                                                        type: integer
                                                models:
                                                    type:
                                                        - object
                                                        - "null"
                                                    additionalProperties:
                                                        type: integer
                                                resources:
                                                    $ref: "#/components/schemas/InfrastructureResourceSummary"
                                    server_ids:
                                        type: array
                                        description: IDs of all servers in this cluster.
                                        items:
                                            $ref: "#/components/schemas/ID"
                updated:
                    description: A timestamp of when the infrastructure was last updated.
                    $ref: "#/components/schemas/DateTime"
        DeploymentStrategy:
            title: DeploymentStrategy
            type: object
            description: Information about supported container deployment strategies.
            required:
                - name
                - disabled
                - description
            properties:
                name:
                    type: string
                    description: The human-friendly name of the deployment strategy.
                disabled:
                    type: boolean
                    description: A boolean where true signifies a strategy is either not yet or no longer available.
                description:
                    type: string
                    description: A description for the deployment strategy.
        ServerModelsIncludes:
            title: ServerModelsIncludes
            description: A resource associated with a server models.
            type: object
            additionalProperties:
                $ref: "#/components/schemas/ProviderServerModel"
        AutoScaleGroupIncludes:
            title: AutoScaleGroupIncludes
            description: All includable resource linkable to the given auto-scale group.
            type: object
            properties:
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                models:
                    $ref: "#/components/schemas/ServerModelsIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
        ServerStatsCpuUsageTelemetry:
            title: ServerStatsCpuUsageTelemetry
            type: object
            properties:
                user:
                    type: number
                    format: float
                nice:
                    type: number
                    format: float
                system:
                    type: number
                    format: float
                idle:
                    type: number
                    format: float
                iowait:
                    type: number
                    format: float
                irq:
                    type: number
                    format: float
                soft_irq:
                    type: number
                    format: float
                steal:
                    type: number
                    format: float
                guest:
                    type: number
                    format: float
                guest_nice:
                    type: number
                    format: float
        ServerStatsRamTelemetry:
            title: ServerStatsRamTelemetry
            type: object
            description: Statistics about the RAM on a given server.
            required:
                - available
                - free
                - total
            properties:
                available:
                    type: number
                    format: float
                    description: The available RAM on the server.
                free:
                    type: number
                    format: float
                    description: The free RAM on the server.
                total:
                    type: number
                    format: float
                    description: The total RAM on the server.
        ServerStatsTelemetry:
            title: ServerStatsTelemetry
            type: object
            description: Statistics about a given servers telemetery data.
            required:
                - time
                - load
                - ram
                - storage_base
                - storage_pool
            properties:
                time:
                    description: The timestamp for when the telemetery data was collected.
                    $ref: "#/components/schemas/DateTime"
                cpu_usage:
                    $ref: "#/components/schemas/ServerStatsCpuUsageTelemetry"
                load:
                    $ref: "#/components/schemas/ServerStatsLoad"
                ram:
                    $ref: "#/components/schemas/ServerStatsRamTelemetry"
                storage_base:
                    type: object
                    description: Telemetry data for the base volume of a given server.
                    required:
                        - used
                        - free
                        - total
                    properties:
                        used:
                            type: integer
                            description: The amount of storage currently used in the base volume.
                        free:
                            type: integer
                            description: The amount of free space on the base volume.
                        total:
                            type: integer
                            description: The total amount of space on the base volume.
                storage_pool:
                    type: object
                    description: User data storage across all devices.
                    required:
                        - data_percent
                        - meta_percent
                        - total
                    properties:
                        data_percent:
                            type: number
                            description: The percentage of storage used by user data.
                        meta_percent:
                            type: number
                            description: The percentage of storage used by the file allocation stables, etc.
                        total:
                            type: number
                            description: The total amount of storage available.
        ReconfigureSharedFsTask:
            title: ReconfigureSharedFsTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - sharedfs.reconfigure
                contents:
                    type: object
                    properties:
                        mounts:
                            type:
                                - object
                                - "null"
                            additionalProperties:
                                type: object
                                required:
                                    - type
                                    - options
                                    - source
                                properties:
                                    type:
                                        type: string
                                        description: String describing the server mount type.
                                    options:
                                        type: string
                                        description: Comma separated string describing the server mount options.
                                        examples:
                                            - key1=value1,key2=value2
                                    source:
                                        type: string
                                        description: String describing the server mount source.
                        directories:
                            type:
                                - object
                                - "null"
                            description: An object describing directory identifiers with value {}.
                            additionalProperties: {}
        ReconfigureServerFeaturesTask:
            title: ReconfigureServerFeaturesTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - features.reconfigure
                contents:
                    type: object
                    description: Supplemental information needed to perform the action.
                    properties:
                        sftp:
                            type: boolean
                            description: A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes.
                        base_volume_gb:
                            type:
                                - integer
                                - "null"
                            description: A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server.
                        gateway:
                            type:
                                - object
                                - "null"
                            description: Configuration options for running gateway services on this server.
                            properties:
                                type:
                                    type: string
                                    description: The type of gateway service that can be run on this server.
                                    enum:
                                        - bgp
                                        - static
                            required:
                                - type
        RestartServerTask:
            title: RestartServerTask
            type: object
            description: A job that restarts the server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - restart
        RestartComputeTask:
            title: RestartComputeServiceTask
            type: object
            description: A job that restarts compute service on a given server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - compute.restart
        RestartComputeSpawnerTask:
            title: RestartComputeSpawnerTask
            type: object
            description: A job that restarts compute service on a given server.
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - compute.spawner.restart
        EvacuateServerTask:
            title: EvacuateServerTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - evacuation.start
                contents:
                    type: object
                    required:
                        - destination
                    properties:
                        destination:
                            type: object
                            properties:
                                server_id:
                                    anyOf:
                                        - $ref: "#/components/schemas/ID"
                                        - type: "null"
        EvacuateServerResetTask:
            title: EvacuateServerResetTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The action to take.
                    enum:
                        - evacuation.reset
        ServerTags:
            title: ServerTags
            description: Tags for a given server.
            type: object
            required:
                - data
            properties:
                data:
                    type: array
                    description: An array of server tags.
                    items:
                        type: string
        UsageDatum:
            title: ServerUsageDatum
            type: object
            description: Server usage data.
            required:
                - time
                - nodes
                - memory_gb
            properties:
                time:
                    description: A timestamp for when the usage data was collected.
                    $ref: "#/components/schemas/DateTime"
                nodes:
                    type: integer
                    description: The number of nodes the data is pulled from.
                memory_gb:
                    type: integer
                    description: A number in GB representing memory.
        PoolIncludes:
            title: PoolIncludes
            type: object
            description: Resources associated with an IP Pool.
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                servers:
                    $ref: "#/components/schemas/ServersIncludes"
                integrations:
                    $ref: "#/components/schemas/IntegrationsIncludes"
                locations:
                    $ref: "#/components/schemas/LocationsIncludes"
        TaskState:
            title: TaskState
            type: object
            properties:
                changed:
                    $ref: "#/components/schemas/DateTime"
                current:
                    description: The current state of the task.
                    type: string
                    enum:
                        - pending
                        - error
                        - running
                        - completed
        JobTask:
            title: JobTask
            type: object
            description: Information about a job task.
            required:
                - id
                - caption
                - header
                - events
                - error
                - steps
                - state
                - input
                - output
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                caption:
                    type: string
                    description: A short description of the task.
                header:
                    type: string
                    description: The API function called.
                events:
                    title: TaskEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the task was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the task was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the task was started.
                            $ref: "#/components/schemas/DateTime"
                steps:
                    description: An array of job task steps.
                    type:
                        - array
                        - "null"
                    items:
                        $ref: "#/components/schemas/TaskStep"
                state:
                    $ref: "#/components/schemas/TaskState"
                input:
                    type: object
                    description: Input information used for the job tasks.
                    additionalProperties: {}
                output:
                    type:
                        - object
                        - "null"
                    description: Output informaiton used for the job tasks.
                    additionalProperties:
                        type: string
                error:
                    type:
                        - object
                        - "null"
                    description: An error object describing issues with the job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: An error message
        JobState:
            title: JobState
            type: object
            required:
                - current
                - error
            properties:
                current:
                    description: The current state of the job.
                    type: string
                    enum:
                        - new
                        - queued
                        - error
                        - scheduled
                        - expired
                        - running
                        - completed
                changed:
                    $ref: "#/components/schemas/DateTime"
                error:
                    type:
                        - object
                        - "null"
                    description: An error, if any, that has occurred for this job.
                    required:
                        - message
                    properties:
                        message:
                            type: string
                            description: Details about the error that has occurred.
        Job:
            title: Job
            description: A job resource.
            type: object
            required:
                - id
                - queue
                - caption
                - events
                - schedule
                - expires
                - tasks
                - hash
                - limit_duplicates
                - creator
                - hub_id
                - state
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                queue:
                    type: string
                    description: A dash separated string showing the environment_id where the job is taking place.
                caption:
                    type: string
                    description: A short description of the job.
                events:
                    title: JobEvents
                    type: object
                    description: A collection of timestamps for each event in the job's lifetime.
                    required:
                        - queued
                        - completed
                        - started
                    properties:
                        queued:
                            description: The timestamp of when the job was queued.
                            $ref: "#/components/schemas/DateTime"
                        completed:
                            description: The timestamp of when the job was completed.
                            $ref: "#/components/schemas/DateTime"
                        started:
                            description: The timestamp of when the job was started.
                            $ref: "#/components/schemas/DateTime"
                schedule:
                    description: A timestamp of when the job was scheduled.
                    $ref: "#/components/schemas/DateTime"
                tasks:
                    description: An array of job tasks.
                    type: array
                    items:
                        $ref: "#/components/schemas/JobTask"
                expires:
                    description: A timestamp for when the job expires.
                    $ref: "#/components/schemas/DateTime"
                hash:
                    type: string
                    description: A combination of the individual task details and job details.
                limit_duplicates:
                    type: boolean
                    description: A boolean where true represents the job is set to prevent duplicates of itself quickly after creation.
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                state:
                    $ref: "#/components/schemas/JobState"
        JobIncludes:
            title: JobIncludes
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        Metric:
            title: Metric
            description: A granular point-in-time measurement of a value, and its associated metadata. Metrics may contain multiple data points collected between submission to the platform.
            type: object
            required:
                - time
                - metadata
                - points
            properties:
                time:
                    description: When the metric was submitted to the platform.
                    $ref: "#/components/schemas/DateTime"
                labels:
                    type: object
                    description: Additional key-values that can be used for querying in an aggregation pipeline. Often useful for filtering.
                    additionalProperties:
                        type: string
                tags:
                    description: Additional tags associated with the metric.
                    type: array
                    items:
                        type: string
                points:
                    description: An array of recorded data points for this metric.
                    type: array
                    items:
                        type: array
                        items:
                            anyOf:
                                - $ref: "#/components/schemas/DateTime"
                                - type: integer
                metadata:
                    description: Information about this metric, such as the type of metric, the data it represents, and critical common information such as hub ID and associated cluster.
                    type: object
                    required:
                        - metric
                        - type
                        - origin
                    properties:
                        metric:
                            description: |
                                The data this metric represents. Cycle provides several built-in metrics, and, tier allowing, hubs can submit custom metrics as well.

                                Here is a non-exhaustive list of some of the metrics provided by the platform automatically:
                                  - container.instances.num
                                  - discovery.resolutions.cache_hits
                                  - discovery.resolutions.lookups
                                  - discovery.resolutions.not-founds
                                  - environment.containers.num
                                  - environment.instances.num
                                  - environments.num
                                  - images.num
                                  - images.storage_kb
                                  - infrastructure.resources.cpu.cores
                                  - infrastructure.resources.cpu.usage.idle
                                  - infrastructure.resources.cpu.usage.iowait
                                  - infrastructure.resources.cpu.usage.nice
                                  - infrastructure.resources.cpu.usage.soft_irq
                                  - infrastructure.resources.cpu.usage.steal
                                  - infrastructure.resources.cpu.usage.system
                                  - infrastructure.resources.cpu.usage.user
                                  - infrastructure.resources.ram.available_kb
                                  - infrastructure.resources.ram.free_kb
                                  - infrastructure.resources.ram.total_kb
                                  - infrastructure.servers.num
                                  - lb.controller.connections
                                  - lb.controller.disconnects.destination_unavailable
                                  - lb.controller.disconnects.no_error
                                  - lb.controller.disconnects.timeout_idle
                                  - lb.controller.disconnects.timeout_init
                                  - lb.controller.disconnects.total
                                  - lb.controller.disconnects.unknown_error
                                  - lb.controller.received_kb
                                  - lb.controller.requests
                                  - lb.controller.requests.total
                                  - lb.controller.requests.url.handlers.forward.hits
                                  - lb.controller.requests.url.handlers.forward.timing_ms
                                  - lb.controller.requests.url.handlers.redirect.hits
                                  - lb.controller.requests.url.handlers.redirect.timing_ms
                                  - lb.controller.router.destinations.connections.invalid
                                  - lb.controller.router.destinations.connections.received_kb
                                  - lb.controller.router.destinations.connections.success
                                  - lb.controller.router.destinations.connections.transmitted_kb
                                  - lb.controller.router.destinations.connections.unavailable
                                  - lb.controller.router.destinations.latency
                                  - lb.controller.router.destinations.requests.total
                                  - lb.controller.transmitted_kb
                                  - memberships.num
                                  - pipeline.runs.num
                                  - stack.builds.num
                            type: string
                        type:
                            description: |
                                The type of data represented by the metric.
                                  - **gauge**: represents a single numerical value that can arbitrarily go up and down.
                                  - **count**: represents a counter that resets periodically.
                                  - **counter**: represents a counter that only increases.
                                  - **rate**: represents the rate of change of a counter per second.
                                  - **histogram**: tracks the statistical distribution of a set of values.
                                  - **distribution**: aggregates data across multiple hosts and applications.
                                  - **set**: tracks the number of unique elements in a group.
                            type: string
                            enum:
                                - gauge
                                - count
                                - counter
                                - rate
                                - histogram
                                - distribution
                                - set
                        origin:
                            description: The originator of this metric.
                            type: string
                        hub_id:
                            $ref: "#/components/schemas/ID"
                        component:
                            description: The specific resource ID and type associated with this metric.
                            type:
                                - object
                                - "null"
                            required:
                                - id
                                - type
                            properties:
                                id:
                                    $ref: "#/components/schemas/ID"
                                type:
                                    type: string
                        cluster:
                            description: The cluster associated with this metric
                            type:
                                - string
                                - "null"
        EventType:
            title: EventType
            type: string
            enum:
                - api.security_violation
                - console.ssh.login
                - console.ssh.login.failed
                - console.sos.login
                - console.sos.login.failed
                - container.instance.backup.completed
                - container.instance.backup.failed
                - container.instance.delete.failed
                - container.instance.error
                - container.instance.restart.max_restarts
                - container.instance.function.max_runtime
                - container.instance.healthcheck.failed
                - container.instance.healthcheck.recovered
                - container.instance.volume.extend.failed
                - container.instance.healthcheck.restarted
                - container.instance.migration.failed
                - container.instance.migration.completed
                - container.instance.migration.failed
                - container.instance.network.interfaces.create.failed
                - container.instance.restart.failed
                - container.instance.start.failed
                - container.instance.start.privileged
                - container.instance.stop.failed
                - container.instances.autoscale.down
                - container.instances.autoscale.up
                - container.reconfigured.privileged
                - container.volumes.base.create.failed
                - container.volumes.create.failed
                - environment.service.auto_update
                - environment.service.lb.ips.sync.failed
                - environment.service.vpn.login.failed
                - infrastructure.cluster.resources.ram.full
                - infrastructure.server.compute.volumes.base.reconfigured
                - infrastructure.server.compute.full_restart
                - infrastructure.server.compute.sharedfs.mounts.mount
                - infrastructure.server.compute.sharedfs.mounts.mount.failed
                - infrastructure.server.compute.soft_restart
                - infrastructure.server.image.download.failed
                - infrastructure.server.internal_api.throttled
                - infrastructure.server.manifest.sync.failed
                - infrastructure.server.mesh.connect.failed
                - infrastructure.server.neighbor.reachable
                - infrastructure.server.neighbor.rebuild
                - infrastructure.server.neighbor.unreachable
                - infrastructure.server.neighbor.upgraded
                - infrastructure.server.resources.load.high
                - infrastructure.server.resources.ram.full
                - infrastructure.server.resources.storage.volumes.base.full
                - infrastructure.server.resources.storage.cycle_pool.full
                - infrastructure.server.sftp.lockdown
                - infrastructure.server.sftp.login
                - infrastructure.server.sftp.login.failed
                - infrastructure.server.evacuation.failed
                - infrastructure.server.evacuation.completed
        Event:
            title: Event
            description: A platform-generated event. Describes something happening on the platform at a specific time. Can be informational, security related, or a notice of something important.
            type: object
            required:
                - time
                - metadata
            properties:
                time:
                    description: When the event was submitted to the platform.
                    $ref: "#/components/schemas/DateTime"
                labels:
                    type: object
                    description: Additional key-values that can be used for querying in an aggregation pipeline. Often useful for filtering.
                    additionalProperties:
                        type: string
                tags:
                    description: Additional tags associated with the event.
                    type: array
                    items:
                        type: string
                text:
                    description: A message describing what happened.
                    type: string
                metadata:
                    description: Information about this event, such as the type of event, the data it represents, and critical common information such as hub ID and associated cluster.
                    type: object
                    required:
                        - event
                        - type
                        - priority
                        - origin
                    properties:
                        event:
                            description: |
                                Describes what this event is.
                            $ref: "#/components/schemas/EventType"
                        type:
                            description: |
                                The type of event.
                                  - **info**: represents an informational message.
                                  - **warning**: represents a warning message indicating a potential issue.
                                  - **error**: represents an error message indicating a failure or critical issue.
                                  - **success**: represents a success message indicating a successful operation.
                                  - **alert**: represents a critical message indicating a severe issue.
                                  - **notice**: represents a notice message indicating a noteworthy event.
                                  - **audit**: represents a notice message indicating a message that would be needed for audits
                            type: string
                            enum:
                                - info
                                - warning
                                - error
                                - success
                                - alert
                                - notice
                                - audit
                        priority:
                            description: Describes how important this event is.
                            type: string
                            enum:
                                - critical
                                - high
                                - medium
                                - normal
                                - low
                        origin:
                            description: The originator of this event.
                            type: string
                        hub_id:
                            $ref: "#/components/schemas/ID"
                        component:
                            description: The specific resource ID and type associated with this event.
                            type:
                                - object
                                - "null"
                            required:
                                - id
                                - type
                            properties:
                                id:
                                    $ref: "#/components/schemas/ID"
                                type:
                                    type: string
                        cluster:
                            description: The cluster associated with this event
                            type:
                                - string
                                - "null"
        LogLine:
            title: LogLine
            description: A log line is point in time data output from a container instance.
            required:
                - time
                - source
                - message
            properties:
                time:
                    description: The time the log line occurred.
                    $ref: "#/components/schemas/DateTime"
                source:
                    description: The source that generated the log line.
                    examples:
                        - stdout
                    type: string
                message:
                    description: The message associated with the log line.
                    type: string
                instance_id:
                    description: The container instance that the log line originated from.
                    type:
                        - string
                        - "null"
                context_window:
                    description: |
                        A randomly generated ID that is assigned to all lines in the same context window.
                        The first line with a specific ID is the log line that matches the query, and the following
                        log lines are included due to the the set context window in the aggregate.
                    type: string
        Monitor:
            title: Monitor
            description: |
                A monitor used to determine latency between the public internet and a load balancer on Cycle. These monitors are automatically created and managed by the platform. Information about specific monitors is provided for determining the regional latencies for an environment.
            type: object
            properties:
                node_id:
                    type: string
                    description: The ID of the node this monitor is running on.
                country_short:
                    type: string
                    description: The country code of where this monitor is located.
                country:
                    type: string
                    description: The full name of the country where this monitor is located.
                region:
                    type: string
                    description: The name of the region (state, province, prefecture, etc.) where this monitor is located.
                city:
                    type: string
                    description: The name of the city where this monitor is located.
                latitude:
                    type: number
                    format: float
                    description: The latitude where this monitor is located.
                longitude:
                    type: number
                    format: float
                    description: The longitude where this monitor is located.
            required:
                - node_id
                - country_short
                - country
                - region
                - city
                - latitude
                - longitude
        PipelineIncludes:
            title: PipelineIncludes
            description: All includable resources linkable to the given pipeline.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                name:
                    type: string
                    description: A name value.
                components:
                    type: object
                    description: A record of resources that can be associated with the pipeline.
                    additionalProperties:
                        oneOf:
                            - $ref: "#/components/schemas/Container"
                            - $ref: "#/components/schemas/Environment"
                            - $ref: "#/components/schemas/Stack"
                            - $ref: "#/components/schemas/StackBuild"
                            - $ref: "#/components/schemas/Image"
                            - $ref: "#/components/schemas/ImageSource"
                components:identifiers:
                    $ref: "#/components/schemas/IdentifierIncludes"
        TriggerPipelineAction:
            title: TriggerPipelineAction
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The requested action to perform.
                    enum:
                        - trigger
                contents:
                    type: object
                    properties:
                        variables:
                            type: object
                            description: A map of variables to pass into the pipeline when it runs.
                            additionalProperties:
                                type: string
        RerunPipelineAction:
            title: RerunPipelineAction
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The requested action to perform.
                    enum:
                        - rerun
                contents:
                    type: object
                    properties:
                        run_id:
                            description: The ID of the run to retry.
                            $ref: "#/components/schemas/ID"
        NetworkIncludes:
            title: NetworkIncludes
            description: All includable resource linkable to the given network.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                environments:
                    $ref: "#/components/schemas/EnvironmentIncludes"
        Component:
            title: IndexComponent
            type: object
            description: Generic component format for describing resources for the search index
            required:
                - id
                - name
                - state
                - events
                - context_blobs
                - associations
            properties:
                id:
                    description: ID of the component
                    type: string
                name:
                    description: Name of the component
                    type: string
                identifier:
                    $ref: "#/components/schemas/Identifier"
                state:
                    description: State of the component
                    type: string
                events:
                    $ref: "#/components/schemas/Events"
                context_blobs:
                    description: related strings for fuzzy search
                    type: array
                    items:
                        type: string
                associations:
                    type: object
                    description: Component associations
                    properties:
                        container:
                            description: Associated container Id
                            type: string
                        environment:
                            description: Associated environment Id
                            type: string
                        image-source:
                            description: Associated image source Id
                            type: string
                        pipeline:
                            description: Associated pipeline source Id
                            type: string
                        virtual-machine:
                            description: Associated virtual machine source Id
                            type: string
                        image:
                            description: Associated image Id
                            type: string
                        stack:
                            description: Associated stack Id
                            type: string
                        server:
                            description: Associated server Id
                            type: string
                        provider-location:
                            description: Associated provider location Id
                            type: string
        Index:
            title: Index
            type: object
            description: An index that enables search in the portal
            required:
                - generated
                - hub_id
                - containers
                - environments
                - image_sources
                - dns_zones
                - stacks
                - servers
                - pipelines
                - virtual_machines
            properties:
                generated:
                    description: The timestampof when the index was generated
                    $ref: "#/components/schemas/DateTime"
                hub_id:
                    description: Id describing the Hub
                    type: string
                containers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                environments:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                image_sources:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                dns_zones:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                stacks:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                servers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                pipelines:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
                virtual_machines:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Component"
        StackInclude:
            title: StackIncludes
            description: All includable resources linkable to the given stack.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
        StackBuildAbout:
            title: StackBuildAbout
            type: object
            description: Information about the stack build.
            required:
                - version
                - description
            properties:
                version:
                    type: string
                    description: A user defined version of the build.
                description:
                    type: string
                    description: A user defined description for the build.
                git_commit:
                    $ref: "#/components/schemas/StackGitCommit"
        StackBuildLog:
            title: StackBuildLog
            description: A build log for a given stack build.
            type: object
            required:
                - id
                - stack_id
                - build_id
                - hub_id
                - log
                - events
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                hub_id:
                    $ref: "#/components/schemas/HubID"
                stack_id:
                    type: string
                    description: The ID of stack the build log pertains to.
                build_id:
                    type: string
                    description: The ID of stack build the build log pertains to.
                log:
                    type: string
                    description: The log itself.
                events:
                    title: BuildLogEvents
                    type: object
                    description: A collection of timestamps for each event in the build log's lifetime.
                    required:
                        - created
                        - updated
                        - deleted
                    properties:
                        created:
                            description: The timestamp of when the build log was created.
                            $ref: "#/components/schemas/DateTime"
                        updated:
                            description: The timestamp of when the build log was updated.
                            $ref: "#/components/schemas/DateTime"
                        deleted:
                            description: The timestamp of when the build log was deleted.
                            $ref: "#/components/schemas/DateTime"
        GenerateStackBuildAction:
            title: GenerateStackBuild
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    description: The job to do.
                    enum:
                        - generate
        DeployStackBuildAction:
            title: DeployStackBuild
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    description: The action the job takes.
                    enum:
                        - deploy
                contents:
                    type: object
                    description: Additional information needed for the job.
                    required:
                        - environment_id
                    properties:
                        environment_id:
                            type: string
                            description: The ID for the environment this stack build will be deployed to.
                        deployment:
                            anyOf:
                                - $ref: "#/components/schemas/Deployment"
                                - type: "null"
                        update:
                            anyOf:
                                - $ref: "#/components/schemas/StackBuildDeploymentUpdates"
                                - type: "null"
        VirtualMachineIncludes:
            title: VirtualMachineIncludes
            description: All includable resources linkable to the given virtual machine.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                environments:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Environment"
                environments:identifiers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
                clusters:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Cluster"
                containers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Container"
        VirtualMachineStartTask:
            title: VirtualMachineStartTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - start
        VirtualMachineStopTask:
            title: VirtualMachineStopTask
            type: object
            required:
                - action
            properties:
                action:
                    type: string
                    enum:
                        - stop
        VirtualMachineReconfigureTask:
            title: VirtualMachineReconfigureTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - reconfigure
                    description: The action to take.
                contents:
                    $ref: "#/components/schemas/VirtualMachineConfig"
        VirtualMachineRootPwChangeTask:
            title: VirtualMachineRootPwChangeTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - rootpw.change
                    description: The action to take.
                contents:
                    type: object
                    properties:
                        password:
                            type: string
                            description: The new password. Must be at least 10 characters.
                    required:
                        - password
        VirtualMachineIpAllocateTask:
            title: VirtualMachineIpAllocateTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - ip.allocate
                    description: The action to take.
                contents:
                    type: object
                    properties:
                        ip_id:
                            $ref: "#/components/schemas/ID"
                            description: The ID of the IP address to allocate to the virtual machine.
        VirtualMachineIpUnallocateTask:
            title: VirtualMachineIpUnallocateTask
            type: object
            required:
                - action
                - contents
            properties:
                action:
                    type: string
                    enum:
                        - ip.unallocate
                    description: The action to take.
                contents:
                    type: object
                    properties:
                        ip_id:
                            $ref: "#/components/schemas/ID"
                            description: The ID of the IP address to unallocate from the virtual machine.
                    required:
                        - ip_id
        VirtualMachineBaseImage:
            title: VirtualMachineBaseImage
            type: object
            description: |
                Represents a virtual machine base OS image provided by Cycle.
            properties:
                title:
                    type: string
                    description: The name of the base image (e.g., "Alpine Linux").
                description:
                    type: string
                    description: A detailed description of the base image.
                homepage:
                    type: string
                    format: uri
                    description: The official homepage for the base image.
                versions:
                    type: array
                    description: A list of available versions for the base image, including details like version number and disk image URL.
                    items:
                        type: object
                        properties:
                            identifier:
                                type: string
                                description: A unique identifier for the version.
                                examples:
                                    - alpine-3-19
                            version:
                                type: string
                                description: The version number of the base image.
                                examples:
                                    - 3.19
                            disk_image_url:
                                type: string
                                format: uri
                                description: The URL where the disk image can be downloaded.
                            supported:
                                type: boolean
                                description: A flag indicating whether the version is currently supported.
                            uefi:
                                type: boolean
                                description: Whether the image supports UEFI.
                        required:
                            - identifier
                            - version
                            - disk_image_url
                            - supported
                            - uefi
            required:
                - title
                - description
                - homepage
                - versions
        VirtualMachineSosToken:
            title: VirtualMachineSosToken
            type: object
            description: A token used to connect to a virtual machine using serial-over-SSH.
            required:
                - id
                - virtual_machine_id
                - hub_id
                - creator
                - events
                - valid
            properties:
                id:
                    $ref: "#/components/schemas/ID"
                virtual_machine_id:
                    type: string
                    description: The ID of the virtual machine being connected to.
                hub_id:
                    $ref: "#/components/schemas/HubID"
                creator:
                    $ref: "#/components/schemas/CreatorScope"
                events:
                    title: SSHTokenEvents
                    type: object
                    description: A collection of timestamps for each event in the serial-over-SSH token's lifetime.
                    required:
                        - created
                        - used
                        - expires
                    properties:
                        created:
                            description: The timestamp of when the serial-over-SSH token was created.
                            $ref: "#/components/schemas/DateTime"
                        used:
                            description: The timestamp of when the serial-over-SSH token was used.
                            $ref: "#/components/schemas/DateTime"
                        expires:
                            description: The timestamp of when the serial-over-SSH token expires.
                            $ref: "#/components/schemas/DateTime"
                valid:
                    type: boolean
                    description: A boolean where true represents the token as being a valid token to be used for connection.
        VirtualMachineSosConnection:
            title: VirtualMachineSosConnection
            type: object
            description: Connection details for connecting to a virtual machine using serial-over-SSH.
            required:
                - token
                - secret
                - address
            properties:
                token:
                    $ref: "#/components/schemas/VirtualMachineSosToken"
                secret:
                    type: string
                    description: The secret used to connect.
                address:
                    type: string
                    description: The serial-over-SSH connection address.
        VirtualMachineSshIncludes:
            title: VirtualMachineSshIncludes
            description: All includable resources linkable to the given virtual machine SSH key.
            type: object
            properties:
                creators:
                    $ref: "#/components/schemas/CreatorInclude"
                environments:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/Environment"
                environments:identifiers:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/ID"
    responses:
        DefaultError:
            description: General error response from the platform
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorEnvelope"
    parameters:
        SortParam:
            name: sort
            in: query
            style: form
            required: false
            description: An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
            schema:
                type: array
                items:
                    type: string
        FilterParam:
            name: filter
            in: query
            required: false
            schema:
                type: object
            style: deepObject
        PageParam:
            name: page
            in: query
            required: false
            description: In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2`
            explode: true
            style: deepObject
            schema:
                type: object
                properties:
                    number:
                        type: number
                        description: The page to jump to
                    size:
                        type: number
                        description: The number of resources returned per page.
        MembershipIncludeParam:
            name: include
            in: query
            style: form
            required: false
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - senders
                        - hubs
                        - roles
        OrderIncludeParam:
            name: include
            in: query
            style: form
            required: false
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - promo_codes
        OptionParam:
            name: options
            in: query
            required: false
            description: The option field is a key-value object, where the key is the option, and the value is a boolean. For example, `?option[force]=true`
            schema:
                type: object
                additionalProperties:
                    type: string
            style: deepObject
x-tagGroups:
    - name: Accounts
      tags:
          - Accounts
          - Memberships
          - Two-Factor Auth
    - name: Billing
      tags:
          - Credits
          - Invoices
          - Methods
          - Orders
          - Plans
          - Services
    - name: Containers
      tags:
          - Containers
          - Instances
          - Backups
    - name: DNS
      tags:
          - Zones
          - Records
          - TLS
    - name: Environments
      tags:
          - Environments
          - Deployments
          - Scoped Variables
          - Services/Discovery
          - Services/Load Balancer
          - Services/Scheduler
          - Services/VPN
    - name: Hubs
      tags:
          - Hubs
          - API Keys
          - Integrations
          - Hub Members
          - Hub Notifications
          - Roles
    - name: Images
      tags:
          - Images
          - Image Sources
    - name: Infrastructure
      tags:
          - Infrastructure
          - Auto-Scale Groups
          - Clusters
          - Providers
          - Servers
          - IPs
    - name: Jobs
      tags:
          - Jobs
    - name: Monitoring
      tags:
          - Monitoring
    - name: Pipelines
      tags:
          - Pipelines
          - Trigger Keys
    - name: SDN
      tags:
          - Networks
    - name: Search
      tags:
          - Search
    - name: Stacks
      tags:
          - Stacks
          - Stack Builds
    - name: Virtual Machines
      tags:
          - Virtual Machines
    - name: Utility
      tags:
          - Utility
